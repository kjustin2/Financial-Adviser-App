(()=>{"use strict";function e(e){return new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",minimumFractionDigits:0,maximumFractionDigits:0}).format(Math.round(e))}class t{static generateRecommendations(e,t){let n=[];const{healthIndicators:i,keyMetrics:a}=e;return n.push(...this.getEmergencyFundRecommendations(a,t)),n.push(...this.getHighDebtRecommendations(a,t)),n.push(...this.getNegativeCashFlowRecommendations(a)),n.push(...this.getSavingsRateRecommendations(a)),n.push(...this.getInsuranceRecommendations(t)),n.push(...this.getCreditScoreOptimizationRecommendations(t.liabilities.creditScore)),n.push(...this.getInvestmentRecommendations(t,a)),n.push(...this.getBudgetingRecommendations(t)),n.push(...this.getAutomatedSavingsRecommendations(t)),i.forEach((e=>{n.push(...this.getGenericIndicatorRecommendations(e))})),n.sort(((e,t)=>{const n={high:0,medium:1,low:2};return n[e.priority]-n[t.priority]})),Array.from(new Map(n.map((e=>[e.id,e]))).values()).slice(0,10)}static getEmergencyFundRecommendations(t,n){const i=[],{emergencyFundMonths:a,totalLiquidAssets:s}=t,o=n.expenses.housing+n.expenses.food+n.expenses.transportation+n.expenses.utilities;if(o<=0)return[];const r=3*o;if(a<1)i.push({id:"emergency-fund-critical",category:"savings",priority:"high",title:"Critically Low Emergency Fund",description:`You have less than one month of expenses saved (${e(s)}). This puts you at high risk for financial hardship if you face an unexpected event. Building a safety net should be your top priority.`,actionSteps:["Immediately open or fund a dedicated high-yield savings account.",`Set a goal to save at least one full month of expenses (${e(o)}) as quickly as possible.`,"Pause all non-essential spending and investments until this initial goal is met."],timeframe:"next-30-days",impactLevel:"high"});else if(a<3){const t=r-s;i.push({id:"emergency-fund-low",category:"savings",priority:"high",title:"Build Your 3-Month Emergency Fund",description:`You currently have ${a.toFixed(1)} months of expenses saved. While this is a good start, aiming for at least 3 months provides a much stronger safety net. You need to save approximately ${e(t)} more to reach this goal.`,actionSteps:[`Calculate your exact total monthly expenses to confirm your target of ${e(r)}.`,"Set up an automatic recurring transfer to your savings account each payday.","Look for opportunities to reduce spending (e.g., dining out, subscriptions) and redirect that money to savings."],timeframe:"1-3-months",impactLevel:"high"})}return i}static getHighDebtRecommendations(e,t){const n=[],{debtToIncomeRatio:i,creditUtilization:a}=e;return i>43&&n.push({id:"dti-ratio-high",category:"debt",priority:"high",title:"Aggressively Pay Down High-Interest Debt",description:`Your debt-to-income (DTI) ratio is ${i.toFixed(1)}%, which is considered high and may impact your ability to borrow in the future. Creating a focused debt-repayment plan is essential.`,actionSteps:['List all your debts from highest interest rate to lowest (this is the "Avalanche" method).',"Make minimum payments on all debts, but put every extra dollar towards the debt with the highest interest rate.","Consider a debt consolidation loan or balance transfer card to lower your interest rates, but be mindful of fees."],timeframe:"3-6-months",impactLevel:"high"}),a>50&&n.push({id:"credit-utilization-high",category:"debt",priority:"high",title:"Lower Your Credit Utilization",description:`Your credit utilization is ${a.toFixed(1)}%, which is significantly impacting your credit score. Lowering this is one of the fastest ways to improve your financial health.`,actionSteps:["Make paying down your credit card balances your top priority.","If possible, make multiple small payments throughout the month instead of one large one.","Consider asking for a credit limit increase on your existing cards (if you can trust yourself not to spend more)."],timeframe:"1-3-months",impactLevel:"high"}),n}static getNegativeCashFlowRecommendations(t){return t.monthlyCashFlow<0?[{id:"negative-cash-flow",category:"spending",priority:"high",title:"Address Negative Monthly Cash Flow",description:`You are spending ${e(Math.abs(t.monthlyCashFlow))} more than you earn each month. This is unsustainable and requires immediate attention to create a budget and cut expenses.`,actionSteps:["Track every dollar you spend for the next 30 days using an app or spreadsheet.","Identify 3-5 non-essential spending categories where you can cut back immediately (e.g., dining out, subscriptions, shopping).","Build a detailed monthly budget based on your findings and stick to it."],timeframe:"next-30-days",impactLevel:"high"}]:[]}static getSavingsRateRecommendations(e){const{savingsRate:t}=e;return t>=0&&t<10?[{id:"increase-savings-rate",category:"savings",priority:"medium",title:"Increase Your Savings Rate",description:`Your current savings rate is ${t.toFixed(1)}%. While any saving is good, a healthy target is between 10-20% of your income. A higher rate will accelerate your progress towards your financial goals.`,actionSteps:["Try to increase your savings rate by 1% each month.","Allocate any future pay raises or bonuses directly to savings or investments.","Review your budget for small, recurring expenses that can be cut and redirected to savings."],timeframe:"ongoing",impactLevel:"medium"}]:[]}static getInsuranceRecommendations(e){return"very-confident"!==e.insurance.insuranceConfidence?[{id:"review-insurance-coverage",category:"risk",priority:"medium",title:"Review Your Insurance Coverage",description:"You indicated you are not 'very confident' in your insurance coverage. Having the right insurance is crucial for protecting your financial well-being from unexpected events.",actionSteps:["Schedule a free review with your current insurance agent(s) to discuss your life, disability, home/auto policies.","Assess your life insurance needs. A common rule of thumb is 10-12 times your annual income.","Ensure you have long-term disability insurance that covers at least 60% of your income."],timeframe:"next-3-months",impactLevel:"high"}]:[]}static getCreditScoreOptimizationRecommendations(e){return e>740?[{id:"leverage-excellent-credit",category:"credit",priority:"medium",title:"Leverage Your Excellent Credit Score",description:`Your credit score of ${e} is excellent! This is a powerful financial tool you can use to your advantage.`,actionSteps:["Consider refinancing any existing loans (mortgage, auto, student) to secure a lower interest rate.","Explore premium travel or cashback credit cards that offer significant rewards and benefits.","Continue your great habits: always pay your bills on time and keep credit utilization low."],timeframe:"ongoing",impactLevel:"medium"}]:[]}static getInvestmentRecommendations(e,t){return t.emergencyFundMonths>=4&&0===e.behaviors.monthlyInvestmentContribution?[{id:"start-investing",category:"investment",priority:"medium",title:"Start Investing for the Future",description:"You have a solid emergency fund, which is a great foundation. Now is the perfect time to start investing to grow your wealth for long-term goals like retirement.",actionSteps:["If your employer offers a 401(k) match, contribute at least enough to get the full match. It's free money!","Open a Roth IRA, which offers tax-free growth and withdrawals in retirement.","Start with a simple, low-cost target-date index fund or a broad market ETF."],timeframe:"next-3-months",impactLevel:"high"}]:[]}static getBudgetingRecommendations(e){return"no-budget"===e.behaviors.budgetingMethod||"simple-tracking"===e.behaviors.budgetingMethod?[{id:"create-a-budget",category:"spending",priority:"low",title:"Adopt a Formal Budgeting Method",description:"You've indicated you don't follow a formal budget. A budget is a powerful tool for telling your money where to go, instead of wondering where it went.",actionSteps:["Try the 50/30/20 rule as a starting point: 50% of income for needs, 30% for wants, and 20% for savings.","Use a budgeting app (like YNAB or Mint) or a simple spreadsheet to track your spending against your plan.","Review your budget monthly and make adjustments as needed."],timeframe:"next-month",impactLevel:"medium"}]:[]}static getAutomatedSavingsRecommendations(e){return e.behaviors.automaticSavings?[]:[{id:"automate-your-savings",category:"savings",priority:"low",title:"Automate Your Savings and Investments",description:"You're not currently automating your savings. Paying yourself first by automating transfers is the easiest and most effective way to build wealth consistently.",actionSteps:["Set up an automatic recurring transfer from your checking to your savings account for the day after you get paid.","Set up automatic contributions to your 401(k), IRA, or other investment accounts.","Start small if you need to, even $25 a week, and increase the amount every few months."],timeframe:"next-paycheck",impactLevel:"high"}]}static getGenericIndicatorRecommendations(e){return"critical"===e.status||"poor"===e.status?[{id:`improve-${e.name.toLowerCase().replace(/ /g,"-")}`,category:"planning",priority:"high",title:`Focus on Improving ${e.name}`,description:`Your score for ${e.name} is low. Taking steps to improve this area can have a significant impact on your overall financial health.`,actionSteps:[`Review the detailed metrics for the ${e.name} indicator to understand the key drivers.`,"Read educational content about this topic to build your knowledge.","Create a small, achievable goal to start building momentum."],timeframe:"immediate",impactLevel:"high"}]:"fair"===e.status?[{id:`optimize-${e.name.toLowerCase().replace(/ /g,"-")}`,category:"planning",priority:"low",title:`Optimize Your ${e.name}`,description:`Your score for ${e.name} is fair. This is a good foundation, but there are opportunities to make this area even stronger.`,actionSteps:[`Compare your metrics for ${e.name} to industry benchmarks and best practices.`,"Identify one specific action you can take in the next month to improve your score.","Re-evaluate in 3 months to track your progress."],timeframe:"next-3-months",impactLevel:"medium"}]:[]}}class n{static analyzeFinancialHealth(e){this.validateUserData(e);const n=this.calculateKeyMetrics(e),i=this.calculateHealthIndicators(e,n),a=this.calculateOverallHealthScore(i),s={overallHealthScore:a,healthLevel:this.getHealthLevel(a),healthIndicators:i,keyMetrics:n,liquidityAnalysis:this.analyzeLiquidity(e,n),debtAnalysis:this.analyzeDebt(e,n),investmentAnalysis:this.analyzeInvestments(e,n),insuranceAnalysis:this.analyzeInsurance(e),wealthProjections:this.projectWealth(e,n),scenarioAnalysis:this.analyzeScenarios(e,n),prioritizedRecommendations:[],peerBenchmarks:this.calculatePeerBenchmarks(e),detailedInsights:this.generateDetailedInsights(e,n,i),financialRatios:this.calculateFinancialRatios(e,n),riskAssessment:this.assessFinancialRisk(e,n),goalAnalysis:this.analyzeFinancialGoals(e,n)};return s.prioritizedRecommendations=t.generateRecommendations(s,e),s}static calculateKeyMetrics(e){const t=this.getTotalMonthlyIncome(e.income),n=this.getTotalMonthlyExpenses(e.expenses),i=t-n,a=this.getTotalAssets(e.assets),s=this.getTotalLiabilities(e.liabilities),o=a-s,r=e.assets.checking+e.assets.savings+e.assets.moneyMarket+e.assets.emergencyFund,l=this.getTotalDebt(e.liabilities);return{monthlyCashFlow:i,emergencyFundMonths:n>0?r/n:0,debtToIncomeRatio:t>0?l/(12*t)*100:0,savingsRate:t>0?(i-e.behaviors.monthlyInvestmentContribution)/t*100:0,creditUtilization:e.liabilities.totalCreditLimit>0?e.liabilities.creditCardDebt/e.liabilities.totalCreditLimit*100:0,netWorth:o,liquidityRatio:s>0?r/s:r>0?100:0,assetAllocationScore:this.calculateAssetAllocationScore(e)}}static calculateHealthIndicators(e,t){return[this.analyzeSpendingVsIncome(e,t),this.analyzeBillPaymentReliability(e),this.analyzeEmergencySavings(e,t),this.analyzeDebtManagement(e,t),this.analyzeCreditHealth(e,t),this.analyzeInsuranceConfidence(e),this.analyzeLongTermGoalConfidence(e),this.analyzeFinancialPlanningEngagement(e)]}static analyzeSpendingVsIncome(e,t){const n=this.getTotalMonthlyIncome(e.income),i=n>0?t.monthlyCashFlow/n*100:0;let a=0,s="critical";return i>=20?(a=100,s="excellent"):i>=10?(a=80,s="good"):i>=5?(a=60,s="fair"):i>0?(a=40,s="poor"):(a=0,s="critical"),{name:"Spending vs Income",score:a,status:s,weight:15,metrics:[{title:"Monthly Cash Flow",value:this.formatCurrency(t.monthlyCashFlow),numericValue:t.monthlyCashFlow,description:"Amount left after all expenses",status:s,benchmark:"Target: 20% of income",improvement:i<20?"Consider reducing expenses or increasing income":void 0},{title:"Cash Flow Ratio",value:`${i.toFixed(1)}%`,numericValue:i,description:"Percentage of income available after expenses",status:s,benchmark:"Excellent: 20%+, Good: 10-19%"}],recommendations:this.getSpendingRecommendations(i),explanation:`This indicator measures if you spend less than you earn. Your cash flow ratio is ${i.toFixed(1)}%, resulting in a score of ${a}/100. A healthy ratio is typically above 10-20%.`}}static analyzeBillPaymentReliability(e){const t=e.behaviors.billPaymentReliability;let n=0,i="critical";switch(t){case"always-on-time":n=100,i="excellent";break;case"usually-on-time":n=75,i="good";break;case"sometimes-late":n=50,i="fair";break;case"often-late":n=25,i="poor";break;default:n=0,i="critical"}return{name:"Bill Payment Reliability",score:n,status:i,weight:15,metrics:[{title:"Payment History",value:this.formatReliabilityText(t),description:"Consistency of bill payments",status:i,benchmark:"Target: Always on time"},{title:"Credit Score Impact",value:e.liabilities.creditScore.toString(),numericValue:e.liabilities.creditScore,description:"Current credit score",status:this.getCreditScoreStatus(e.liabilities.creditScore),benchmark:"Excellent: 800+, Good: 740-799, Fair: 670-739"}],recommendations:this.getPaymentReliabilityRecommendations(t),explanation:`This indicator reflects your consistency in paying bills on time. Your self-reported reliability is '${this.formatReliabilityText(t)}', leading to a score of ${n}/100. On-time payments are crucial for a good credit score.`}}static getTotalMonthlyIncome(e){return e.primarySalary+e.secondaryIncome+e.businessIncome+e.investmentIncome+e.rentalIncome+e.benefitsIncome+e.otherIncome}static getTotalMonthlyExpenses(e){return e.housing+e.utilities+e.insurance+e.loanPayments+e.childcare+e.food+e.transportation+e.healthcare+e.clothing+e.personalCare+e.entertainment+e.diningOut+e.hobbies+e.subscriptions+e.shopping+e.travel+e.creditCardPayments+e.studentLoanPayments+e.otherDebtPayments}static getTotalAssets(e){return e.checking+e.savings+e.moneyMarket+e.emergencyFund+e.employer401k+e.traditionalIRA+e.rothIRA+e.brokerageAccounts+e.stocks+e.bonds+e.mutualFunds+e.primaryResidence+e.investmentProperties+e.cryptocurrency+e.preciousMetals+e.collectibles+e.businessEquity+e.otherAssets}static getTotalLiabilities(e){return e.mortgageBalance+e.homeEquityLoan+e.autoLoans+e.securedCreditLines+e.creditCardDebt+e.personalLoans+e.studentLoans+e.medicalDebt+e.businessLoans+e.businessCreditLines+e.taxDebt+e.legalJudgments+e.otherDebt}static getTotalDebt(e){return this.getTotalLiabilities(e)}static formatCurrency(e){return new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",minimumFractionDigits:0,maximumFractionDigits:0}).format(e)}static formatReliabilityText(e){return{"always-on-time":"Always On Time","usually-on-time":"Usually On Time","sometimes-late":"Sometimes Late","often-late":"Often Late"}[e]||e}static calculateOverallHealthScore(e){let t=0,n=0;for(const i of e)t+=i.score*i.weight,n+=i.weight;return n>0?Math.round(t/n):0}static getHealthLevel(e){return e>=80?"excellent":e>=65?"good":e>=50?"fair":e>=35?"limited":"critical"}static analyzeEmergencySavings(e,t){const n=t.emergencyFundMonths;let i=0,a="critical";return n>=6?(i=100,a="excellent"):n>=3?(i=80,a="good"):n>=1?(i=60,a="fair"):n>0?(i=30,a="poor"):(i=0,a="critical"),{name:"Emergency Savings",score:i,status:a,weight:20,metrics:[{title:"Emergency Fund Coverage",value:`${n.toFixed(1)} months`,numericValue:n,description:"How many months of expenses your liquid savings can cover",status:a,benchmark:"Target: 3-6 months"},{title:"Total Liquid Assets",value:this.formatCurrency(e.assets.checking+e.assets.savings+e.assets.moneyMarket+e.assets.emergencyFund),numericValue:e.assets.checking+e.assets.savings+e.assets.moneyMarket+e.assets.emergencyFund,description:"Cash and easily accessible funds",status:a}],recommendations:this.getEmergencyFundRecommendations(n),explanation:`This measures your financial cushion for unexpected events. You have ${n.toFixed(1)} months of expenses saved, giving you a score of ${i}/100. The standard recommendation is 3-6 months.`}}static analyzeDebtManagement(e,t){const n=t.debtToIncomeRatio;let i=0,a="critical";return n<=20?(i=100,a="excellent"):n<=36?(i=80,a="good"):n<=50?(i=60,a="fair"):n<=70?(i=40,a="poor"):(i=20,a="critical"),{name:"Debt Management",score:i,status:a,weight:15,metrics:[{title:"Debt-to-Income Ratio",value:`${n.toFixed(1)}%`,numericValue:n,description:"Percentage of your income that goes to debt payments",status:a,benchmark:"Target: Below 36%"},{title:"Total Debt",value:this.formatCurrency(this.getTotalDebt(e.liabilities)),numericValue:this.getTotalDebt(e.liabilities),description:"Total amount of outstanding debt",status:a}],recommendations:this.getDebtManagementRecommendations(n),explanation:`This indicator assesses how manageable your debt is. Your debt-to-income ratio is ${n.toFixed(1)}%, resulting in a score of ${i}/100. A lower ratio is generally better.`}}static analyzeCreditHealth(e,t){const n=e.liabilities.creditScore,i=t.creditUtilization;let a=0,s="critical";return n>=800&&i<=10?(a=100,s="excellent"):n>=740&&i<=30?(a=80,s="good"):n>=670?(a=60,s="fair"):n>=580?(a=40,s="poor"):(a=20,s="critical"),{name:"Credit Health",score:a,status:s,weight:10,metrics:[{title:"Credit Score",value:n.toString(),numericValue:n,description:"Your current credit score",status:this.getCreditScoreStatus(n),benchmark:"Excellent: 800+, Good: 740-799, Fair: 670-739"},{title:"Credit Utilization",value:`${i.toFixed(1)}%`,numericValue:i,description:"Percentage of available credit you are using",status:this.getCreditUtilizationStatus(t.creditUtilization),benchmark:"Target: Below 30%"}],recommendations:this.getCreditHealthRecommendations(e.liabilities.creditScore,t.creditUtilization),explanation:`This reflects your creditworthiness. With a credit score of ${e.liabilities.creditScore} and a utilization of ${t.creditUtilization.toFixed(1)}%, your score is ${a}/100. Both are key factors in your financial health.`}}static analyzeInsuranceConfidence(e){const t=e.insurance.healthInsurance,n=e.insurance.lifeInsurance,i=e.insurance.shortTermDisability||e.insurance.longTermDisability,a=e.insurance.insuranceConfidence;let s=0,o="critical";const r=(t?1:0)+(n?1:0)+(i?1:0);return 3===r&&"very-confident"===a?(s=100,o="excellent"):r>=2&&"not-confident"!==a?(s=80,o="good"):r>=1?(s=60,o="fair"):t?(s=40,o="poor"):(s=20,o="critical"),{name:"Insurance Confidence",score:s,status:o,weight:10,metrics:[{title:"Self-Reported Confidence",value:this.formatConfidenceText(a),description:"Your confidence in your insurance coverage",status:o}],recommendations:this.getInsuranceRecommendations(e.insurance),explanation:`This measures your confidence in being protected from financial shocks. Your reported confidence level gives you a score of ${s}/100.`}}static analyzeLongTermGoalConfidence(e){const t=e.goals.retirementConfidence,n=e.assets.employer401k+e.assets.traditionalIRA+e.assets.rothIRA>0,i=e.behaviors.monthlyInvestmentContribution;let a=0,s="critical";return"very-confident"===t&&n&&i>0?(a=100,s="excellent"):"somewhat-confident"===t&&n?(a=75,s="good"):n||i>0?(a=50,s="fair"):"not-confident"!==t?(a=25,s="poor"):(a=0,s="critical"),{name:"Long-term Goal Confidence",score:a,status:s,weight:10,metrics:[{title:"Retirement Confidence",value:this.formatConfidenceText(t),description:"Your confidence in your retirement savings plan",status:s,benchmark:"Target: Very confident with active saving"},{title:"Monthly Investment",value:this.formatCurrency(i),numericValue:i,description:"Monthly investment contribution",status:i>500?"excellent":i>0?"good":"poor",benchmark:"Target: 10-15% of income"}],recommendations:this.getRetirementRecommendations(e.goals,i),explanation:`This assesses your confidence in reaching long-term financial goals like retirement. Your reported confidence results in a score of ${a}/100.`}}static analyzeFinancialPlanningEngagement(e){const t=e.behaviors.budgetingMethod,n=e.behaviors.financialPlanningEngagement;let i=0;switch(t){case"detailed-budget":i=100;break;case"simple-tracking":i=75;break;case"mental-budget":i=40;break;case"no-budget":i=0}let a=0;switch(n){case"actively-plan":a=100;break;case"occasionally-plan":a=70;break;case"rarely-plan":a=30;break;case"never-plan":a=0}const s=Math.round(.5*i+.5*a);let o="critical";return s>=90?o="excellent":s>=70?o="good":s>=50?o="fair":s>=20&&(o="poor"),{name:"Financial Planning Engagement",score:s,status:o,weight:10,metrics:[{title:"Budgeting Method",value:this.formatBudgetText(t),description:"How you manage your budget",status:s>=70?"good":"poor"},{title:"Planning Engagement",value:this.formatPlanningText(n),description:"How actively you plan your finances",status:s>=70?"good":"poor"}],recommendations:this.getPlanningRecommendations(t,n),explanation:`This measures how actively you are planning and tracking your finances. Your approach gives you a score of ${s}/100.`}}static calculateAssetAllocationScore(e){const t=e.assets.employer401k+e.assets.traditionalIRA+e.assets.rothIRA+e.assets.brokerageAccounts+e.assets.stocks,n=this.getTotalAssets(e.assets);if(0===n)return 0;const i=t/n,a=(100-e.personalInfo.age)/100,s=Math.max(0,100-200*Math.abs(i-a));return Math.round(s)}static analyzeLiquidity(e,t){const n=e.assets.checking+e.assets.savings+e.assets.moneyMarket+e.assets.emergencyFund,i=this.getTotalMonthlyExpenses(e.expenses),a=i>0?n/i:0;return[{title:"Liquid Assets",value:this.formatCurrency(n),numericValue:n,description:"Cash and cash equivalents available immediately",status:n>=6*i?"excellent":n>=3*i?"good":"poor",benchmark:"Target: 6+ months of expenses"},{title:"Liquidity Ratio",value:`${a.toFixed(1)} months`,numericValue:a,description:"Months of expenses covered by liquid assets",status:a>=6?"excellent":a>=3?"good":"poor",benchmark:"Excellent: 6+ months, Good: 3-6 months"}]}static analyzeDebt(e,t){const n=this.getTotalDebt(e.liabilities),i=t.debtToIncomeRatio,a=t.creditUtilization;return[{title:"Total Debt",value:this.formatCurrency(n),numericValue:n,description:"All outstanding debt obligations",status:i<=20?"excellent":i<=36?"good":"poor",benchmark:"Target: <20% of annual income"},{title:"Debt-to-Income Ratio",value:`${i.toFixed(1)}%`,numericValue:i,description:"Total debt as percentage of annual income",status:i<=20?"excellent":i<=36?"good":"poor",benchmark:"Excellent: <20%, Good: 20-36%, Poor: >36%"},{title:"Credit Utilization",value:`${a.toFixed(1)}%`,numericValue:a,description:"Credit card balances vs available credit",status:a<=10?"excellent":a<=30?"good":"poor",benchmark:"Excellent: <10%, Good: 10-30%, Poor: >30%"}]}static analyzeInvestments(e,t){const n=e.assets.employer401k+e.assets.traditionalIRA+e.assets.rothIRA+e.assets.brokerageAccounts+e.assets.stocks+e.assets.bonds+e.assets.mutualFunds,i=this.getTotalMonthlyIncome(e.income),a=i>0?e.behaviors.monthlyInvestmentContribution/i*100:0,s=e.personalInfo.age,o=110-s;return[{title:"Total Investments",value:this.formatCurrency(n),numericValue:n,description:"All investment accounts and securities",status:a>=15?"excellent":a>=10?"good":"poor",benchmark:"Target: 15%+ of income invested monthly"},{title:"Investment Rate",value:`${a.toFixed(1)}%`,numericValue:a,description:"Monthly investment as percentage of income",status:a>=15?"excellent":a>=10?"good":"poor",benchmark:"Excellent: 15%+, Good: 10-15%, Poor: <10%"},{title:"Asset Allocation Score",value:`${t.assetAllocationScore}/100`,numericValue:t.assetAllocationScore,description:"How well diversified your investments are",status:t.assetAllocationScore>=80?"excellent":t.assetAllocationScore>=60?"good":"poor",benchmark:`Target stock allocation for age ${s}: ~${o}%`}]}static analyzeInsurance(e){const t=e.personalInfo.healthInsurance,n=e.personalInfo.lifeInsurance,i=e.personalInfo.shortTermDisability||e.personalInfo.longTermDisability,a=e.personalInfo.dependents,s=(t?40:0)+(n&&a>0||0===a?30:0)+(i?30:0);return[{title:"Insurance Coverage Score",value:`${s}/100`,numericValue:s,description:"Overall adequacy of insurance protection",status:s>=90?"excellent":s>=70?"good":"poor",benchmark:"Target: 90+ (Health + Life + Disability)"},{title:"Essential Coverage",value:t?"Health ✓":"Health ✗",description:"Health insurance status",status:t?"excellent":"critical",benchmark:"Required: Health insurance is essential"},{title:"Income Protection",value:i?"Disability ✓":"Disability ✗",description:"Disability insurance status",status:i?"good":"poor",benchmark:"Recommended: Protect 60-70% of income"}]}static projectWealth(e,t){const n=e.personalInfo.age,i=e.goals.retirementAge-n,a=e.behaviors.monthlyInvestmentContribution,s=e.assets.employer401k+e.assets.traditionalIRA+e.assets.rothIRA+e.assets.brokerageAccounts,o=[];return[{name:"Conservative (6%)",rate:.06},{name:"Moderate (8%)",rate:.08},{name:"Aggressive (10%)",rate:.1}].forEach((e=>{const t=e.rate/12,n=12*i,r=s*Math.pow(1+e.rate,i)+a*((Math.pow(1+t,n)-1)/t);o.push({scenario:e.name,timeframe:`${i} years`,projectedValue:r,monthlyContribution:a,assumptions:`${(100*e.rate).toFixed(0)}% annual return, ${a>0?"$"+a.toLocaleString():"$0"} monthly`})})),o}static analyzeScenarios(e,t){const n=this.getTotalMonthlyExpenses(e.expenses),i=e.assets.emergencyFund+e.assets.savings;return[{scenario:"Job Loss",impact:"High",description:"Complete loss of primary income",timeToRecover:i>0?`${(i/n).toFixed(1)} months`:"0 months",recommendations:["Build emergency fund to 6 months of expenses","Consider disability insurance","Diversify income sources"],probability:"Medium"},{scenario:"Market Downturn (-30%)",impact:"Medium",description:"30% decline in investment portfolio",timeToRecover:"2-3 years historically",recommendations:["Maintain diversified portfolio","Continue regular investing (dollar-cost averaging)","Avoid panic selling"],probability:"High (occurs every 5-10 years)"},{scenario:"Major Medical Emergency",impact:"High",description:"Unexpected medical expenses",timeToRecover:"Depends on insurance coverage",recommendations:["Ensure adequate health insurance","Build separate medical emergency fund","Consider HSA contributions"],probability:"Medium"}]}static generateDetailedInsights(e,t,n){const i=this.getTotalMonthlyIncome(e.income),a=this.getTotalMonthlyExpenses(e.expenses),s=t.netWorth;return{cashFlowAnalysis:{monthlyIncome:i,monthlyExpenses:a,surplus:t.monthlyCashFlow,surplusPercentage:i>0?t.monthlyCashFlow/i*100:0,insight:t.monthlyCashFlow>0?"Positive cash flow provides opportunities for wealth building":"Negative cash flow requires immediate attention to avoid debt accumulation"},netWorthAnalysis:{currentNetWorth:s,netWorthPerAge:e.personalInfo.age>0?s/e.personalInfo.age:0,projectedGrowth:this.calculateNetWorthGrowth(e,t),insight:s>0?"Positive net worth indicates good financial foundation":"Negative net worth requires debt reduction focus"},riskFactors:this.identifyRiskFactors(e,t),opportunities:this.identifyOpportunities(e,t,n)}}static calculateFinancialRatios(e,t){const n=this.getTotalMonthlyIncome(e.income),i=this.getTotalMonthlyExpenses(e.expenses),a=this.getTotalAssets(e.assets),s=this.getTotalLiabilities(e.liabilities);return{liquidityRatios:{currentRatio:s>0?(e.assets.checking+e.assets.savings)/s:0,quickRatio:s>0?e.assets.checking/s:0,emergencyFundRatio:t.emergencyFundMonths},leverageRatios:{debtToAssetRatio:a>0?s/a*100:0,debtToIncomeRatio:t.debtToIncomeRatio,equityRatio:a>0?(a-s)/a*100:0},efficiencyRatios:{savingsRate:t.savingsRate,expenseRatio:n>0?i/n*100:0,investmentRate:n>0?e.behaviors.monthlyInvestmentContribution/n*100:0}}}static assessFinancialRisk(e,t){const n=[];return 0===e.income.secondaryIncome&&0===e.income.businessIncome&&n.push({category:"Income Concentration",level:"High",description:"Dependent on single income source",mitigation:"Develop multiple income streams or enhance job security"}),t.emergencyFundMonths<3&&n.push({category:"Liquidity Risk",level:"High",description:"Insufficient emergency funds",mitigation:"Build emergency fund to 6 months of expenses"}),t.creditUtilization>30&&n.push({category:"Credit Risk",level:"Medium",description:"High credit utilization",mitigation:"Pay down credit card balances or increase credit limits"}),{overallRiskLevel:this.calculateOverallRisk(n),riskFactors:n,riskScore:this.calculateRiskScore(e,t)}}static analyzeFinancialGoals(e,t){const n=e.personalInfo.age,i=e.goals.retirementAge-n,a=e.behaviors.monthlyInvestmentContribution;return{retirementReadiness:{yearsToRetirement:i,currentSavings:e.assets.employer401k+e.assets.traditionalIRA+e.assets.rothIRA,monthlyContribution:a,projectedValue:this.calculateRetirementProjection(e,t),onTrack:this.isRetirementOnTrack(e,t)},emergencyGoal:{target:6*this.getTotalMonthlyExpenses(e.expenses),current:e.assets.emergencyFund+e.assets.savings,progress:t.emergencyFundMonths/6*100,timeToGoal:this.calculateTimeToEmergencyGoal(e,t)}}}static calculateNetWorthGrowth(e,t){return 12*t.monthlyCashFlow}static identifyRiskFactors(e,t){const n=[];return t.emergencyFundMonths<3&&n.push("Insufficient emergency fund"),t.debtToIncomeRatio>36&&n.push("High debt-to-income ratio"),t.creditUtilization>30&&n.push("High credit utilization"),e.behaviors.monthlyInvestmentContribution<.1*e.income.primarySalary&&n.push("Low retirement savings rate"),n}static identifyOpportunities(e,t,n){const i=[];return t.monthlyCashFlow>500&&i.push("Increase investment contributions"),t.creditUtilization<10&&i.push("Consider rewards credit cards"),e.assets.checking>2*e.expenses.housing&&i.push("Move excess cash to high-yield savings"),i}static calculateOverallRisk(e){const t=e.filter((e=>"High"===e.level)).length;return t>=2?"High":1===t?"Medium":"Low"}static calculateRiskScore(e,t){let n=100;return t.emergencyFundMonths<3&&(n-=20),t.debtToIncomeRatio>36&&(n-=15),t.creditUtilization>30&&(n-=10),0===e.behaviors.monthlyInvestmentContribution&&(n-=15),Math.max(0,n)}static calculateRetirementProjection(e,t){const n=e.personalInfo.age,i=e.goals.retirementAge-n,a=e.behaviors.monthlyInvestmentContribution;return(e.assets.employer401k+e.assets.traditionalIRA+e.assets.rothIRA)*Math.pow(1.07,i)+12*a*(Math.pow(1.07,i)-1)/.07}static isRetirementOnTrack(e,t){return this.calculateRetirementProjection(e,t)>=25*e.goals.retirementIncomeNeeded}static calculateTimeToEmergencyGoal(e,t){const n=6*this.getTotalMonthlyExpenses(e.expenses)-(e.assets.emergencyFund+e.assets.savings);return n<=0?"Goal achieved":t.monthlyCashFlow<=0?"Cannot achieve with current cash flow":`${Math.ceil(n/t.monthlyCashFlow)} months at current savings rate`}static calculatePeerBenchmarks(e){return{ageGroup:10*Math.floor(e.personalInfo.age/10)+"s",incomeGroup:"Middle Income",netWorthPercentile:50,savingsRatePercentile:45,debtRatioPercentile:55}}static getCreditScoreStatus(e){return e>=800?"excellent":e>=740?"good":e>=670?"fair":e>=580?"poor":"critical"}static getSpendingRecommendations(e){return e<5?["Immediate action needed: Create a strict budget to reduce expenses","Consider increasing income through side work or skills development","Review all subscriptions and discretionary spending"]:e<10?["Look for areas to cut unnecessary expenses","Consider ways to increase your income","Build an emergency fund as a priority"]:["Great job maintaining positive cash flow!"]}static getPaymentReliabilityRecommendations(e){return"often-late"===e||"sometimes-late"===e?["Set up automatic bill payments to improve payment history","Create a bill payment calendar with due dates","Consider consolidating due dates to simplify management"]:["Keep up the excellent payment history!"]}static getEmergencyFundRecommendations(e){return e<1?["Start building emergency fund immediately - even $500 helps","Set up automatic transfers to savings account","Cut discretionary spending to build emergency buffer"]:e<3?["Good start! Continue building to reach 3-month target","Consider increasing your monthly emergency fund contributions","Keep emergency funds in high-yield savings account"]:e<6?["Great progress! Work toward 6-month emergency fund","Your emergency fund provides good financial security"]:["Excellent emergency fund! You have strong financial security."]}static getDebtManagementRecommendations(e){return e>50?["Urgent: Debt ratio is too high - consider debt consolidation","Focus on paying off highest interest rate debts first","Consider credit counseling services","Avoid taking on any new debt"]:e>36?["Work on reducing debt load - focus on high-interest debt","Consider debt avalanche or snowball method","Avoid new debt until ratios improve"]:e>20?["Debt levels are manageable but could be improved","Continue making regular payments and avoid new debt"]:["Excellent debt management! Keep up the good work."]}static getCreditHealthRecommendations(e,t){const n=[];return e<670&&(n.push("Focus on improving credit score through on-time payments"),n.push("Consider becoming an authorized user on a family member's account")),t>30&&(n.push("Reduce credit card balances to improve utilization ratio"),n.push("Consider paying down cards or requesting credit limit increases")),0===n.length&&n.push("Great credit health! Maintain current habits."),n}static getInsuranceRecommendations(e){const t=[];return e.healthInsurance||t.push("Get health insurance immediately - essential protection"),e.lifeInsurance||t.push("Consider life insurance to protect dependents"),e.shortTermDisability||e.longTermDisability||t.push("Consider disability insurance to protect your income"),0===t.length&&t.push("Good insurance coverage! Review annually to ensure adequacy."),t}static getRetirementRecommendations(e,t){const n=[];return 0===t?(n.push("Start investing for retirement immediately, even small amounts help"),n.push("Take advantage of employer 401(k) match if available")):t<500&&(n.push("Consider increasing retirement contributions"),n.push("Target 10-15% of income for retirement savings")),"very-confident"!==e.retirementConfidence&&(n.push("Meet with financial advisor to create retirement plan"),n.push("Use retirement calculators to estimate needs")),0===n.length&&n.push("Excellent retirement planning! Stay on track."),n}static getPlanningRecommendations(e,t){const n=[];return"no-budget"===e?(n.push("Start with basic expense tracking using apps or spreadsheets"),n.push("Create a simple budget to understand spending patterns")):"mental-budget"===e&&n.push("Move to written budget for better accuracy"),"never-plan"!==t&&"rarely-plan"!==t||(n.push("Set aside time monthly for financial planning"),n.push("Start with simple goal-setting and progress tracking")),0===n.length&&n.push("Great financial planning habits! Keep it up."),n}static getCreditUtilizationStatus(e){return e<=10?"excellent":e<=30?"good":e<=50?"fair":e<=80?"poor":"critical"}static formatConfidenceText(e){return e.replace(/-/g," ").replace(/\b\w/g,(e=>e.toUpperCase()))}static formatBudgetText(e){return{"detailed-budget":"Detailed Budget","simple-tracking":"Simple Tracking","mental-budget":"Mental Budget","no-budget":"No Budget"}[e]||e}static formatPlanningText(e){return{"actively-plan":"Actively Plan","occasionally-plan":"Occasionally Plan","rarely-plan":"Rarely Plan","never-plan":"Never Plan"}[e]||e}static validateUserData(e){console.log("🔍 Data Validation - Verifying actual user inputs:",{primarySalary:e.income.primarySalary,housing:e.expenses.housing,totalAssets:this.getTotalAssets(e.assets),totalLiabilities:this.getTotalLiabilities(e.liabilities),creditScore:e.liabilities.creditScore});const t=this.getTotalMonthlyIncome(e.income),n=this.getTotalMonthlyExpenses(e.expenses),i=t-n;if(console.log("🔍 Calculated Metrics from User Data:",{totalMonthlyIncome:t,totalMonthlyExpenses:n,monthlyCashFlow:i,emergencyFundMonths:n>0?(e.assets.checking+e.assets.savings+e.assets.emergencyFund)/n:0}),e.income.primarySalary<=0)throw new Error("Invalid data: Primary salary cannot be zero or negative");if(e.liabilities.creditScore<300||e.liabilities.creditScore>850)throw new Error("Invalid data: Credit score must be between 300 and 850");console.log("✅ Data validation passed - using actual user inputs")}}class i{constructor(e,t){this.container=e,this.currentStepIndex=0,this.formData={},this.steps=[],this.onDataChange=t?.onDataChange,this.onComplete=t?.onComplete,this.initializeSteps(),this.initializeFormData(),this.render()}initializeSteps(){this.steps=[{id:"personal-info",title:"Personal Information",description:"Tell us about yourself to personalize your analysis",fields:[{id:"age",type:"number",label:"Age",description:"Your current age",required:!0,value:30,validation:{min:18,max:100}},{id:"maritalStatus",type:"select",label:"Marital Status",required:!0,value:"single",options:[{value:"single",label:"Single"},{value:"married",label:"Married"},{value:"divorced",label:"Divorced"},{value:"widowed",label:"Widowed"}]},{id:"dependents",type:"number",label:"Number of Dependents",description:"Children or others who depend on you financially",required:!0,value:0,validation:{min:0,max:10}},{id:"employmentStatus",type:"select",label:"Employment Status",required:!0,value:"employed",options:[{value:"employed",label:"Employed"},{value:"self-employed",label:"Self-Employed"},{value:"unemployed",label:"Unemployed"},{value:"retired",label:"Retired"},{value:"student",label:"Student"}]},{id:"employmentTenure",type:"number",label:"Years at Current Job",description:"How long have you been in your current position?",required:!0,value:3,validation:{min:0,max:50}}],isComplete:!1,validationErrors:[]},{id:"income",title:"Income Sources",description:"All sources of monthly income",fields:[{id:"primarySalary",type:"number",label:"Primary Salary (Monthly)",description:"Your main job salary after taxes",required:!0,value:5e3,validation:{min:0,step:100}},{id:"secondaryIncome",type:"number",label:"Secondary Income (Monthly)",description:"Part-time work, freelancing, side hustles",required:!1,value:0,validation:{min:0,step:50}},{id:"businessIncome",type:"number",label:"Business Income (Monthly)",description:"Net income from business ownership",required:!1,value:0,validation:{min:0,step:100}},{id:"investmentIncome",type:"number",label:"Investment Income (Monthly)",description:"Dividends, interest, capital gains",required:!1,value:0,validation:{min:0,step:25}},{id:"rentalIncome",type:"number",label:"Rental Income (Monthly)",description:"Net rental income from properties",required:!1,value:0,validation:{min:0,step:100}},{id:"benefitsIncome",type:"number",label:"Benefits Income (Monthly)",description:"Social Security, disability, unemployment",required:!1,value:0,validation:{min:0,step:50}}],isComplete:!1,validationErrors:[]},{id:"expenses",title:"Monthly Expenses",description:"Break down your monthly spending",fields:[{id:"housing",type:"number",label:"Housing (Rent/Mortgage)",description:"Monthly housing payment",required:!0,value:1500,validation:{min:0,step:50}},{id:"utilities",type:"number",label:"Utilities",description:"Electric, gas, water, internet, phone",required:!0,value:200,validation:{min:0,step:25}},{id:"food",type:"number",label:"Food & Groceries",description:"Monthly food spending",required:!0,value:400,validation:{min:0,step:25}},{id:"transportation",type:"number",label:"Transportation",description:"Car payment, gas, insurance, public transit",required:!0,value:300,validation:{min:0,step:25}},{id:"healthcare",type:"number",label:"Healthcare",description:"Insurance premiums, copays, medications",required:!0,value:150,validation:{min:0,step:25}},{id:"entertainment",type:"number",label:"Entertainment",description:"Movies, subscriptions, hobbies",required:!1,value:100,validation:{min:0,step:25}},{id:"diningOut",type:"number",label:"Dining Out",description:"Restaurants, takeout, coffee",required:!1,value:150,validation:{min:0,step:25}}],isComplete:!1,validationErrors:[]},{id:"assets",title:"Assets & Savings",description:"Your current assets and investments",fields:[{id:"checking",type:"number",label:"Checking Account",description:"Current balance in checking",required:!0,value:2e3,validation:{min:0,step:100}},{id:"savings",type:"number",label:"Savings Account",description:"Current savings balance",required:!0,value:5e3,validation:{min:0,step:100}},{id:"emergencyFund",type:"number",label:"Emergency Fund",description:"Funds specifically for emergencies",required:!0,value:3e3,validation:{min:0,step:100}},{id:"employer401k",type:"number",label:"401(k) Balance",description:"Current 401k balance",required:!1,value:25e3,validation:{min:0,step:1e3}},{id:"traditionalIRA",type:"number",label:"Traditional IRA",description:"Traditional IRA balance",required:!1,value:0,validation:{min:0,step:1e3}},{id:"rothIRA",type:"number",label:"Roth IRA",description:"Roth IRA balance",required:!1,value:0,validation:{min:0,step:1e3}},{id:"brokerageAccounts",type:"number",label:"Brokerage Accounts",description:"Taxable investment accounts",required:!1,value:0,validation:{min:0,step:1e3}}],isComplete:!1,validationErrors:[]},{id:"liabilities",title:"Debts & Liabilities",description:"Your current debts and obligations",fields:[{id:"creditCardDebt",type:"number",label:"Credit Card Debt",description:"Total credit card balances",required:!0,value:2e3,validation:{min:0,step:100}},{id:"studentLoans",type:"number",label:"Student Loans",description:"Total student loan debt",required:!1,value:15e3,validation:{min:0,step:1e3}},{id:"autoLoans",type:"number",label:"Auto Loans",description:"Car loan balances",required:!1,value:8e3,validation:{min:0,step:500}},{id:"mortgageBalance",type:"number",label:"Mortgage Balance",description:"Remaining mortgage debt",required:!1,value:0,validation:{min:0,step:1e3}},{id:"personalLoans",type:"number",label:"Personal Loans",description:"Other personal debt",required:!1,value:0,validation:{min:0,step:500}},{id:"creditScore",type:"number",label:"Credit Score",description:"Your current credit score",required:!0,value:720,validation:{min:300,max:850}},{id:"totalCreditLimit",type:"number",label:"Total Credit Limit",description:"Combined credit card limits",required:!0,value:1e4,validation:{min:0,step:500}}],isComplete:!1,validationErrors:[]},{id:"goals-behavior",title:"Goals & Behavior",description:"Your financial goals and habits",fields:[{id:"retirementAge",type:"number",label:"Target Retirement Age",description:"When do you want to retire?",required:!0,value:65,validation:{min:50,max:80}},{id:"retirementIncomeNeeded",type:"number",label:"Monthly Retirement Income Goal",description:"How much monthly income do you want in retirement?",required:!0,value:4e3,validation:{min:1e3,step:500}},{id:"emergencyFundTarget",type:"number",label:"Emergency Fund Target",description:"Your target emergency fund amount",required:!0,value:1e4,validation:{min:1e3,step:1e3}},{id:"monthlyInvestmentContribution",type:"number",label:"Monthly Investment Contribution",description:"How much do you invest monthly?",required:!0,value:300,validation:{min:0,step:50}},{id:"riskTolerance",type:"select",label:"Risk Tolerance",required:!0,value:"moderate",options:[{value:"conservative",label:"Conservative - Prefer stability"},{value:"moderate",label:"Moderate - Balanced approach"},{value:"aggressive",label:"Aggressive - Higher risk for growth"}]},{id:"billPaymentReliability",type:"select",label:"Bill Payment History",required:!0,value:"usually-on-time",options:[{value:"always-on-time",label:"Always pay on time"},{value:"usually-on-time",label:"Usually pay on time"},{value:"sometimes-late",label:"Sometimes pay late"},{value:"often-late",label:"Often pay late"}]},{id:"budgetingMethod",type:"select",label:"Budgeting Method",required:!0,value:"simple-tracking",options:[{value:"detailed-budget",label:"Detailed budget tracking"},{value:"simple-tracking",label:"Simple expense tracking"},{value:"mental-budget",label:"Mental budget only"},{value:"no-budget",label:"No budgeting"}]}],isComplete:!1,validationErrors:[]}]}initializeFormData(){this.formData={personalInfo:{age:30,maritalStatus:"single",dependents:0,state:"CA",employmentStatus:"employed",employmentTenure:3,healthStatus:"good",healthInsurance:!0,lifeInsurance:!1,shortTermDisability:!1,longTermDisability:!1},income:{primarySalary:5e3,secondaryIncome:0,businessIncome:0,investmentIncome:0,rentalIncome:0,benefitsIncome:0,otherIncome:0,incomeGrowthRate:3,incomeVariability:"stable",effectiveTaxRate:22},expenses:{housing:1500,utilities:200,insurance:150,loanPayments:400,childcare:0,food:400,transportation:300,healthcare:150,clothing:100,personalCare:50,entertainment:100,diningOut:150,hobbies:50,subscriptions:50,shopping:100,travel:200,creditCardPayments:100,studentLoanPayments:200,otherDebtPayments:100},assets:{checking:2e3,savings:5e3,moneyMarket:0,emergencyFund:3e3,employer401k:25e3,traditionalIRA:0,rothIRA:0,brokerageAccounts:0,stocks:0,bonds:0,mutualFunds:0,primaryResidence:0,investmentProperties:0,cryptocurrency:0,preciousMetals:0,collectibles:0,businessEquity:0,otherAssets:0},liabilities:{mortgageBalance:0,homeEquityLoan:0,autoLoans:8e3,securedCreditLines:0,creditCardDebt:2e3,personalLoans:0,studentLoans:15e3,medicalDebt:0,businessLoans:0,businessCreditLines:0,taxDebt:0,legalJudgments:0,otherDebt:0,creditScore:720,totalCreditLimit:1e4},insurance:{healthInsurance:!0,healthDeductible:2e3,healthOutOfPocketMax:6e3,lifeInsurance:!1,lifeCoverageAmount:0,shortTermDisability:!1,longTermDisability:!1,disabilityCoveragePercent:0,homeInsurance:!1,autoInsurance:!0,umbrellaPolicy:!1,insuranceConfidence:"somewhat-confident"},goals:{emergencyFundTarget:1e4,debtPayoffGoal:!0,majorPurchaseAmount:5e3,homeDownPayment:0,educationFunding:0,careerChangeBuffer:0,retirementAge:65,retirementIncomeNeeded:4e3,legacyGoalAmount:0,retirementConfidence:"somewhat-confident",longTermGoalConfidence:"somewhat-confident",riskTolerance:"moderate",investmentExperience:"intermediate"},behaviors:{billPaymentReliability:"usually-on-time",budgetingMethod:"simple-tracking",financialPlanningEngagement:"occasionally-plan",automaticSavings:!0,monthlyInvestmentContribution:300,emergencyFundPriority:"high",impulseSpendingFrequency:"sometimes",expenseTrackingMethod:"casual"}}}render(){this.container.innerHTML=`\n            <div class="multi-step-form">\n                <div class="form-progress">\n                    <div class="progress-bar">\n                        <div class="progress-fill" style="width: ${(this.currentStepIndex+1)/this.steps.length*100}%"></div>\n                    </div>\n                    <div class="progress-text">Step ${this.currentStepIndex+1} of ${this.steps.length}</div>\n                </div>\n                \n                <div class="form-step-content">\n                    ${this.renderCurrentStep()}\n                </div>\n                \n                <div class="form-navigation">\n                    <button class="btn-secondary" id="prevBtn" ${0===this.currentStepIndex?"disabled":""}>\n                        Previous\n                    </button>\n                    <button class="btn-primary" id="nextBtn">\n                        ${this.currentStepIndex===this.steps.length-1?"Complete Analysis":"Next"}\n                    </button>\n                </div>\n            </div>\n        `,this.attachEventListeners()}renderCurrentStep(){const e=this.steps[this.currentStepIndex];return`\n            <div class="step-header">\n                <h2>${e.title}</h2>\n                <p>${e.description}</p>\n            </div>\n            \n            <div class="step-fields">\n                ${e.fields.map((e=>this.renderField(e))).join("")}\n            </div>\n        `}renderField(e){const t=this.getFieldValue(e.id);switch(e.type){case"number":return`\n                    <div class="form-field">\n                        <label for="${e.id}">\n                            ${e.label}\n                            ${e.required?'<span class="required">*</span>':""}\n                        </label>\n                        ${e.description?`<p class="field-description">${e.description}</p>`:""}\n                        <input \n                            type="number" \n                            id="${e.id}" \n                            name="${e.id}"\n                            value="${t}"\n                            ${e.required?"required":""}\n                            ${void 0!==e.validation?.min?`min="${e.validation.min}"`:""}\n                            ${void 0!==e.validation?.max?`max="${e.validation.max}"`:""}\n                            ${void 0!==e.validation?.step?`step="${e.validation.step}"`:""}\n                        />\n                    </div>\n                `;case"select":return`\n                    <div class="form-field">\n                        <label for="${e.id}">\n                            ${e.label}\n                            ${e.required?'<span class="required">*</span>':""}\n                        </label>\n                        ${e.description?`<p class="field-description">${e.description}</p>`:""}\n                        <select id="${e.id}" name="${e.id}" ${e.required?"required":""}>\n                            ${e.options?.map((e=>`<option value="${e.value}" ${t===e.value?"selected":""}>${e.label}</option>`)).join("")}\n                        </select>\n                    </div>\n                `;default:return""}}getFieldValue(e){const t=this.steps[this.currentStepIndex].fields.find((t=>t.id===e));return t?.value||""}attachEventListeners(){const e=this.container.querySelector("#prevBtn"),t=this.container.querySelector("#nextBtn");e?.addEventListener("click",(()=>this.previousStep())),t?.addEventListener("click",(()=>this.nextStep())),this.container.querySelectorAll("input, select").forEach((e=>{e.addEventListener("change",(e=>this.handleFieldChange(e)))}))}handleFieldChange(e){const t=e.target,n=t.id,i="number"===t.type?parseFloat(t.value):t.value,a=this.steps[this.currentStepIndex].fields.find((e=>e.id===n));a&&(a.value=i),this.updateFormData(n,i),this.onDataChange?.(this.formData)}updateFormData(e,t){switch(this.steps[this.currentStepIndex].id){case"personal-info":this.formData.personalInfo||(this.formData.personalInfo={}),this.formData.personalInfo[e]=t;break;case"income":this.formData.income||(this.formData.income={}),this.formData.income[e]=t;break;case"expenses":this.formData.expenses||(this.formData.expenses={}),this.formData.expenses[e]=t;break;case"assets":this.formData.assets||(this.formData.assets={}),this.formData.assets[e]=t;break;case"liabilities":this.formData.liabilities||(this.formData.liabilities={}),this.formData.liabilities[e]=t;break;case"goals-behavior":"retirementAge"===e||"retirementIncomeNeeded"===e||"emergencyFundTarget"===e||"riskTolerance"===e?(this.formData.goals||(this.formData.goals={}),this.formData.goals[e]=t):"monthlyInvestmentContribution"!==e&&"billPaymentReliability"!==e&&"budgetingMethod"!==e||(this.formData.behaviors||(this.formData.behaviors={}),this.formData.behaviors[e]=t)}}validateCurrentStep(){const e=this.steps[this.currentStepIndex],t=[];for(const n of e.fields)if(n.required&&(void 0===n.value||null===n.value||""===n.value&&"number"!==n.type||"number"===n.type&&isNaN(Number(n.value)))&&t.push(`${n.label} is required`),"number"===n.type&&n.validation&&void 0!==n.value&&null!==n.value&&""!==n.value){const e=parseFloat(n.value);isNaN(e)||(void 0!==n.validation.min&&e<n.validation.min&&t.push(`${n.label} must be at least ${n.validation.min}`),void 0!==n.validation.max&&e>n.validation.max&&t.push(`${n.label} must be at most ${n.validation.max}`))}return e.validationErrors=t,e.isComplete=0===t.length,0===t.length}previousStep(){this.currentStepIndex>0&&(this.currentStepIndex--,this.render())}nextStep(){this.validateCurrentStep()?this.currentStepIndex===this.steps.length-1?this.completeForm():(this.currentStepIndex++,this.render()):this.showValidationErrors()}showValidationErrors(){const e=this.steps[this.currentStepIndex];e.validationErrors.length>0&&alert("Please fix the following errors:\n"+e.validationErrors.join("\n"))}completeForm(){this.isFormComplete()&&this.onComplete?.(this.formData)}isFormComplete(){return this.steps.every((e=>e.isComplete))}getCurrentData(){return this.formData}}class a{constructor(e,t){const n=document.getElementById(e);if(!n)throw new Error(`Element with ID ${e} not found`);this.container=n,this.onSubmit=t}render(){this.container.innerHTML=this.generateHTML(),this.attachEventListeners()}generateHTML(){return'\n            <div class="quick-analysis-form">\n                <div class="form-header">\n                    <h2>Quick Financial Health Check</h2>\n                    <p class="form-description">\n                        Get a comprehensive financial analysis with just 6 essential inputs. \n                        Takes less than 2 minutes to complete.\n                    </p>\n                    <div class="progress-indicator">\n                        <div class="progress-bar">\n                            <div class="progress-fill" id="formProgress"></div>\n                        </div>\n                        <p class="progress-text">Complete all fields to analyze</p>\n                    </div>\n                </div>\n\n                <form id="quickAnalysisForm" class="quick-form">\n                    <div class="form-grid">\n                        <div class="form-field" data-field="income">\n                            <label for="monthlyIncome" class="field-label">\n                                <span class="label-text">Monthly Take-Home Income</span>\n                                <span class="required">*</span>\n                                <span class="help-icon" data-tooltip="Your salary after taxes and deductions">?</span>\n                            </label>\n                            <div class="input-wrapper">\n                                <span class="currency-symbol">$</span>\n                                <input type="text"\n                                       inputmode="decimal" \n                                       id="monthlyIncome" \n                                       name="monthlyIncome" \n                                       placeholder="5,000"\n                                       min="0" \n                                       required \n                                       class="field-input currency-input"\n                                       data-format="currency">\n                                <div class="input-feedback"></div>\n                            </div>\n                            <p class="field-help">Your monthly income after taxes and deductions</p>\n                        </div>\n\n                        <div class="form-field" data-field="housing">\n                            <label for="monthlyHousing" class="field-label">\n                                <span class="label-text">Monthly Housing Cost</span>\n                                <span class="required">*</span>\n                                <span class="help-icon" data-tooltip="Rent or mortgage payment">?</span>\n                            </label>\n                            <div class="input-wrapper">\n                                <span class="currency-symbol">$</span>\n                                <input type="text"\n                                       inputmode="decimal"\n                                       id="monthlyHousing" \n                                       name="monthlyHousing" \n                                       placeholder="1,500"\n                                       min="0" \n                                       required \n                                       class="field-input currency-input"\n                                       data-format="currency">\n                                <div class="input-feedback"></div>\n                            </div>\n                            <p class="field-help">Rent or mortgage payment (excluding utilities)</p>\n                        </div>\n\n                        <div class="form-field" data-field="expenses">\n                            <label for="monthlyExpenses" class="field-label">\n                                <span class="label-text">Other Monthly Expenses</span>\n                                <span class="required">*</span>\n                                <span class="help-icon" data-tooltip="Food, transportation, utilities, entertainment, etc.">?</span>\n                            </label>\n                            <div class="input-wrapper">\n                                <span class="currency-symbol">$</span>\n                                <input type="text"\n                                       inputmode="decimal"\n                                       id="monthlyExpenses" \n                                       name="monthlyExpenses" \n                                       placeholder="2,000"\n                                       min="0" \n                                       required \n                                       class="field-input currency-input"\n                                       data-format="currency">\n                                <div class="input-feedback"></div>\n                            </div>\n                            <p class="field-help">Food, transportation, utilities, entertainment, etc.</p>\n                            <div class="expense-breakdown">\n                                <small>Typical breakdown: Food (30%), Transportation (25%), Utilities (15%), Other (30%)</small>\n                            </div>\n                        </div>\n\n                        <div class="form-field" data-field="savings">\n                            <label for="totalSavings" class="field-label">\n                                <span class="label-text">Total Savings & Emergency Fund</span>\n                                <span class="required">*</span>\n                                <span class="help-icon" data-tooltip="All liquid savings including emergency fund">?</span>\n                            </label>\n                            <div class="input-wrapper">\n                                <span class="currency-symbol">$</span>\n                                <input type="text"\n                                       inputmode="decimal"\n                                       id="totalSavings" \n                                       name="totalSavings" \n                                       placeholder="15,000"\n                                       min="0" \n                                       required \n                                       class="field-input currency-input"\n                                       data-format="currency">\n                                <div class="input-feedback"></div>\n                            </div>\n                            <p class="field-help">Checking, savings, emergency fund (liquid assets)</p>\n                            <div class="savings-indicator">\n                                <small>Emergency fund goal: <span id="emergencyGoal">--</span> months of expenses</small>\n                            </div>\n                        </div>\n\n                        <div class="form-field" data-field="debt">\n                            <label for="totalDebt" class="field-label">\n                                <span class="label-text">Total Debt</span>\n                                <span class="required">*</span>\n                                <span class="help-icon" data-tooltip="Credit cards, student loans, car loans (excluding mortgage)">?</span>\n                            </label>\n                            <div class="input-wrapper">\n                                <span class="currency-symbol">$</span>\n                                <input type="text"\n                                       inputmode="decimal"\n                                       id="totalDebt" \n                                       name="totalDebt" \n                                       placeholder="25,000"\n                                       min="0" \n                                       required \n                                       class="field-input currency-input"\n                                       data-format="currency">\n                                <div class="input-feedback"></div>\n                            </div>\n                            <p class="field-help">Credit cards, student loans, car loans (excluding mortgage)</p>\n                            <div class="debt-ratio-indicator">\n                                <small>Debt-to-income ratio: <span id="debtRatio">--</span></small>\n                            </div>\n                        </div>\n\n                        <div class="form-field" data-field="credit">\n                            <label for="creditScore" class="field-label">\n                                <span class="label-text">Credit Score</span>\n                                <span class="required">*</span>\n                                <span class="help-icon" data-tooltip="Your current credit score (300-850)">?</span>\n                            </label>\n                            <div class="input-wrapper">\n                                <input type="number" \n                                       id="creditScore" \n                                       name="creditScore" \n                                       placeholder="720"\n                                       min="300" \n                                       max="850" \n                                       required \n                                       class="field-input">\n                                <div class="input-feedback"></div>\n                            </div>\n                            <p class="field-help">Your current credit score (300-850)</p>\n                            <div class="credit-range">\n                                <div class="range-indicator">\n                                    <span class="range poor">300-579</span>\n                                    <span class="range fair">580-669</span>\n                                    <span class="range good">670-739</span>\n                                    <span class="range excellent">740-850</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="form-actions">\n                        <button type="submit" class="btn btn-primary btn-large" id="analyzeButton" disabled>\n                            <span class="btn-icon">📊</span>\n                            <span class="btn-text">Analyze My Financial Health</span>\n                            <div class="btn-loader" style="display: none;">\n                                <div class="spinner"></div>\n                            </div>\n                        </button>\n                        <p class="analysis-note">\n                            Get instant insights into your financial health with personalized recommendations\n                        </p>\n                    </div>\n\n                    <div class="validation-errors" id="validationErrors" style="display: none;">\n                        \x3c!-- Error messages will be inserted here --\x3e\n                    </div>\n                </form>\n\n                <div class="form-benefits">\n                    <h3>What You\'ll Get:</h3>\n                    <ul class="benefits-list">\n                        <li>\n                            <span class="benefit-icon">📈</span>\n                            <span>Overall Financial Health Score based on your actual data</span>\n                        </li>\n                        <li>\n                            <span class="benefit-icon">💡</span>\n                            <span>8 Key Health Indicators with clear explanations</span>\n                        </li>\n                        <li>\n                            <span class="benefit-icon">🎯</span>\n                            <span>Prioritized action recommendations</span>\n                        </li>\n                        <li>\n                            <span class="benefit-icon">📊</span>\n                            <span>Comparison to people in your age and income group</span>\n                        </li>\n                        <li>\n                            <span class="benefit-icon">🔮</span>\n                            <span>Projections for your financial future</span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        '}attachEventListeners(){const e=this.container.querySelector("#quickAnalysisForm");e&&(e.addEventListener("submit",(e=>{e.preventDefault(),this.handleSubmit()})),e.querySelectorAll("input[required]").forEach((e=>{e.addEventListener("input",(e=>{this.handleInputChange(e.target)})),e.addEventListener("blur",(e=>{const t=e.target;"currency"===t.dataset.format&&this.formatCurrencyInput(t),this.validateField(t)}))})),this.attachTooltips())}handleInputChange(e){this.updateRealTimeCalculations(),this.updateProgress(),this.updateSubmitButton()}formatCurrencyInput(e){const t=e.value.replace(/[^0-9.]/g,""),n=parseFloat(t)||0;e.value=n>0?n.toLocaleString("en-US",{maximumFractionDigits:0}):""}updateRealTimeCalculations(){const e=this.getNumericValue("monthlyIncome"),t=this.getNumericValue("monthlyHousing"),n=this.getNumericValue("monthlyExpenses"),i=this.getNumericValue("totalSavings"),a=this.getNumericValue("totalDebt"),s=t+n;if(s>0&&i>0){const e=(i/s).toFixed(1),t=document.getElementById("emergencyGoal");t&&(t.textContent=e,t.className=parseFloat(e)>=3?"good":"needs-improvement")}if(e>0&&a>0){const t=(a/(12*e)*100).toFixed(1),n=document.getElementById("debtRatio");n&&(n.textContent=`${t}%`,n.className=parseFloat(t)<=36?"good":"needs-improvement")}}getNumericValue(e){const t=document.getElementById(e);return t&&parseFloat(t.value.replace(/[^0-9.-]/g,""))||0}updateProgress(){const e=this.container.querySelector("#quickAnalysisForm").querySelectorAll("input[required]");let t=0;e.forEach((e=>{""!==e.value.trim()&&t++}));const n=t/e.length*100,i=document.getElementById("formProgress"),a=this.container.querySelector(".progress-text");i&&(i.style.width=`${n}%`),a&&(a.textContent=100===n?"Ready to analyze!":`${t}/${e.length} fields completed`)}updateSubmitButton(){const e=this.container.querySelector("#quickAnalysisForm"),t=document.getElementById("analyzeButton"),n=e.querySelectorAll("input[required]");let i=!0;n.forEach((e=>{const t=e;t.value.trim()&&t.checkValidity()||(i=!1)})),t.disabled=!i,t.classList.toggle("ready",i)}validateField(e){const t=e.closest(".form-field"),n=t?.querySelector(".input-feedback");if(!n)return;let i=!0,a="";const s=this.getNumericValue(e.name),o=e.name;e.required&&!e.value.trim()?(i=!1,a="This field is required"):s<0?(i=!1,a="Value cannot be negative"):"creditScore"===o&&(s<300||s>850)&&(i=!1,a="Credit score must be between 300 and 850"),t?.classList.toggle("field-valid",i),t?.classList.toggle("field-error",!i),n&&(n.textContent=a,n.style.display=a?"block":"none")}attachTooltips(){this.container.querySelectorAll(".help-icon").forEach((e=>{e.addEventListener("mouseenter",(e=>{const t=e.target.dataset.tooltip;t&&this.showTooltip(e.target,t)})),e.addEventListener("mouseleave",(()=>{this.hideTooltip()}))}))}showTooltip(e,t){this.hideTooltip();const n=document.createElement("div");n.className="tooltip",n.textContent=t,document.body.appendChild(n);const i=e.getBoundingClientRect(),a=i.top+window.scrollY-10,s=i.left+i.width/2;n.style.left=`${s}px`,n.style.top=`${a}px`,n.style.transform="translate(-50%, -100%)"}hideTooltip(){const e=document.querySelector(".tooltip");e&&e.remove()}handleSubmit(){const e=this.container.querySelector("#quickAnalysisForm"),t=new FormData(e),n=document.getElementById("analyzeButton"),i=n.querySelector(".btn-text"),a=n.querySelector(".btn-loader");i&&a&&(i.style.display="none",a.style.display="block"),n.disabled=!0;const s=e.querySelectorAll("input[required]"),o=[];if(s.forEach((e=>{this.validateField(e);const t=e.closest(".form-field");if(t?.classList.contains("field-error")){const e=t.querySelector(".input-feedback");if(e&&e.textContent){const n=t.querySelector(".label-text")?.textContent||"Field";o.push(`<strong>${n}:</strong> ${e.textContent}`)}}})),o.length>0)return this.showValidationErrors(o),void this.resetSubmitButton();const r=this.container.querySelector("#validationErrors");r&&(r.style.display="none");const l=this.buildUserDataFromForm(t);console.log("🔍 Quick Analysis - Using actual user data:",{monthlyIncome:l.income.primarySalary,monthlyHousing:l.expenses.housing,monthlyExpenses:l.expenses.food+l.expenses.transportation+l.expenses.utilities,totalSavings:l.assets.checking+l.assets.savings+l.assets.emergencyFund,totalDebt:l.liabilities.creditCardDebt+l.liabilities.autoLoans+l.liabilities.studentLoans,creditScore:l.liabilities.creditScore}),this.onSubmit(l)}resetSubmitButton(){const e=document.getElementById("analyzeButton"),t=e.querySelector(".btn-text"),n=e.querySelector(".btn-loader");t&&n&&(t.style.display="block",n.style.display="none"),e.disabled=!1}buildUserDataFromForm(e){const t=parseFloat(e.get("monthlyIncome").replace(/[,$]/g,""))||0,n=parseFloat(e.get("monthlyHousing").replace(/[,$]/g,""))||0,i=parseFloat(e.get("monthlyExpenses").replace(/[,$]/g,""))||0,a=parseFloat(e.get("totalSavings").replace(/[,$]/g,""))||0,s=parseFloat(e.get("totalDebt").replace(/[,$]/g,""))||0,o=parseFloat(e.get("creditScore"))||300;if(0===t)throw new Error("Monthly income is required and cannot be zero");return{personalInfo:{age:35,maritalStatus:"single",dependents:0,state:"CA",employmentStatus:"employed",employmentTenure:3,healthStatus:"good",healthInsurance:!0,lifeInsurance:!1,shortTermDisability:!1,longTermDisability:!1},income:{primarySalary:t,secondaryIncome:0,businessIncome:0,investmentIncome:0,rentalIncome:0,benefitsIncome:0,otherIncome:0,incomeGrowthRate:.03,incomeVariability:"stable",effectiveTaxRate:.22},expenses:{housing:n,utilities:Math.round(.15*i),insurance:Math.round(.1*i),loanPayments:Math.round(.02*s),childcare:0,food:Math.round(.3*i),transportation:Math.round(.25*i),healthcare:Math.round(.08*i),clothing:Math.round(.05*i),personalCare:Math.round(.03*i),entertainment:Math.round(.1*i),diningOut:Math.round(.08*i),hobbies:Math.round(.04*i),subscriptions:Math.round(.02*i),shopping:Math.round(.06*i),travel:Math.round(.08*i),creditCardPayments:Math.round(.015*s),studentLoanPayments:Math.round(.005*s),otherDebtPayments:0},assets:{checking:Math.round(.2*a),savings:Math.round(.5*a),moneyMarket:0,emergencyFund:Math.round(.3*a),employer401k:Math.round(12*t*2),traditionalIRA:0,rothIRA:0,brokerageAccounts:Math.round(.1*a),stocks:0,bonds:0,mutualFunds:0,primaryResidence:200*n,investmentProperties:0,cryptocurrency:0,preciousMetals:0,collectibles:0,businessEquity:0,otherAssets:0},liabilities:{mortgageBalance:n>1e3?150*n:0,homeEquityLoan:0,autoLoans:Math.round(.3*s),securedCreditLines:0,creditCardDebt:Math.round(.4*s),personalLoans:Math.round(.1*s),studentLoans:Math.round(.2*s),medicalDebt:0,businessLoans:0,businessCreditLines:0,taxDebt:0,legalJudgments:0,otherDebt:0,creditScore:o,totalCreditLimit:Math.round(2.5*s)},insurance:{healthInsurance:!0,healthDeductible:2e3,healthOutOfPocketMax:8e3,lifeInsurance:!1,lifeCoverageAmount:0,shortTermDisability:!1,longTermDisability:!1,disabilityCoveragePercent:0,homeInsurance:!0,autoInsurance:!0,umbrellaPolicy:!1,insuranceConfidence:"somewhat-confident"},goals:{emergencyFundTarget:6*(n+i),debtPayoffGoal:s>0,majorPurchaseAmount:0,homeDownPayment:0,educationFunding:0,careerChangeBuffer:0,retirementAge:65,retirementIncomeNeeded:.8*t,legacyGoalAmount:0,retirementConfidence:"somewhat-confident",longTermGoalConfidence:"somewhat-confident",riskTolerance:"moderate",investmentExperience:"intermediate"},behaviors:{billPaymentReliability:o>750?"always-on-time":o>650?"usually-on-time":"sometimes-late",budgetingMethod:"simple-tracking",financialPlanningEngagement:"occasionally-plan",automaticSavings:a>t,monthlyInvestmentContribution:Math.round(.1*t),emergencyFundPriority:a<3*(n+i)?"high":"medium",impulseSpendingFrequency:"sometimes",expenseTrackingMethod:"casual"}}}showValidationErrors(e){const t=this.container.querySelector("#validationErrors");t&&(t.innerHTML=`\n                <div class="error-messages">\n                    <h4>Please fix the following errors:</h4>\n                    <ul>\n                        ${e.map((e=>`<li>${e}</li>`)).join("")}\n                    </ul>\n                </div>\n            `,t.style.display="block",t.scrollIntoView({behavior:"smooth",block:"center"}))}}const s={excellent:"#10b981",good:"#3b82f6",fair:"#f59e0b",poor:"#ef4444",critical:"#dc2626"};class o{constructor(e){const t=document.getElementById(e);if(!t)throw new Error(`Element with ID ${e} not found`);this.container=t}render(e){this.container.innerHTML=this.generateHTML(e),this.attachInteractiveElements()}generateHTML(e){return`\n            <div class="enhanced-results">\n                ${this.generateOverallScoreSection(e)}\n                ${this.generateKeyInsightsSection(e)}\n                ${this.generateHealthIndicatorsSection(e)}\n                ${this.generateActionPlanSection(e)}\n            </div>\n        `}generateOverallScoreSection(e){const{overallHealthScore:t,healthLevel:n}=e,i=s[n]||s.fair;return`\n            <div class="overall-score-section">\n                <div class="score-container">\n                    <div class="score-circle" style="border-color: ${i}">\n                        <div class="score-value">${t}</div>\n                        <div class="score-label">Financial Health Score</div>\n                    </div>\n                    <div class="score-details">\n                        <h1 class="health-level" style="color: ${i}">\n                            ${this.getHealthLevelText(n)}\n                        </h1>\n                        <p class="score-explanation">\n                            ${this.getScoreExplanation(t,n)}\n                        </p>\n                    </div>\n                </div>\n            </div>\n        `}generateKeyInsightsSection(e){return`\n            <div class="key-insights-section">\n                <h2>🎯 Key Insights About Your Finances</h2>\n                <div class="insights-grid">\n                    ${this.generateKeyInsights(e).map((e=>`\n                        <div class="insight-card ${e.type}">\n                            <div class="insight-icon">${e.icon}</div>\n                            <div class="insight-content">\n                                <h3>${e.title}</h3>\n                                <p>${e.description}</p>\n                                <div class="insight-metric">\n                                    <span class="metric-value">${e.value}</span>\n                                    <span class="metric-label">${e.label}</span>\n                                </div>\n                            </div>\n                        </div>\n                    `)).join("")}\n                </div>\n            </div>\n        `}generateHealthIndicatorsSection(e){const{healthIndicators:t}=e;return`\n            <div class="health-indicators-section">\n                <h2>📊 Your Financial Health Breakdown</h2>\n                <p class="section-description">\n                    Based on 8 key indicators from financial health research. Click on any indicator to learn more.\n                </p>\n                <div class="indicators-grid">\n                    ${t.map(((e,t)=>`\n                        <div class="indicator-card expandable" data-indicator="${t}">\n                            <div class="indicator-header">\n                                <div class="indicator-title">\n                                    <h3>${e.name}</h3>\n                                    <span class="status-badge status-${e.status}">${this.formatStatus(e.status)}</span>\n                                </div>\n                                <div class="indicator-score">\n                                    <span class="score">${Math.round(e.score)}</span>\n                                    <span class="max">/100</span>\n                                </div>\n                            </div>\n                            \n                            <div class="indicator-progress">\n                                <div class="progress-bar">\n                                    <div class="progress-fill" \n                                         style="width: ${e.score}%; background-color: ${s[e.status]||s.fair}">\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div class="indicator-explanation">\n                                <p>${e.explanation}</p>\n                            </div>\n                        </div>\n                    `)).join("")}\n                </div>\n            </div>\n        `}generateActionPlanSection(e){const{prioritizedRecommendations:t}=e;return`\n            <div class="action-plan-section">\n                <h2>🚀 Your Personalized Action Plan</h2>\n                <p class="section-description">\n                    Based on your specific financial situation, here are the most impactful steps you can take:\n                </p>\n                \n                <div class="priority-actions">\n                    <h3>🔥 High Priority Actions (Start Here)</h3>\n                    <div class="actions-list">\n                        ${t.filter((e=>"high"===e.priority)).slice(0,3).map(((e,t)=>`\n                            <div class="action-item priority-high">\n                                <div class="action-number">${t+1}</div>\n                                <div class="action-content">\n                                    <h4>${e.title}</h4>\n                                    <p>${e.description}</p>\n                                    <div class="action-details">\n                                        <div class="action-steps">\n                                            <strong>Action Steps:</strong>\n                                            <ul>\n                                                ${e.actionSteps.map((e=>`<li>${e}</li>`)).join("")}\n                                            </ul>\n                                        </div>\n                                        <div class="action-meta">\n                                            <span class="timeframe">⏱️ ${this.formatTimeframe(e.timeframe)}</span>\n                                            <span class="impact">📈 ${this.formatImpact(e.impactLevel)} Impact</span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        `)).join("")}\n                    </div>\n                </div>\n            </div>\n        `}generateKeyInsights(e){const{keyMetrics:t}=e;return[{type:"cash-flow",icon:"💰",title:"Monthly Cash Flow",description:t.monthlyCashFlow>=0?"You have positive cash flow":"You're spending more than you earn",value:this.formatCurrency(t.monthlyCashFlow),label:"per month"},{type:"emergency-fund",icon:"🛡️",title:"Emergency Preparedness",description:t.emergencyFundMonths>=3?"Good emergency coverage":"Build your emergency fund",value:t.emergencyFundMonths.toFixed(1),label:"months covered"},{type:"debt-ratio",icon:"📉",title:"Debt Management",description:t.debtToIncomeRatio<=.36?"Healthy debt levels":"Consider debt reduction",value:`${(100*t.debtToIncomeRatio).toFixed(1)}%`,label:"of income"},{type:"savings-rate",icon:"📈",title:"Savings Rate",description:t.savingsRate>=.15?"Excellent saving habits":"Increase your savings",value:`${(100*t.savingsRate).toFixed(1)}%`,label:"of income"}]}attachInteractiveElements(){}getHealthLevelText(e){return{excellent:"Excellent Financial Health",good:"Good Financial Health",fair:"Fair Financial Health",limited:"Limited Financial Health",critical:"Critical Financial Health"}[e]||"Unknown Health Level"}getScoreExplanation(e,t){return e>=80?"Outstanding! You have excellent financial habits and are well-positioned for the future.":e>=65?"Good work! You have solid financial fundamentals with room for some improvements.":e>=50?"You're on the right track, but there are several areas where focused improvements could make a big difference.":e>=35?"Your financial health needs attention. The good news is that targeted actions can lead to significant improvements.":"Your financial situation requires immediate attention. Focus on the high-priority recommendations to get back on track."}formatStatus(e){return{excellent:"Excellent",good:"Good",fair:"Fair",poor:"Poor",critical:"Critical"}[e]||e}formatTimeframe(e){return{immediate:"This Week","short-term":"1-3 Months","medium-term":"3-12 Months","long-term":"1+ Years"}[e]||e}formatImpact(e){return{high:"High",medium:"Medium",low:"Low"}[e]||e}formatCurrency(e){return new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",minimumFractionDigits:0,maximumFractionDigits:0}).format(e)}}class r{constructor(){this.currentAnalysisType=null,this.initializeDOMElements(),this.attachEventListeners(),this.showAnalysisChoice()}initializeDOMElements(){if(this.analysisChoiceContainer=document.getElementById("analysisChoiceContainer")||void 0,this.formContainer=document.getElementById("formContainer")||void 0,this.resultsContainer=document.getElementById("resultsContainer")||void 0,!this.analysisChoiceContainer||!this.formContainer||!this.resultsContainer)throw new Error("Required DOM elements not found")}attachEventListeners(){const e=document.getElementById("chooseQuickAnalysis"),t=document.getElementById("chooseComprehensiveAnalysis");e&&e.addEventListener("click",(()=>{this.startQuickAnalysis()})),t&&t.addEventListener("click",(()=>{this.startComprehensiveAnalysis()}))}showAnalysisChoice(){this.analysisChoiceContainer&&this.formContainer&&this.resultsContainer&&(this.analysisChoiceContainer.style.display="block",this.formContainer.style.display="none",this.resultsContainer.style.display="none")}startQuickAnalysis(){this.currentAnalysisType="quick",this.showFormContainer(),this.formContainer&&(this.formContainer.innerHTML='<div id="quickFormContainer"></div>',this.quickForm=new a("quickFormContainer",(e=>{this.handleFormSubmission(e)})),this.quickForm.render())}startComprehensiveAnalysis(){if(this.currentAnalysisType="comprehensive",this.showFormContainer(),this.formContainer){this.formContainer.innerHTML='<div id="multiStepFormContainer"></div>';const e=document.getElementById("multiStepFormContainer");e&&(this.multiStepForm=new i(e,{onComplete:e=>{this.handleFormSubmission(e)}}))}}showFormContainer(){this.analysisChoiceContainer&&this.formContainer&&this.resultsContainer&&(this.analysisChoiceContainer.style.display="none",this.formContainer.style.display="block",this.resultsContainer.style.display="none")}async handleFormSubmission(e){try{this.showLoadingState(),console.log("Processing user data:",e);const t=await this.performAnalysis(e);this.displayResults(t)}catch(e){console.error("Analysis failed:",e),this.showError("Analysis failed. Please try again.")}}showLoadingState(){if(this.formContainer&&this.resultsContainer){this.formContainer.style.display="none",this.resultsContainer.style.display="block";const e=document.getElementById("loadingIndicator"),t=document.getElementById("analysisResults");e&&t&&(e.style.display="block",t.style.display="none")}}async performAnalysis(e){return await new Promise((e=>setTimeout(e,1500))),n.analyzeFinancialHealth(e)}displayResults(e){this.analysisResult=e;const t=document.getElementById("loadingIndicator"),n=document.getElementById("analysisResults");if(t&&n&&(t.style.display="none",n.style.display="block"),this.resultsContainer){const t=document.getElementById("analysisResults");t&&(t.innerHTML='<div id="enhancedResults"></div>',this.resultsDisplay=new o("enhancedResults"),this.resultsDisplay.render(e))}this.addResultsNavigation()}addResultsNavigation(){const e=document.getElementById("enhancedResults");if(e){const t=`\n                <div class="results-navigation">\n                    <div class="nav-actions">\n                        <button class="btn btn-outline" id="startNewAnalysis">\n                            📊 Start New Analysis\n                        </button>\n                        <button class="btn btn-secondary" id="exportResults">\n                            📄 Export Results\n                        </button>\n                        <button class="btn btn-primary" id="saveProgress">\n                            💾 Save Progress\n                        </button>\n                    </div>\n                    <div class="analysis-info">\n                        <p class="analysis-type">\n                            Analysis Type: <strong>${"quick"===this.currentAnalysisType?"Quick Analysis":"Comprehensive Analysis"}</strong>\n                        </p>\n                        <p class="analysis-date">\n                            Generated: <strong>${(new Date).toLocaleDateString()}</strong>\n                        </p>\n                    </div>\n                </div>\n            `;e.insertAdjacentHTML("beforeend",t);const n=document.getElementById("startNewAnalysis"),i=document.getElementById("exportResults"),a=document.getElementById("saveProgress");n&&n.addEventListener("click",(()=>{this.resetApplication()})),i&&i.addEventListener("click",(()=>{this.exportResults()})),a&&a.addEventListener("click",(()=>{this.saveProgress()}))}}resetApplication(){this.currentAnalysisType=null,this.analysisResult=void 0,this.multiStepForm&&(this.multiStepForm=void 0),this.quickForm&&(this.quickForm=void 0),this.resultsDisplay&&(this.resultsDisplay=void 0),this.showAnalysisChoice()}exportResults(){if(!this.analysisResult)return;const e={analysisDate:(new Date).toISOString(),analysisType:this.currentAnalysisType,overallScore:this.analysisResult.overallHealthScore,healthLevel:this.analysisResult.healthLevel,keyMetrics:this.analysisResult.keyMetrics,healthIndicators:this.analysisResult.healthIndicators.map((e=>({name:e.name,score:e.score,status:e.status,explanation:e.explanation}))),topRecommendations:this.analysisResult.prioritizedRecommendations.filter((e=>"high"===e.priority)).slice(0,5).map((e=>({title:e.title,description:e.description,actionSteps:e.actionSteps,timeframe:e.timeframe})))},t=JSON.stringify(e,null,2),n=new Blob([t],{type:"application/json"}),i=URL.createObjectURL(n),a=document.createElement("a");a.href=i,a.download=`financial-health-analysis-${(new Date).toISOString().split("T")[0]}.json`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(i),this.showSuccessMessage("Results exported successfully!")}saveProgress(){if(!this.analysisResult)return;const e={timestamp:(new Date).toISOString(),analysisType:this.currentAnalysisType,results:this.analysisResult};try{localStorage.setItem("financialHealthAnalysis",JSON.stringify(e)),this.showSuccessMessage("Progress saved successfully!")}catch(e){console.error("Failed to save progress:",e),this.showError("Failed to save progress. Please try again.")}}showError(e){const t=document.createElement("div");t.className="error-toast",t.innerHTML=`\n            <div class="toast-content">\n                <span class="toast-icon">❌</span>\n                <span class="toast-message">${e}</span>\n            </div>\n        `,document.body.appendChild(t),setTimeout((()=>{t.parentNode&&t.parentNode.removeChild(t)}),5e3)}showSuccessMessage(e){const t=document.createElement("div");t.className="success-toast",t.innerHTML=`\n            <div class="toast-content">\n                <span class="toast-icon">✅</span>\n                <span class="toast-message">${e}</span>\n            </div>\n        `,document.body.appendChild(t),setTimeout((()=>{t.parentNode&&t.parentNode.removeChild(t)}),3e3)}}document.addEventListener("DOMContentLoaded",(()=>{new r}))})();
//# sourceMappingURL=bundle.js.map