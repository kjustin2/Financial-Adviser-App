{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://financial-adviser-app/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://financial-adviser-app/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://financial-adviser-app/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://financial-adviser-app/./node_modules/css-loader/dist/runtime/api.js","webpack://financial-adviser-app/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://financial-adviser-app/./src/components/shared-form-styles.css","webpack://financial-adviser-app/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://financial-adviser-app/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://financial-adviser-app/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://financial-adviser-app/webpack/bootstrap","webpack://financial-adviser-app/webpack/runtime/compat get default export","webpack://financial-adviser-app/webpack/runtime/define property getters","webpack://financial-adviser-app/webpack/runtime/hasOwnProperty shorthand","webpack://financial-adviser-app/webpack/runtime/nonce","webpack://financial-adviser-app/./src/core/RecommendationEngine.ts","webpack://financial-adviser-app/./src/core/recommendations/CommonRecommendations.ts","webpack://financial-adviser-app/./src/core/recommendations/ComprehensiveRecommendations.ts","webpack://financial-adviser-app/./src/utils/format-utils.ts","webpack://financial-adviser-app/./src/core/recommendations/QuickRecommendations.ts","webpack://financial-adviser-app/./src/core/calculations.ts","webpack://financial-adviser-app/./src/components/shared-form-styles.css?962e","webpack://financial-adviser-app/./src/components/forms/MultiStepForm.ts","webpack://financial-adviser-app/./src/components/forms/QuickAnalysisForm.ts","webpack://financial-adviser-app/./src/components/ui/EnhancedResultsDisplay.ts","webpack://financial-adviser-app/./src/ImprovedApp.ts"],"sourcesContent":["\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.form-container {\r\n  background: #fff;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.06);\r\n  padding: 24px;\r\n  max-width: 700px;\r\n  margin: 0 auto;\r\n  font-family: 'Segoe UI', Arial, sans-serif;\r\n}\r\n\r\n.form-header {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.progress-bar {\r\n  width: 100%;\r\n  height: 8px;\r\n  background: #f3f4f6;\r\n  border-radius: 4px;\r\n  margin-bottom: 8px;\r\n  overflow: hidden;\r\n}\r\n.progress-fill {\r\n  height: 100%;\r\n  background: #3b82f6;\r\n  border-radius: 4px;\r\n  transition: width 0.3s;\r\n}\r\n.progress-text {\r\n  font-size: 1rem;\r\n  color: #555;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.form-field {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.field-label {\r\n  font-weight: 600;\r\n  margin-bottom: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.field-input {\r\n  padding: 10px;\r\n  border: 1px solid #d1d5db;\r\n  border-radius: 6px;\r\n  font-size: 1rem;\r\n}\r\n.input-feedback {\r\n  color: #ef4444;\r\n  font-size: 0.92rem;\r\n  margin-top: 2px;\r\n  display: none;\r\n}\r\n.field-valid .input-feedback {\r\n  color: #10b981;\r\n}\r\n.field-help {\r\n  font-size: 0.92rem;\r\n  color: #888;\r\n  margin-top: 2px;\r\n}\r\n.btn-primary {\r\n  background: #3b82f6;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 8px;\r\n  padding: 12px 24px;\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: background 0.2s;\r\n}\r\n.btn-primary:disabled {\r\n  background: #a5b4fc;\r\n  cursor: not-allowed;\r\n}\r\n.btn-secondary {\r\n  background: #f3f4f6;\r\n  color: #1e293b;\r\n  border: 1px solid #cbd5e1;\r\n  border-radius: 6px;\r\n  font-size: 1rem;\r\n  font-weight: 500;\r\n  padding: 0.75em 1.5em;\r\n  margin: 0 0 16px 0;\r\n  cursor: pointer;\r\n  transition: background 0.2s, color 0.2s;\r\n}\r\n.btn-secondary:hover, .btn-secondary:focus {\r\n  background: #e0e7ef;\r\n  color: #2563eb;\r\n  outline: 2px solid #2563eb;\r\n}\r\n.btn-loader {\r\n  display: inline-block;\r\n  margin-left: 8px;\r\n}\r\n.tooltip {\r\n  position: absolute;\r\n  background: #222;\r\n  color: #fff;\r\n  padding: 6px 12px;\r\n  border-radius: 6px;\r\n  font-size: 0.95rem;\r\n  z-index: 1000;\r\n  pointer-events: none;\r\n}\r\n.help-icon {\r\n  margin-left: 6px;\r\n  color: #2563eb;\r\n  cursor: pointer;\r\n  font-size: 1.1rem;\r\n}\r\n.return-home-btn {\r\n  float: right;\r\n  margin-top: 0;\r\n  margin-bottom: 16px;\r\n}\r\n@media (max-width: 600px) {\r\n  .form-container { padding: 10px; }\r\n  .form-field { margin-bottom: 14px; }\r\n  .btn-primary, .btn-secondary { width: 100%; margin-bottom: 8px; }\r\n}\r\n\r\n.form-fields-grid {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 24px 32px;\r\n  margin-bottom: 24px;\r\n}\r\n@media (max-width: 700px) {\r\n  .form-fields-grid {\r\n    grid-template-columns: 1fr;\r\n    gap: 20px 0;\r\n  }\r\n} `, \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/shared-form-styles.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,sCAAsC;EACtC,aAAa;EACb,gBAAgB;EAChB,cAAc;EACd,0CAA0C;AAC5C;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,WAAW;EACX,mBAAmB;EACnB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;AAClB;AACA;EACE,YAAY;EACZ,mBAAmB;EACnB,kBAAkB;EAClB,sBAAsB;AACxB;AACA;EACE,eAAe;EACf,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,aAAa;EACb,mBAAmB;AACrB;AACA;EACE,aAAa;EACb,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;AACjB;AACA;EACE,cAAc;EACd,kBAAkB;EAClB,eAAe;EACf,aAAa;AACf;AACA;EACE,cAAc;AAChB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,eAAe;AACjB;AACA;EACE,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,iBAAiB;EACjB,gBAAgB;EAChB,eAAe;EACf,2BAA2B;AAC7B;AACA;EACE,mBAAmB;EACnB,mBAAmB;AACrB;AACA;EACE,mBAAmB;EACnB,cAAc;EACd,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;EACf,gBAAgB;EAChB,qBAAqB;EACrB,kBAAkB;EAClB,eAAe;EACf,uCAAuC;AACzC;AACA;EACE,mBAAmB;EACnB,cAAc;EACd,0BAA0B;AAC5B;AACA;EACE,qBAAqB;EACrB,gBAAgB;AAClB;AACA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;EAClB,aAAa;EACb,oBAAoB;AACtB;AACA;EACE,gBAAgB;EAChB,cAAc;EACd,eAAe;EACf,iBAAiB;AACnB;AACA;EACE,YAAY;EACZ,aAAa;EACb,mBAAmB;AACrB;AACA;EACE,kBAAkB,aAAa,EAAE;EACjC,cAAc,mBAAmB,EAAE;EACnC,+BAA+B,WAAW,EAAE,kBAAkB,EAAE;AAClE;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,cAAc;EACd,mBAAmB;AACrB;AACA;EACE;IACE,0BAA0B;IAC1B,WAAW;EACb;AACF\",\"sourcesContent\":[\".form-container {\\r\\n  background: #fff;\\r\\n  border-radius: 12px;\\r\\n  box-shadow: 0 2px 8px rgba(0,0,0,0.06);\\r\\n  padding: 24px;\\r\\n  max-width: 700px;\\r\\n  margin: 0 auto;\\r\\n  font-family: 'Segoe UI', Arial, sans-serif;\\r\\n}\\r\\n\\r\\n.form-header {\\r\\n  margin-bottom: 24px;\\r\\n}\\r\\n\\r\\n.progress-bar {\\r\\n  width: 100%;\\r\\n  height: 8px;\\r\\n  background: #f3f4f6;\\r\\n  border-radius: 4px;\\r\\n  margin-bottom: 8px;\\r\\n  overflow: hidden;\\r\\n}\\r\\n.progress-fill {\\r\\n  height: 100%;\\r\\n  background: #3b82f6;\\r\\n  border-radius: 4px;\\r\\n  transition: width 0.3s;\\r\\n}\\r\\n.progress-text {\\r\\n  font-size: 1rem;\\r\\n  color: #555;\\r\\n  margin-bottom: 16px;\\r\\n}\\r\\n\\r\\n.form-field {\\r\\n  margin-bottom: 20px;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n}\\r\\n.field-label {\\r\\n  font-weight: 600;\\r\\n  margin-bottom: 4px;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n}\\r\\n.field-input {\\r\\n  padding: 10px;\\r\\n  border: 1px solid #d1d5db;\\r\\n  border-radius: 6px;\\r\\n  font-size: 1rem;\\r\\n}\\r\\n.input-feedback {\\r\\n  color: #ef4444;\\r\\n  font-size: 0.92rem;\\r\\n  margin-top: 2px;\\r\\n  display: none;\\r\\n}\\r\\n.field-valid .input-feedback {\\r\\n  color: #10b981;\\r\\n}\\r\\n.field-help {\\r\\n  font-size: 0.92rem;\\r\\n  color: #888;\\r\\n  margin-top: 2px;\\r\\n}\\r\\n.btn-primary {\\r\\n  background: #3b82f6;\\r\\n  color: #fff;\\r\\n  border: none;\\r\\n  border-radius: 8px;\\r\\n  padding: 12px 24px;\\r\\n  font-size: 1.1rem;\\r\\n  font-weight: 600;\\r\\n  cursor: pointer;\\r\\n  transition: background 0.2s;\\r\\n}\\r\\n.btn-primary:disabled {\\r\\n  background: #a5b4fc;\\r\\n  cursor: not-allowed;\\r\\n}\\r\\n.btn-secondary {\\r\\n  background: #f3f4f6;\\r\\n  color: #1e293b;\\r\\n  border: 1px solid #cbd5e1;\\r\\n  border-radius: 6px;\\r\\n  font-size: 1rem;\\r\\n  font-weight: 500;\\r\\n  padding: 0.75em 1.5em;\\r\\n  margin: 0 0 16px 0;\\r\\n  cursor: pointer;\\r\\n  transition: background 0.2s, color 0.2s;\\r\\n}\\r\\n.btn-secondary:hover, .btn-secondary:focus {\\r\\n  background: #e0e7ef;\\r\\n  color: #2563eb;\\r\\n  outline: 2px solid #2563eb;\\r\\n}\\r\\n.btn-loader {\\r\\n  display: inline-block;\\r\\n  margin-left: 8px;\\r\\n}\\r\\n.tooltip {\\r\\n  position: absolute;\\r\\n  background: #222;\\r\\n  color: #fff;\\r\\n  padding: 6px 12px;\\r\\n  border-radius: 6px;\\r\\n  font-size: 0.95rem;\\r\\n  z-index: 1000;\\r\\n  pointer-events: none;\\r\\n}\\r\\n.help-icon {\\r\\n  margin-left: 6px;\\r\\n  color: #2563eb;\\r\\n  cursor: pointer;\\r\\n  font-size: 1.1rem;\\r\\n}\\r\\n.return-home-btn {\\r\\n  float: right;\\r\\n  margin-top: 0;\\r\\n  margin-bottom: 16px;\\r\\n}\\r\\n@media (max-width: 600px) {\\r\\n  .form-container { padding: 10px; }\\r\\n  .form-field { margin-bottom: 14px; }\\r\\n  .btn-primary, .btn-secondary { width: 100%; margin-bottom: 8px; }\\r\\n}\\r\\n\\r\\n.form-fields-grid {\\r\\n  display: grid;\\r\\n  grid-template-columns: 1fr 1fr;\\r\\n  gap: 24px 32px;\\r\\n  margin-bottom: 24px;\\r\\n}\\r\\n@media (max-width: 700px) {\\r\\n  .form-fields-grid {\\r\\n    grid-template-columns: 1fr;\\r\\n    gap: 20px 0;\\r\\n  }\\r\\n} \"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nc = undefined;","/**\r\n * Recommendation Engine\r\n * Orchestrates modular recommendation logic for both Quick and Comprehensive analyses.\r\n *\r\n * @remarks\r\n * - Delegates to Common, Quick, and Comprehensive recommendation modules.\r\n * - Ensures robust, prioritized recommendations for all users.\r\n * - Strictly typed, documented, and follows ES module best practices.\r\n */\r\n\r\nimport { ComprehensiveAnalysisResult, Recommendation } from '../interfaces/analysis-types';\r\nimport { UserFinancialData } from '../interfaces/core-types';\r\nimport { getEmergencyFundRecommendations, getDebtToIncomeRecommendations, getSavingsRateRecommendations, getNegativeCashFlowRecommendations, getCreditScoreRecommendations } from './recommendations/CommonRecommendations';\r\nimport { getHousingCostRatioRecommendations, getCombinedInsightRecommendations } from './recommendations/QuickRecommendations';\r\nimport { getInvestmentDiversificationRecommendations, getInsuranceAdequacyRecommendations } from './recommendations/ComprehensiveRecommendations';\r\n\r\n/**\r\n * RecommendationEngine\r\n * Provides prioritized, actionable recommendations for financial health improvement.\r\n */\r\nexport class RecommendationEngine {\r\n    /**\r\n     * Main function to generate all recommendations.\r\n     * @param analysis - The full comprehensive analysis result.\r\n     * @param data - The original user financial data.\r\n     * @returns A sorted and deduplicated array of Recommendation objects.\r\n     */\r\n    public static generateRecommendations(\r\n        analysis: ComprehensiveAnalysisResult,\r\n        data: UserFinancialData\r\n    ): Recommendation[] {\r\n        let recommendations: Recommendation[] = [];\r\n        const { keyMetrics } = analysis;\r\n        // --- COMMON RECOMMENDATIONS (always run) ---\r\n        if (typeof data.assets.checking === 'number' && typeof data.assets.savings === 'number' && typeof data.assets.emergencyFund === 'number' && typeof data.expenses.housing === 'number' && typeof data.expenses.food === 'number' && typeof data.expenses.transportation === 'number' && typeof data.expenses.utilities === 'number') {\r\n            recommendations.push(...getEmergencyFundRecommendations(\r\n                (data.assets.checking || 0) + (data.assets.savings || 0) + (data.assets.emergencyFund || 0),\r\n                (data.expenses.housing || 0) + (data.expenses.food || 0) + (data.expenses.transportation || 0) + (data.expenses.utilities || 0)\r\n            ));\r\n        }\r\n        if (typeof keyMetrics.debtToIncomeRatio === 'number' && !isNaN(keyMetrics.debtToIncomeRatio)) {\r\n            recommendations.push(...getDebtToIncomeRecommendations(keyMetrics.debtToIncomeRatio));\r\n        }\r\n        if (typeof keyMetrics.savingsRate === 'number' && !isNaN(keyMetrics.savingsRate)) {\r\n            recommendations.push(...getSavingsRateRecommendations(keyMetrics.savingsRate));\r\n        }\r\n        if (typeof keyMetrics.monthlyCashFlow === 'number' && !isNaN(keyMetrics.monthlyCashFlow)) {\r\n            recommendations.push(...getNegativeCashFlowRecommendations(keyMetrics.monthlyCashFlow));\r\n        }\r\n        if (typeof data.liabilities.creditScore === 'number' && !isNaN(data.liabilities.creditScore)) {\r\n            recommendations.push(...getCreditScoreRecommendations(data.liabilities.creditScore));\r\n        }\r\n        // --- QUICK ANALYSIS RECOMMENDATIONS (if minimal data) ---\r\n        if (this.isQuickAnalysis(data)) {\r\n            if (typeof data.expenses.housing === 'number' && typeof data.income.primarySalary === 'number') {\r\n                recommendations.push(...getHousingCostRatioRecommendations(\r\n                    data.expenses.housing || 0,\r\n                    data.income.primarySalary || 0\r\n                ));\r\n            }\r\n            if (typeof data.income.primarySalary === 'number' && typeof data.expenses.food === 'number' && typeof data.expenses.transportation === 'number' && typeof data.expenses.utilities === 'number' && typeof data.assets.checking === 'number' && typeof data.assets.savings === 'number' && typeof data.assets.emergencyFund === 'number') {\r\n                recommendations.push(...getCombinedInsightRecommendations(\r\n                    data.income.primarySalary || 0,\r\n                    data.expenses.food + data.expenses.transportation + data.expenses.utilities || 0,\r\n                    (data.assets.checking || 0) + (data.assets.savings || 0) + (data.assets.emergencyFund || 0)\r\n                ));\r\n            }\r\n        }\r\n        // --- COMPREHENSIVE ANALYSIS RECOMMENDATIONS (if full data) ---\r\n        if (this.isComprehensiveAnalysis(data)) {\r\n            recommendations.push(...getInvestmentDiversificationRecommendations(data.assets, data.personalInfo.age));\r\n            recommendations.push(...getInsuranceAdequacyRecommendations(data.insurance, data.personalInfo.dependents));\r\n        }\r\n        // Sort and deduplicate\r\n        recommendations.sort((a, b) => {\r\n            const priorityOrder = { high: 0, medium: 1, low: 2 };\r\n            return priorityOrder[a.priority] - priorityOrder[b.priority];\r\n        });\r\n        const uniqueRecommendations = Array.from(new Map(recommendations.map(r => [r.id, r])).values());\r\n        return uniqueRecommendations.slice(0, 10);\r\n    }\r\n\r\n    /**\r\n     * Determines if the data set is from Quick Analysis (minimal fields).\r\n     */\r\n    private static isQuickAnalysis(data: UserFinancialData): boolean {\r\n        // Heuristic: Quick Analysis has only primarySalary, housing, minimal expenses, checking, creditCardDebt, creditScore\r\n        const hasMinimalFields =\r\n            typeof data.income.primarySalary === 'number' &&\r\n            typeof data.expenses.housing === 'number' &&\r\n            typeof data.assets.checking === 'number' &&\r\n            typeof data.liabilities.creditCardDebt === 'number' &&\r\n            typeof data.liabilities.creditScore === 'number';\r\n        const hasComprehensiveFields =\r\n            typeof data.income.secondaryIncome === 'number' &&\r\n            typeof data.assets.employer401k === 'number';\r\n        return hasMinimalFields && !hasComprehensiveFields;\r\n    }\r\n\r\n    /**\r\n     * Determines if the data set is from Comprehensive Analysis (full fields).\r\n     */\r\n    private static isComprehensiveAnalysis(data: UserFinancialData): boolean {\r\n        // Heuristic: Comprehensive Analysis has secondaryIncome, employer401k, etc.\r\n        return typeof data.income.secondaryIncome === 'number' && typeof data.assets.employer401k === 'number';\r\n    }\r\n} ","/**\r\n * Common Recommendations Module\r\n * Contains logic for recommendations that can be generated from both Quick and Comprehensive data.\r\n *\r\n * @remarks\r\n * - Strictly typed, fully documented, and validated per project rules.\r\n * - Exports named functions for each recommendation type.\r\n * - No default export; use named exports for clarity and tree-shaking.\r\n */\r\n\r\nimport { Recommendation } from '../../interfaces/analysis-types';\r\nimport { formatCurrency } from '../../utils/format-utils';\r\n\r\n/**\r\n * Generates emergency fund recommendations based on available data.\r\n * @param totalLiquidAssets - User's liquid savings (checking + savings + emergency fund)\r\n * @param totalMonthlyExpenses - User's total monthly expenses\r\n * @returns Array of Recommendation objects\r\n */\r\nexport function getEmergencyFundRecommendations(totalLiquidAssets: number, totalMonthlyExpenses: number): Recommendation[] {\r\n    if (typeof totalLiquidAssets !== 'number' || isNaN(totalLiquidAssets) || typeof totalMonthlyExpenses !== 'number' || isNaN(totalMonthlyExpenses) || totalMonthlyExpenses <= 0) return [];\r\n    const months = totalLiquidAssets / totalMonthlyExpenses;\r\n    if (months >= 3) return [];\r\n    const needed = Math.max(0, (3 - months) * totalMonthlyExpenses);\r\n    return [{\r\n        id: 'emergency-fund-quick',\r\n        category: 'savings',\r\n        priority: 'high',\r\n        title: 'Build Your Emergency Fund',\r\n        description: `You have ${months.toFixed(1)} months of expenses saved. Aim for at least 3 months for a basic safety net. You need to save about ${formatCurrency(needed)} more.`,\r\n        actionSteps: [\r\n            'Set up an automatic transfer to savings each payday.',\r\n            'Pause non-essential spending until you reach your goal.'\r\n        ],\r\n        timeframe: '1-3-months',\r\n        impactLevel: 'high'\r\n    }];\r\n}\r\n\r\n/**\r\n * Generates debt-to-income recommendations based on available data.\r\n * @param debtToIncomeRatio - User's DTI as a percentage\r\n * @returns Array of Recommendation objects\r\n */\r\nexport function getDebtToIncomeRecommendations(debtToIncomeRatio: number): Recommendation[] {\r\n    if (typeof debtToIncomeRatio !== 'number' || isNaN(debtToIncomeRatio) || debtToIncomeRatio < 36) return [];\r\n    return [{\r\n        id: 'dti-quick',\r\n        category: 'debt',\r\n        priority: 'high',\r\n        title: 'Reduce Your Debt-to-Income Ratio',\r\n        description: `Your debt-to-income ratio is ${debtToIncomeRatio.toFixed(1)}%. Aim to keep this below 36% for financial stability.`,\r\n        actionSteps: [\r\n            'Prioritize paying down high-interest debt.',\r\n            'Avoid taking on new debt until your ratio is below 36%.'\r\n        ],\r\n        timeframe: 'next-3-months',\r\n        impactLevel: 'high'\r\n    }];\r\n}\r\n\r\n/**\r\n * Generates savings rate recommendations based on available data.\r\n * @param savingsRate - User's savings rate as a percentage\r\n * @returns Array of Recommendation objects\r\n */\r\nexport function getSavingsRateRecommendations(savingsRate: number): Recommendation[] {\r\n    if (typeof savingsRate !== 'number' || isNaN(savingsRate) || savingsRate >= 10) return [];\r\n    return [{\r\n        id: 'savings-rate-quick',\r\n        category: 'savings',\r\n        priority: 'medium',\r\n        title: 'Increase Your Savings Rate',\r\n        description: `Your savings rate is ${savingsRate.toFixed(1)}%. Aim for at least 10% of your income to build long-term security.`,\r\n        actionSteps: [\r\n            'Increase your savings by 1% each month.',\r\n            'Direct any windfalls or bonuses to savings.'\r\n        ],\r\n        timeframe: 'ongoing',\r\n        impactLevel: 'medium'\r\n    }];\r\n}\r\n\r\n/**\r\n * Generates negative cash flow recommendations based on available data.\r\n * @param monthlyCashFlow - User's monthly cash flow (income - expenses)\r\n * @returns Array of Recommendation objects\r\n */\r\nexport function getNegativeCashFlowRecommendations(monthlyCashFlow: number): Recommendation[] {\r\n    if (typeof monthlyCashFlow !== 'number' || isNaN(monthlyCashFlow) || monthlyCashFlow >= 0) return [];\r\n    return [{\r\n        id: 'negative-cash-flow-quick',\r\n        category: 'spending',\r\n        priority: 'high',\r\n        title: 'Address Negative Cash Flow',\r\n        description: `You are spending more than you earn each month. Immediate action is needed to avoid debt and financial stress.`,\r\n        actionSteps: [\r\n            'Track all spending for 30 days to identify areas to cut.',\r\n            'Create a strict budget and stick to it.'\r\n        ],\r\n        timeframe: 'next-30-days',\r\n        impactLevel: 'high'\r\n    }];\r\n}\r\n\r\n/**\r\n * Generates credit score recommendations based on available data.\r\n * @param creditScore - User's credit score\r\n * @returns Array of Recommendation objects\r\n */\r\nexport function getCreditScoreRecommendations(creditScore: number): Recommendation[] {\r\n    if (typeof creditScore !== 'number' || isNaN(creditScore) || creditScore >= 670) return [];\r\n    return [{\r\n        id: 'credit-score-quick',\r\n        category: 'credit',\r\n        priority: 'medium',\r\n        title: 'Improve Your Credit Score',\r\n        description: `Your credit score is ${creditScore}. Focus on on-time payments and reducing credit card balances to improve your score.`,\r\n        actionSteps: [\r\n            'Pay all bills on time every month.',\r\n            'Pay down credit card balances below 30% of your limit.'\r\n        ],\r\n        timeframe: 'next-3-months',\r\n        impactLevel: 'medium'\r\n    }];\r\n} ","/**\r\n * Comprehensive Recommendations Module\r\n * Contains logic for recommendations that require full Comprehensive Analysis data.\r\n *\r\n * @remarks\r\n * - Strictly typed, fully documented, and validated per project rules.\r\n * - Exports named functions for each recommendation type.\r\n * - No default export; use named exports for clarity and tree-shaking.\r\n */\r\n\r\nimport { Recommendation } from '../../interfaces/analysis-types';\r\n\r\n/**\r\n * Generates investment diversification recommendations based on full data.\r\n * @param investments - User's investment account balances\r\n * @param age - User's age\r\n * @returns Array of Recommendation objects\r\n */\r\nexport function getInvestmentDiversificationRecommendations(investments: any, age: number): Recommendation[] {\r\n    if (typeof age !== 'number' || isNaN(age)) return [];\r\n    const totalInvestments = (investments.employer401k || 0) + (investments.traditionalIRA || 0) + (investments.rothIRA || 0) + (investments.brokerageAccounts || 0) + (investments.stocks || 0) + (investments.bonds || 0) + (investments.mutualFunds || 0);\r\n    if (totalInvestments <= 0) return [];\r\n    // Simple rule: 110 - age = % in stocks\r\n    const targetStockAllocation = 110 - age;\r\n    // For demo, just recommend if not diversified\r\n    return [{\r\n        id: 'investment-diversification',\r\n        category: 'investment',\r\n        priority: 'medium',\r\n        title: 'Diversify Your Investments',\r\n        description: `Review your asset allocation. A common rule is to keep about ${targetStockAllocation}% of your portfolio in stocks for your age.`,\r\n        actionSteps: [\r\n            'Rebalance your portfolio to match your risk tolerance and goals.',\r\n            'Consider low-cost index funds or ETFs for diversification.'\r\n        ],\r\n        timeframe: 'next-3-months',\r\n        impactLevel: 'medium'\r\n    }];\r\n}\r\n\r\n/**\r\n * Generates insurance adequacy recommendations based on full data.\r\n * @param insurance - User's insurance data\r\n * @param dependents - Number of dependents\r\n * @returns Array of Recommendation objects\r\n */\r\nexport function getInsuranceAdequacyRecommendations(insurance: any, dependents: number): Recommendation[] {\r\n    if (typeof dependents !== 'number' || isNaN(dependents)) return [];\r\n    const recs: Recommendation[] = [];\r\n    if (!insurance.healthInsurance) {\r\n        recs.push({\r\n            id: 'insurance-health',\r\n            category: 'risk',\r\n            priority: 'high',\r\n            title: 'Get Health Insurance Coverage',\r\n            description: 'Health insurance is essential to protect against catastrophic medical costs.',\r\n            actionSteps: ['Enroll in a health insurance plan as soon as possible.'],\r\n            timeframe: 'immediate',\r\n            impactLevel: 'high'\r\n        });\r\n    }\r\n    if (dependents > 0 && !insurance.lifeInsurance) {\r\n        recs.push({\r\n            id: 'insurance-life',\r\n            category: 'risk',\r\n            priority: 'high',\r\n            title: 'Get Life Insurance for Your Dependents',\r\n            description: 'Life insurance is critical to protect your family if something happens to you.',\r\n            actionSteps: ['Get quotes for term life insurance and choose a policy that covers at least 10x your income.'],\r\n            timeframe: 'next-30-days',\r\n            impactLevel: 'high'\r\n        });\r\n    }\r\n    return recs;\r\n} ","/**\r\n * Format Utilities\r\n * Provides robust formatting functions for currency and numbers.\r\n *\r\n * @remarks\r\n * - Strictly typed, fully documented, and validated per project rules.\r\n * - All formatting functions handle edge cases and invalid values.\r\n */\r\n\r\n/**\r\n * Formats a number as USD currency with no decimals.\r\n * @param amount - The amount to format.\r\n * @returns The formatted currency string, or 'N/A' if invalid.\r\n */\r\nexport function formatCurrency(amount: number): string {\r\n    if (typeof amount !== 'number' || isNaN(amount)) return 'N/A';\r\n    if (amount === 0) return '$0';\r\n    return new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 0\r\n    }).format(amount);\r\n}\r\n\r\n/**\r\n * Type guard to check if a value is a valid number (not NaN).\r\n * @param val - The value to check.\r\n * @returns True if val is a number and not NaN.\r\n */\r\nexport function isValidNumber(val: unknown): val is number {\r\n    return typeof val === 'number' && !isNaN(val);\r\n} ","/**\r\n * Quick Recommendations Module\r\n * Contains logic for recommendations that can be generated from Quick Analysis data only.\r\n *\r\n * @remarks\r\n * - Strictly typed, fully documented, and validated per project rules.\r\n * - Exports named functions for each recommendation type.\r\n * - No default export; use named exports for clarity and tree-shaking.\r\n */\r\n\r\nimport { Recommendation } from '../../interfaces/analysis-types';\r\n\r\n/**\r\n * Generates housing cost ratio recommendations based on available data.\r\n * @param housing - User's monthly housing cost\r\n * @param income - User's monthly take-home income\r\n * @returns Array of Recommendation objects\r\n */\r\nexport function getHousingCostRatioRecommendations(housing: number, income: number): Recommendation[] {\r\n    if (typeof housing !== 'number' || isNaN(housing) || typeof income !== 'number' || isNaN(income) || income <= 0) return [];\r\n    const ratio = (housing / income) * 100;\r\n    if (ratio <= 30) return [];\r\n    return [{\r\n        id: 'housing-cost-ratio-quick',\r\n        category: 'spending',\r\n        priority: 'medium',\r\n        title: 'Reduce Your Housing Cost Ratio',\r\n        description: `Your housing costs are ${ratio.toFixed(1)}% of your income. Aim to keep this below 30% for long-term affordability.`,\r\n        actionSteps: [\r\n            'Consider refinancing, downsizing, or negotiating rent.',\r\n            'Look for ways to increase income or reduce other expenses.'\r\n        ],\r\n        timeframe: 'next-3-months',\r\n        impactLevel: 'medium'\r\n    }];\r\n}\r\n\r\n/**\r\n * Generates combined insight recommendations by cross-referencing multiple quick analysis fields.\r\n * @param income - User's monthly income\r\n * @param expenses - User's other monthly expenses\r\n * @param savings - User's total savings\r\n * @returns Array of Recommendation objects\r\n */\r\nexport function getCombinedInsightRecommendations(income: number, expenses: number, savings: number): Recommendation[] {\r\n    if (typeof income !== 'number' || isNaN(income) || income <= 0 || typeof expenses !== 'number' || isNaN(expenses) || expenses < 0 || typeof savings !== 'number' || isNaN(savings) || savings < 0) return [];\r\n    const months = (savings / (income + expenses));\r\n    if (months >= 6) return [];\r\n    if (months < 1) {\r\n        return [{\r\n            id: 'combined-insight-critical',\r\n            category: 'savings',\r\n            priority: 'high',\r\n            title: 'Critical: No Financial Cushion',\r\n            description: `You have less than one month of expenses saved. This puts you at high risk for financial hardship. Build a safety net immediately.`,\r\n            actionSteps: [\r\n                'Pause all non-essential spending.',\r\n                'Set up an emergency fund as your top priority.'\r\n            ],\r\n            timeframe: 'immediate',\r\n            impactLevel: 'high'\r\n        }];\r\n    }\r\n    return [{\r\n        id: 'combined-insight-warning',\r\n        category: 'savings',\r\n        priority: 'medium',\r\n        title: 'Increase Your Financial Cushion',\r\n        description: `You have ${months.toFixed(1)} months of expenses saved. Aim for at least 3-6 months for greater security.`,\r\n        actionSteps: [\r\n            'Increase your monthly savings rate.',\r\n            'Automate transfers to your savings account.'\r\n        ],\r\n        timeframe: 'next-3-months',\r\n        impactLevel: 'medium'\r\n    }];\r\n} ","/**\r\n * Comprehensive Financial Health Calculation Engine\r\n * Based on Financial Health Network 2024 research and industry best practices\r\n *\r\n * @remarks\r\n * - Strictly typed, fully documented, and validated per project rules.\r\n * - All calculations use validated user input and handle edge cases.\r\n * - No sensitive data is stored or transmitted externally from this module.\r\n */\r\n\r\nimport { UserFinancialData } from '../interfaces/core-types';\r\nimport { \r\n    HealthIndicator, \r\n    FinancialMetric, \r\n    ComprehensiveAnalysisResult,\r\n    WealthProjection,\r\n    ScenarioAnalysis\r\n} from '../interfaces/analysis-types';\r\nimport { RecommendationEngine } from './RecommendationEngine';\r\n\r\n/**\r\n * FinancialCalculationEngine\r\n * Provides all core financial health calculations and analysis.\r\n */\r\nexport class FinancialCalculationEngine {\r\n    \r\n    /**\r\n     * Perform comprehensive financial health analysis\r\n     * @param data - Validated user financial data\r\n     * @returns ComprehensiveAnalysisResult with all metrics, indicators, and recommendations\r\n     * @remarks All calculations are based on Financial Health Network, CFPB, Experian, and other industry standards.\r\n     */\r\n    public static analyzeFinancialHealth(data: UserFinancialData): ComprehensiveAnalysisResult {\r\n        // Validate that we're using real user data, not defaults\r\n        this.validateUserData(data);\r\n        const keyMetrics = this.calculateKeyMetrics(data);\r\n        const healthIndicators = this.calculateHealthIndicators(data, keyMetrics);\r\n        const overallHealthScore = this.calculateOverallHealthScore(healthIndicators);\r\n        \r\n        const result: ComprehensiveAnalysisResult = {\r\n            overallHealthScore,\r\n            healthLevel: this.getHealthLevel(overallHealthScore),\r\n            healthIndicators,\r\n            keyMetrics,\r\n            liquidityAnalysis: this.analyzeLiquidity(data, keyMetrics),\r\n            debtAnalysis: this.analyzeDebt(data, keyMetrics),\r\n            investmentAnalysis: this.analyzeInvestments(data, keyMetrics),\r\n            insuranceAnalysis: this.analyzeInsurance(data),\r\n            wealthProjections: this.projectWealth(data, keyMetrics),\r\n            scenarioAnalysis: this.analyzeScenarios(data, keyMetrics),\r\n            prioritizedRecommendations: [], // Will be populated next\r\n            peerBenchmarks: this.calculatePeerBenchmarks(data),\r\n            detailedInsights: this.generateDetailedInsights(data, keyMetrics, healthIndicators),\r\n            financialRatios: this.calculateFinancialRatios(data, keyMetrics),\r\n            riskAssessment: this.assessFinancialRisk(data, keyMetrics),\r\n            goalAnalysis: this.analyzeFinancialGoals(data, keyMetrics)\r\n        };\r\n\r\n        result.prioritizedRecommendations = RecommendationEngine.generateRecommendations(result, data);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Calculate key financial metrics (net worth, DTI, savings rate, etc)\r\n     * @param data - User financial data\r\n     * @returns Object with all key metrics and breakdowns\r\n     * @remarks See CFPB, Experian, NerdWallet for metric definitions and targets.\r\n     */\r\n    private static calculateKeyMetrics(data: UserFinancialData): any {\r\n        const totalIncome = this.getTotalMonthlyIncome(data.income);\r\n        const totalExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const monthlyCashFlow = totalIncome - totalExpenses;\r\n        const totalAssets = this.getTotalAssets(data.assets);\r\n        const totalLiabilities = this.getTotalLiabilities(data.liabilities);\r\n        // Defensive: Prevent NaN/undefined\r\n        const netWorth = (typeof totalAssets === 'number' && typeof totalLiabilities === 'number' && !isNaN(totalAssets) && !isNaN(totalLiabilities)) ? (totalAssets - totalLiabilities) : 0;\r\n        const totalLiquidAssets = (data.assets.checking || 0) + (data.assets.savings || 0) + (data.assets.moneyMarket || 0) + (data.assets.emergencyFund || 0);\r\n        const totalDebt = this.getTotalDebt(data.liabilities);\r\n        // DTI: Use monthly income, not annualized (see Wells Fargo, Experian, CFPB)\r\n        const debtToIncomeRatio = totalIncome > 0 ? (totalDebt / totalIncome) * 100 : (totalDebt > 0 ? 100 : 0);\r\n        // Defensive breakdowns for UI\r\n        const netWorthBreakdown = {\r\n            totalAssets,\r\n            totalLiabilities,\r\n            netWorth\r\n        };\r\n        const dtiBreakdown = {\r\n            totalDebt,\r\n            totalIncome,\r\n            debtToIncomeRatio\r\n        };\r\n        return {\r\n            monthlyCashFlow: isNaN(monthlyCashFlow) ? 0 : monthlyCashFlow,\r\n            emergencyFundMonths: totalExpenses > 0 && totalLiquidAssets >= 0 ? totalLiquidAssets / totalExpenses : 0,\r\n            debtToIncomeRatio,\r\n            dtiBreakdown,\r\n            savingsRate: totalIncome > 0 ? ((monthlyCashFlow - (data.behaviors?.monthlyInvestmentContribution || 0)) / totalIncome) * 100 : 0,\r\n            creditUtilization: data.liabilities.totalCreditLimit > 0 ? (data.liabilities.creditCardDebt / data.liabilities.totalCreditLimit) * 100 : 0,\r\n            netWorth,\r\n            netWorthBreakdown,\r\n            liquidityRatio: totalLiabilities > 0 ? totalLiquidAssets / totalLiabilities : totalLiquidAssets > 0 ? 100 : 0,\r\n            assetAllocationScore: this.calculateAssetAllocationScore(data)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Calculate the 8 core health indicators based on Financial Health Network research\r\n     * @param data - User financial data\r\n     * @param keyMetrics - Precomputed key metrics\r\n     * @returns Array of HealthIndicator objects\r\n     */\r\n    private static calculateHealthIndicators(data: UserFinancialData, keyMetrics: any): HealthIndicator[] {\r\n        return [\r\n            this.analyzeSpendingVsIncome(data, keyMetrics),\r\n            this.analyzeBillPaymentReliability(data),\r\n            this.analyzeEmergencySavings(data, keyMetrics),\r\n            this.analyzeDebtManagement(data),\r\n            this.analyzeCreditHealth(data, keyMetrics),\r\n            this.analyzeInsuranceConfidence(data),\r\n            this.analyzeLongTermGoalConfidence(data),\r\n            this.analyzeFinancialPlanningEngagement(data)\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 1: Spending vs Income Analysis\r\n     * @remarks A healthy cash flow ratio is typically above 10-20% (CFPB, Experian).\r\n     */\r\n    private static analyzeSpendingVsIncome(data: UserFinancialData, keyMetrics: any): HealthIndicator {\r\n        const totalIncome = this.getTotalMonthlyIncome(data.income);\r\n        const cashFlowRatio = totalIncome > 0 ? (keyMetrics.monthlyCashFlow / totalIncome) * 100 : 0;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        if (cashFlowRatio >= 20) {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (cashFlowRatio >= 10) {\r\n            score = 80;\r\n            status = 'good';\r\n        } else if (cashFlowRatio >= 5) {\r\n            score = 60;\r\n            status = 'fair';\r\n        } else if (cashFlowRatio > 0) {\r\n            score = 40;\r\n            status = 'poor';\r\n        } else {\r\n            score = 0;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Spending vs Income',\r\n            score,\r\n            status,\r\n            weight: 15,\r\n            metrics: [\r\n                {\r\n                    title: 'Monthly Cash Flow',\r\n                    value: this.formatCurrency(keyMetrics.monthlyCashFlow),\r\n                    numericValue: keyMetrics.monthlyCashFlow,\r\n                    description: 'Amount left after all expenses',\r\n                    status,\r\n                    benchmark: 'Target: 20% of income',\r\n                    improvement: cashFlowRatio < 20 ? 'Consider reducing expenses or increasing income' : undefined\r\n                },\r\n                {\r\n                    title: 'Cash Flow Ratio',\r\n                    value: `${cashFlowRatio.toFixed(1)}%`,\r\n                    numericValue: cashFlowRatio,\r\n                    description: 'Percentage of income available after expenses',\r\n                    status,\r\n                    benchmark: 'Excellent: 20%+, Good: 10-19%'\r\n                }\r\n            ],\r\n            recommendations: this.getSpendingRecommendations(cashFlowRatio),\r\n            explanation: `This indicator measures if you spend less than you earn. Your cash flow ratio is ${cashFlowRatio.toFixed(1)}%, resulting in a score of ${score}/100. A healthy ratio is typically above 10-20%.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 2: Bill Payment Reliability\r\n     */\r\n    private static analyzeBillPaymentReliability(data: UserFinancialData): HealthIndicator {\r\n        const reliability = data.behaviors.billPaymentReliability;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        switch (reliability) {\r\n            case 'always-on-time':\r\n                score = 100;\r\n                status = 'excellent';\r\n                break;\r\n            case 'usually-on-time':\r\n                score = 75;\r\n                status = 'good';\r\n                break;\r\n            case 'sometimes-late':\r\n                score = 50;\r\n                status = 'fair';\r\n                break;\r\n            case 'often-late':\r\n                score = 25;\r\n                status = 'poor';\r\n                break;\r\n            default:\r\n                score = 0;\r\n                status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Bill Payment Reliability',\r\n            score,\r\n            status,\r\n            weight: 15,\r\n            metrics: [\r\n                {\r\n                    title: 'Payment History',\r\n                    value: this.formatReliabilityText(reliability),\r\n                    description: 'Consistency of bill payments',\r\n                    status,\r\n                    benchmark: 'Target: Always on time'\r\n                },\r\n                {\r\n                    title: 'Credit Score Impact',\r\n                    value: data.liabilities.creditScore.toString(),\r\n                    numericValue: data.liabilities.creditScore,\r\n                    description: 'Current credit score',\r\n                    status: this.getCreditScoreStatus(data.liabilities.creditScore),\r\n                    benchmark: 'Excellent: 800+, Good: 740-799, Fair: 670-739'\r\n                }\r\n            ],\r\n            recommendations: this.getPaymentReliabilityRecommendations(reliability),\r\n            explanation: `This indicator reflects your consistency in paying bills on time. Your self-reported reliability is '${this.formatReliabilityText(reliability)}', leading to a score of ${score}/100. On-time payments are crucial for a good credit score.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Analyze Debt Management Effectiveness (core health indicator #4)\r\n     * Uses research-based debt-to-income ratio, edge case handling, and clear status logic.\r\n     * - Target: <36% total DTI, <28% housing DTI\r\n     * - Status: 'excellent' <20%, 'good' <28%, 'fair' <36%, 'poor' <43%, 'critical' >=43%\r\n     * - Handles zero/negative income and missing data\r\n     */\r\n    private static analyzeDebtManagement(data: UserFinancialData): HealthIndicator {\r\n        // Defensive: Validate income and liabilities\r\n        const totalMonthlyIncome = this.getTotalMonthlyIncome(data.income);\r\n        const totalMonthlyDebt = this.getTotalDebt(data.liabilities);\r\n        let debtToIncomeRatio = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        let explanation = '';\r\n        let recommendations: string[] = [];\r\n\r\n        if (totalMonthlyIncome > 0) {\r\n            debtToIncomeRatio = totalMonthlyDebt / totalMonthlyIncome;\r\n            if (debtToIncomeRatio < 0.2) {\r\n                status = 'excellent';\r\n                explanation = 'Your debt-to-income ratio is well below recommended thresholds.';\r\n            } else if (debtToIncomeRatio < 0.28) {\r\n                status = 'good';\r\n                explanation = 'Your debt-to-income ratio is healthy and manageable.';\r\n            } else if (debtToIncomeRatio < 0.36) {\r\n                status = 'fair';\r\n                explanation = 'Your debt-to-income ratio is approaching risk thresholds.';\r\n            } else if (debtToIncomeRatio < 0.43) {\r\n                status = 'poor';\r\n                explanation = 'Your debt-to-income ratio is above recommended limits. Consider reducing debt.';\r\n            } else {\r\n                status = 'critical';\r\n                explanation = 'Your debt-to-income ratio is dangerously high. Immediate action is needed.';\r\n            }\r\n        } else {\r\n            // Edge case: zero or negative income\r\n            debtToIncomeRatio = totalMonthlyDebt > 0 ? 1 : 0;\r\n            status = totalMonthlyDebt > 0 ? 'critical' : 'excellent';\r\n            explanation = totalMonthlyDebt > 0\r\n                ? 'No reported income but outstanding debts. Address income or debt immediately.'\r\n                : 'No income or debt reported.';\r\n        }\r\n\r\n        // Recommendations (research-based)\r\n        recommendations = this.getDebtManagementRecommendations(debtToIncomeRatio);\r\n\r\n        return {\r\n            name: 'Debt Management Effectiveness',\r\n            score: Math.max(0, 100 - Math.round(debtToIncomeRatio * 100)),\r\n            status,\r\n            weight: 0.15,\r\n            metrics: [\r\n                {\r\n                    title: 'Debt-to-Income Ratio',\r\n                    value: (debtToIncomeRatio * 100).toFixed(1) + '%',\r\n                    numericValue: debtToIncomeRatio,\r\n                    description: 'Total monthly debt payments as a percentage of monthly income',\r\n                    status,\r\n                    benchmark: '<36%',\r\n                    improvement: status === 'excellent' ? '' : 'Reduce debt or increase income to improve ratio.'\r\n                }\r\n            ],\r\n            recommendations,\r\n            explanation\r\n        };\r\n    }\r\n\r\n    // Helper Methods\r\n    private static getTotalMonthlyIncome(income: any): number {\r\n        return income.primarySalary + income.secondaryIncome + income.businessIncome + \r\n               income.investmentIncome + income.rentalIncome + income.benefitsIncome + income.otherIncome;\r\n    }\r\n\r\n    private static getTotalMonthlyExpenses(expenses: any): number {\r\n        return expenses.housing + expenses.utilities + expenses.insurance + expenses.loanPayments +\r\n               expenses.childcare + expenses.food + expenses.transportation + expenses.healthcare +\r\n               expenses.clothing + expenses.personalCare + expenses.entertainment + expenses.diningOut +\r\n               expenses.hobbies + expenses.subscriptions + expenses.shopping + expenses.travel +\r\n               expenses.creditCardPayments + expenses.studentLoanPayments + expenses.otherDebtPayments;\r\n    }\r\n\r\n    private static getTotalAssets(assets: any): number {\r\n        // Defensive: Treat missing/invalid as zero\r\n        return (assets.checking || 0) + (assets.savings || 0) + (assets.moneyMarket || 0) + (assets.emergencyFund || 0) +\r\n               (assets.employer401k || 0) + (assets.traditionalIRA || 0) + (assets.rothIRA || 0) + (assets.brokerageAccounts || 0) +\r\n               (assets.stocks || 0) + (assets.bonds || 0) + (assets.mutualFunds || 0) + (assets.primaryResidence || 0) +\r\n               (assets.investmentProperties || 0) + (assets.cryptocurrency || 0) + (assets.preciousMetals || 0) +\r\n               (assets.collectibles || 0) + (assets.businessEquity || 0) + (assets.otherAssets || 0);\r\n    }\r\n\r\n    /**\r\n     * Get total monthly debt payments from all liability categories\r\n     * Allows total debt to be zero and prevents NaN\r\n     */\r\n    private static getTotalDebt(liabilities: any): number {\r\n        if (!liabilities || typeof liabilities !== 'object') return 0;\r\n        return [\r\n            'mortgageBalance', 'homeEquityLoan', 'autoLoans', 'securedCreditLines',\r\n            'creditCardDebt', 'personalLoans', 'studentLoans', 'medicalDebt',\r\n            'businessLoans', 'businessCreditLines', 'taxDebt', 'legalJudgments', 'otherDebt'\r\n        ].reduce((sum, key) => sum + (Number(liabilities[key]) || 0), 0);\r\n    }\r\n\r\n    /**\r\n     * Get total liabilities from all liability categories\r\n     * Sums all liability fields, treating missing as zero\r\n     */\r\n    private static getTotalLiabilities(liabilities: any): number {\r\n        return [\r\n            'mortgageBalance', 'homeEquityLoan', 'autoLoans', 'securedCreditLines',\r\n            'creditCardDebt', 'personalLoans', 'studentLoans', 'medicalDebt',\r\n            'businessLoans', 'businessCreditLines', 'taxDebt', 'legalJudgments', 'otherDebt'\r\n        ].reduce((sum, key) => sum + (Number(liabilities[key]) || 0), 0);\r\n    }\r\n\r\n    private static formatCurrency(amount: number): string {\r\n        if (typeof amount !== 'number' || isNaN(amount)) return 'N/A';\r\n        if (amount === 0) return '$0';\r\n        return new Intl.NumberFormat('en-US', {\r\n            style: 'currency',\r\n            currency: 'USD',\r\n            minimumFractionDigits: 0,\r\n            maximumFractionDigits: 0\r\n        }).format(amount);\r\n    }\r\n\r\n    private static formatReliabilityText(reliability: string): string {\r\n        const map: { [key: string]: string } = {\r\n            'always-on-time': 'Always On Time',\r\n            'usually-on-time': 'Usually On Time',\r\n            'sometimes-late': 'Sometimes Late',\r\n            'often-late': 'Often Late'\r\n        };\r\n        return map[reliability] || reliability;\r\n    }\r\n\r\n    private static calculateOverallHealthScore(indicators: HealthIndicator[]): number {\r\n        let totalWeightedScore = 0;\r\n        let totalWeight = 0;\r\n        \r\n        for (const indicator of indicators) {\r\n            totalWeightedScore += indicator.score * indicator.weight;\r\n            totalWeight += indicator.weight;\r\n        }\r\n        \r\n        return totalWeight > 0 ? Math.round(totalWeightedScore / totalWeight) : 0;\r\n    }\r\n\r\n    private static getHealthLevel(score: number): 'excellent' | 'good' | 'fair' | 'limited' | 'critical' {\r\n        if (score >= 80) return 'excellent';\r\n        if (score >= 65) return 'good';\r\n        if (score >= 50) return 'fair';\r\n        if (score >= 35) return 'limited';\r\n        return 'critical';\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 3: Emergency Savings Adequacy\r\n     */\r\n    private static analyzeEmergencySavings(data: UserFinancialData, keyMetrics: any): HealthIndicator {\r\n        const emergencyFundMonths = keyMetrics.emergencyFundMonths;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        if (emergencyFundMonths >= 6) {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (emergencyFundMonths >= 3) {\r\n            score = 80;\r\n            status = 'good';\r\n        } else if (emergencyFundMonths >= 1) {\r\n            score = 60;\r\n            status = 'fair';\r\n        } else if (emergencyFundMonths > 0) {\r\n            score = 30;\r\n            status = 'poor';\r\n        } else {\r\n            score = 0;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Emergency Savings',\r\n            score,\r\n            status,\r\n            weight: 20,\r\n            metrics: [\r\n                {\r\n                    title: 'Emergency Fund Coverage',\r\n                    value: `${emergencyFundMonths.toFixed(1)} months`,\r\n                    numericValue: emergencyFundMonths,\r\n                    description: 'How many months of expenses your liquid savings can cover',\r\n                    status,\r\n                    benchmark: 'Target: 3-6 months'\r\n                },\r\n                {\r\n                    title: 'Total Liquid Assets',\r\n                    value: this.formatCurrency(data.assets.checking + data.assets.savings + \r\n                                              data.assets.moneyMarket + data.assets.emergencyFund),\r\n                    numericValue: data.assets.checking + data.assets.savings + \r\n                                 data.assets.moneyMarket + data.assets.emergencyFund,\r\n                    description: 'Cash and easily accessible funds',\r\n                    status\r\n                }\r\n            ],\r\n            recommendations: this.getEmergencyFundRecommendations(emergencyFundMonths, this.getTotalMonthlyExpenses(data.expenses)),\r\n            explanation: `This measures your financial cushion for unexpected events. You have ${emergencyFundMonths.toFixed(1)} months of expenses saved, giving you a score of ${score}/100. The standard recommendation is 3-6 months.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 5: Credit Score Health\r\n     */\r\n    private static analyzeCreditHealth(data: UserFinancialData, keyMetrics: any): HealthIndicator {\r\n        const creditScore = data.liabilities.creditScore;\r\n        const creditUtilization = keyMetrics.creditUtilization;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        if (creditScore >= 800 && creditUtilization <= 10) {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (creditScore >= 740 && creditUtilization <= 30) {\r\n            score = 80;\r\n            status = 'good';\r\n        } else if (creditScore >= 670) {\r\n            score = 60;\r\n            status = 'fair';\r\n        } else if (creditScore >= 580) {\r\n            score = 40;\r\n            status = 'poor';\r\n        } else {\r\n            score = 20;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Credit Health',\r\n            score,\r\n            status,\r\n            weight: 10,\r\n            metrics: [\r\n                {\r\n                    title: 'Credit Score',\r\n                    value: creditScore.toString(),\r\n                    numericValue: creditScore,\r\n                    description: 'Your current credit score',\r\n                    status: this.getCreditScoreStatus(creditScore),\r\n                    benchmark: 'Excellent: 800+, Good: 740-799, Fair: 670-739'\r\n                },\r\n                {\r\n                    title: 'Credit Utilization',\r\n                    value: `${creditUtilization.toFixed(1)}%`,\r\n                    numericValue: creditUtilization,\r\n                    description: 'Percentage of available credit you are using',\r\n                    status: this.getCreditUtilizationStatus(keyMetrics.creditUtilization),\r\n                    benchmark: 'Target: Below 30%'\r\n                }\r\n            ],\r\n            recommendations: this.getCreditHealthRecommendations(data.liabilities.creditScore, keyMetrics.creditUtilization),\r\n            explanation: `This reflects your creditworthiness. With a credit score of ${data.liabilities.creditScore} and a utilization of ${keyMetrics.creditUtilization.toFixed(1)}%, your score is ${score}/100. Both are key factors in your financial health.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 6: Insurance Coverage Confidence\r\n     */\r\n    private static analyzeInsuranceConfidence(data: UserFinancialData): HealthIndicator {\r\n        const hasHealthInsurance = data.insurance.healthInsurance;\r\n        const hasLifeInsurance = data.insurance.lifeInsurance;\r\n        const hasDisabilityInsurance = data.insurance.shortTermDisability || data.insurance.longTermDisability;\r\n        const confidence = data.insurance.insuranceConfidence;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        const insuranceCount = (hasHealthInsurance ? 1 : 0) + (hasLifeInsurance ? 1 : 0) + (hasDisabilityInsurance ? 1 : 0);\r\n        \r\n        if (insuranceCount === 3 && confidence === 'very-confident') {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (insuranceCount >= 2 && confidence !== 'not-confident') {\r\n            score = 80;\r\n            status = 'good';\r\n        } else if (insuranceCount >= 1) {\r\n            score = 60;\r\n            status = 'fair';\r\n        } else if (hasHealthInsurance) {\r\n            score = 40;\r\n            status = 'poor';\r\n        } else {\r\n            score = 20;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Insurance Confidence',\r\n            score,\r\n            status,\r\n            weight: 10,\r\n            metrics: [\r\n                {\r\n                    title: 'Self-Reported Confidence',\r\n                    value: this.formatConfidenceText(confidence),\r\n                    description: 'Your confidence in your insurance coverage',\r\n                    status\r\n                }\r\n            ],\r\n            recommendations: this.getInsuranceRecommendations(data.insurance),\r\n            explanation: `This measures your confidence in being protected from financial shocks. Your reported confidence level gives you a score of ${score}/100.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 7: Long-term Financial Goal Confidence\r\n     */\r\n    private static analyzeLongTermGoalConfidence(data: UserFinancialData): HealthIndicator {\r\n        const retirementConfidence = data.goals.retirementConfidence;\r\n        const hasRetirementSavings = (data.assets.employer401k + data.assets.traditionalIRA + data.assets.rothIRA) > 0;\r\n        const monthlyInvestment = data.behaviors.monthlyInvestmentContribution;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        if (retirementConfidence === 'very-confident' && hasRetirementSavings && monthlyInvestment > 0) {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (retirementConfidence === 'somewhat-confident' && hasRetirementSavings) {\r\n            score = 75;\r\n            status = 'good';\r\n        } else if (hasRetirementSavings || monthlyInvestment > 0) {\r\n            score = 50;\r\n            status = 'fair';\r\n        } else if (retirementConfidence !== 'not-confident') {\r\n            score = 25;\r\n            status = 'poor';\r\n        } else {\r\n            score = 0;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Long-term Goal Confidence',\r\n            score,\r\n            status,\r\n            weight: 10,\r\n            metrics: [\r\n                {\r\n                    title: 'Retirement Confidence',\r\n                    value: this.formatConfidenceText(retirementConfidence),\r\n                    description: 'Your confidence in your retirement savings plan',\r\n                    status,\r\n                    benchmark: 'Target: Very confident with active saving'\r\n                },\r\n                {\r\n                    title: 'Monthly Investment',\r\n                    value: this.formatCurrency(monthlyInvestment),\r\n                    numericValue: monthlyInvestment,\r\n                    description: 'Monthly investment contribution',\r\n                    status: monthlyInvestment > 500 ? 'excellent' : monthlyInvestment > 0 ? 'good' : 'poor',\r\n                    benchmark: 'Target: 10-15% of income'\r\n                }\r\n            ],\r\n            recommendations: this.getRetirementRecommendations(data.goals, monthlyInvestment),\r\n            explanation: `This assesses your confidence in reaching long-term financial goals like retirement. Your reported confidence results in a score of ${score}/100.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 8: Financial Planning Engagement\r\n     */\r\n    private static analyzeFinancialPlanningEngagement(data: UserFinancialData): HealthIndicator {\r\n        const budgeting = data.behaviors.budgetingMethod;\r\n        const planning = data.behaviors.financialPlanningEngagement;\r\n\r\n        let budgetScore = 0;\r\n        switch (budgeting) {\r\n            case 'detailed-budget': budgetScore = 100; break;\r\n            case 'simple-tracking': budgetScore = 75; break;\r\n            case 'mental-budget': budgetScore = 40; break;\r\n            case 'no-budget': budgetScore = 0; break;\r\n        }\r\n\r\n        let planningScore = 0;\r\n        switch (planning) {\r\n            case 'actively-plan': planningScore = 100; break;\r\n            case 'occasionally-plan': planningScore = 70; break;\r\n            case 'rarely-plan': planningScore = 30; break;\r\n            case 'never-plan': planningScore = 0; break;\r\n        }\r\n\r\n        const score = Math.round((budgetScore * 0.5) + (planningScore * 0.5));\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n\r\n        if (score >= 90) {\r\n            status = 'excellent';\r\n        } else if (score >= 70) {\r\n            status = 'good';\r\n        } else if (score >= 50) {\r\n            status = 'fair';\r\n        } else if (score >= 20) {\r\n            status = 'poor';\r\n        }\r\n\r\n        return {\r\n            name: 'Financial Planning Engagement',\r\n            score,\r\n            status,\r\n            weight: 10,\r\n            metrics: [\r\n                {\r\n                    title: 'Budgeting Method',\r\n                    value: this.formatBudgetText(budgeting),\r\n                    description: 'How you manage your budget',\r\n                    status: score >= 70 ? 'good' : 'poor'\r\n                },\r\n                {\r\n                    title: 'Planning Engagement',\r\n                    value: this.formatPlanningText(planning),\r\n                    description: 'How actively you plan your finances',\r\n                    status: score >= 70 ? 'good' : 'poor'\r\n                }\r\n            ],\r\n            recommendations: this.getPlanningRecommendations(budgeting, planning),\r\n            explanation: `This measures how actively you are planning and tracking your finances. Your approach gives you a score of ${score}/100.`\r\n        };\r\n    }\r\n\r\n    // Helper calculation methods\r\n    private static calculateAssetAllocationScore(data: UserFinancialData): number {\r\n        const totalInvestments = data.assets.employer401k + data.assets.traditionalIRA + \r\n                               data.assets.rothIRA + data.assets.brokerageAccounts + data.assets.stocks;\r\n        const totalAssets = this.getTotalAssets(data.assets);\r\n        \r\n        if (totalAssets === 0) return 0;\r\n        \r\n        const investmentRatio = totalInvestments / totalAssets;\r\n        const age = data.personalInfo.age;\r\n        const targetStockAllocation = (100 - age) / 100;\r\n        \r\n        const allocationScore = Math.max(0, 100 - Math.abs(investmentRatio - targetStockAllocation) * 200);\r\n        return Math.round(allocationScore);\r\n    }\r\n\r\n    /**\r\n     * Enhanced Liquidity Analysis\r\n     */\r\n    private static analyzeLiquidity(data: UserFinancialData, _keyMetrics: any): FinancialMetric[] {\r\n        const totalLiquidAssets = data.assets.checking + data.assets.savings + \r\n                                 data.assets.moneyMarket + data.assets.emergencyFund;\r\n        const monthlyExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const liquidityRatio = monthlyExpenses > 0 ? totalLiquidAssets / monthlyExpenses : 0;\r\n        \r\n        return [\r\n            {\r\n                title: 'Liquid Assets',\r\n                value: this.formatCurrency(totalLiquidAssets),\r\n                numericValue: totalLiquidAssets,\r\n                description: 'Cash and cash equivalents available immediately',\r\n                status: totalLiquidAssets >= monthlyExpenses * 6 ? 'excellent' : \r\n                       totalLiquidAssets >= monthlyExpenses * 3 ? 'good' : 'poor',\r\n                benchmark: 'Target: 6+ months of expenses'\r\n            },\r\n            {\r\n                title: 'Liquidity Ratio',\r\n                value: `${liquidityRatio.toFixed(1)} months`,\r\n                numericValue: liquidityRatio,\r\n                description: 'Months of expenses covered by liquid assets',\r\n                status: liquidityRatio >= 6 ? 'excellent' : liquidityRatio >= 3 ? 'good' : 'poor',\r\n                benchmark: 'Excellent: 6+ months, Good: 3-6 months'\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Enhanced Debt Analysis\r\n     */\r\n    private static analyzeDebt(data: UserFinancialData, keyMetrics: any): FinancialMetric[] {\r\n        const totalDebt = this.getTotalDebt(data.liabilities);\r\n        const debtToIncomeRatio = keyMetrics.debtToIncomeRatio;\r\n        const creditUtilization = keyMetrics.creditUtilization;\r\n        \r\n        return [\r\n            {\r\n                title: 'Total Debt',\r\n                value: this.formatCurrency(totalDebt),\r\n                numericValue: totalDebt,\r\n                description: 'All outstanding debt obligations',\r\n                status: debtToIncomeRatio <= 20 ? 'excellent' : debtToIncomeRatio <= 36 ? 'good' : 'poor',\r\n                benchmark: 'Target: <20% of annual income'\r\n            },\r\n            {\r\n                title: 'Debt-to-Income Ratio',\r\n                value: `${debtToIncomeRatio.toFixed(1)}%`,\r\n                numericValue: debtToIncomeRatio,\r\n                description: 'Total debt as percentage of annual income',\r\n                status: debtToIncomeRatio <= 20 ? 'excellent' : debtToIncomeRatio <= 36 ? 'good' : 'poor',\r\n                benchmark: 'Excellent: <20%, Good: 20-36%, Poor: >36%'\r\n            },\r\n            {\r\n                title: 'Credit Utilization',\r\n                value: `${creditUtilization.toFixed(1)}%`,\r\n                numericValue: creditUtilization,\r\n                description: 'Credit card balances vs available credit',\r\n                status: creditUtilization <= 10 ? 'excellent' : creditUtilization <= 30 ? 'good' : 'poor',\r\n                benchmark: 'Excellent: <10%, Good: 10-30%, Poor: >30%'\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Enhanced Investment Analysis\r\n     */\r\n    private static analyzeInvestments(data: UserFinancialData, keyMetrics: any): FinancialMetric[] {\r\n        const totalInvestments = data.assets.employer401k + data.assets.traditionalIRA + \r\n                               data.assets.rothIRA + data.assets.brokerageAccounts + \r\n                               data.assets.stocks + data.assets.bonds + data.assets.mutualFunds;\r\n        const monthlyIncome = this.getTotalMonthlyIncome(data.income);\r\n        const investmentRate = monthlyIncome > 0 ? (data.behaviors.monthlyInvestmentContribution / monthlyIncome) * 100 : 0;\r\n        const age = data.personalInfo.age;\r\n        const targetStockAllocation = 110 - age; // Rule of thumb: 110 - age = stock %\r\n        \r\n        return [\r\n            {\r\n                title: 'Total Investments',\r\n                value: this.formatCurrency(totalInvestments),\r\n                numericValue: totalInvestments,\r\n                description: 'All investment accounts and securities',\r\n                status: investmentRate >= 15 ? 'excellent' : investmentRate >= 10 ? 'good' : 'poor',\r\n                benchmark: 'Target: 15%+ of income invested monthly'\r\n            },\r\n            {\r\n                title: 'Investment Rate',\r\n                value: `${investmentRate.toFixed(1)}%`,\r\n                numericValue: investmentRate,\r\n                description: 'Monthly investment as percentage of income',\r\n                status: investmentRate >= 15 ? 'excellent' : investmentRate >= 10 ? 'good' : 'poor',\r\n                benchmark: 'Excellent: 15%+, Good: 10-15%, Poor: <10%'\r\n            },\r\n            {\r\n                title: 'Asset Allocation Score',\r\n                value: `${keyMetrics.assetAllocationScore}/100`,\r\n                numericValue: keyMetrics.assetAllocationScore,\r\n                description: 'How well diversified your investments are',\r\n                status: keyMetrics.assetAllocationScore >= 80 ? 'excellent' : \r\n                       keyMetrics.assetAllocationScore >= 60 ? 'good' : 'poor',\r\n                benchmark: `Target stock allocation for age ${age}: ~${targetStockAllocation}%`\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Enhanced Insurance Analysis\r\n     */\r\n    private static analyzeInsurance(data: UserFinancialData): FinancialMetric[] {\r\n        const hasHealthInsurance = data.personalInfo.healthInsurance;\r\n        const hasLifeInsurance = data.personalInfo.lifeInsurance;\r\n        const hasDisabilityInsurance = data.personalInfo.shortTermDisability || data.personalInfo.longTermDisability;\r\n        const dependents = data.personalInfo.dependents;\r\n        \r\n        const coverageScore = (hasHealthInsurance ? 40 : 0) + \r\n                            (hasLifeInsurance && dependents > 0 ? 30 : dependents === 0 ? 30 : 0) + \r\n                            (hasDisabilityInsurance ? 30 : 0);\r\n        \r\n        return [\r\n            {\r\n                title: 'Insurance Coverage Score',\r\n                value: `${coverageScore}/100`,\r\n                numericValue: coverageScore,\r\n                description: 'Overall adequacy of insurance protection',\r\n                status: coverageScore >= 90 ? 'excellent' : coverageScore >= 70 ? 'good' : 'poor',\r\n                benchmark: 'Target: 90+ (Health + Life + Disability)'\r\n            },\r\n            {\r\n                title: 'Essential Coverage',\r\n                value: hasHealthInsurance ? 'Health ✓' : 'Health ✗',\r\n                description: 'Health insurance status',\r\n                status: hasHealthInsurance ? 'excellent' : 'critical',\r\n                benchmark: 'Required: Health insurance is essential'\r\n            },\r\n            {\r\n                title: 'Income Protection',\r\n                value: hasDisabilityInsurance ? 'Disability ✓' : 'Disability ✗',\r\n                description: 'Disability insurance status',\r\n                status: hasDisabilityInsurance ? 'good' : 'poor',\r\n                benchmark: 'Recommended: Protect 60-70% of income'\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Enhanced Wealth Projections\r\n     */\r\n    private static projectWealth(data: UserFinancialData, _keyMetrics: any): WealthProjection[] {\r\n        const currentAge = data.personalInfo.age;\r\n        const retirementAge = data.goals.retirementAge;\r\n        const yearsToRetirement = retirementAge - currentAge;\r\n        const monthlyInvestment = data.behaviors.monthlyInvestmentContribution;\r\n        const currentInvestments = data.assets.employer401k + data.assets.traditionalIRA + \r\n                                 data.assets.rothIRA + data.assets.brokerageAccounts;\r\n        \r\n        // Conservative projection at 6% annual return\r\n        const conservativeReturn = 0.06;\r\n        const moderateReturn = 0.08;\r\n        const aggressiveReturn = 0.10;\r\n        \r\n        const projections: WealthProjection[] = [];\r\n        const scenarios = [\r\n            { name: 'Conservative (6%)', rate: conservativeReturn },\r\n            { name: 'Moderate (8%)', rate: moderateReturn },\r\n            { name: 'Aggressive (10%)', rate: aggressiveReturn }\r\n        ];\r\n        \r\n        scenarios.forEach(scenario => {\r\n            const monthlyRate = scenario.rate / 12;\r\n            const months = yearsToRetirement * 12;\r\n            \r\n            // Future value of current investments\r\n            const futureValueCurrent = currentInvestments * Math.pow(1 + scenario.rate, yearsToRetirement);\r\n            \r\n            // Future value of monthly contributions (annuity)\r\n            const futureValueContributions = monthlyInvestment * \r\n                ((Math.pow(1 + monthlyRate, months) - 1) / monthlyRate);\r\n            \r\n            const totalProjected = futureValueCurrent + futureValueContributions;\r\n            \r\n            projections.push({\r\n                scenario: scenario.name,\r\n                timeframe: `${yearsToRetirement} years`,\r\n                projectedValue: totalProjected,\r\n                monthlyContribution: monthlyInvestment,\r\n                assumptions: `${(scenario.rate * 100).toFixed(0)}% annual return, ${monthlyInvestment > 0 ? '$' + monthlyInvestment.toLocaleString() : '$0'} monthly`\r\n            });\r\n        });\r\n        \r\n        return projections;\r\n    }\r\n\r\n    /**\r\n     * Enhanced Scenario Analysis\r\n     */\r\n    private static analyzeScenarios(data: UserFinancialData, _keyMetrics: any): ScenarioAnalysis[] {\r\n        const monthlyExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const emergencyFund = data.assets.emergencyFund + data.assets.savings;\r\n        \r\n        return [\r\n            {\r\n                scenario: 'Job Loss',\r\n                impact: 'High',\r\n                description: 'Complete loss of primary income',\r\n                timeToRecover: emergencyFund > 0 ? `${(emergencyFund / monthlyExpenses).toFixed(1)} months` : '0 months',\r\n                recommendations: [\r\n                    'Build emergency fund to 6 months of expenses',\r\n                    'Consider disability insurance',\r\n                    'Diversify income sources'\r\n                ],\r\n                probability: 'Medium'\r\n            },\r\n            {\r\n                scenario: 'Market Downturn (-30%)',\r\n                impact: 'Medium',\r\n                description: '30% decline in investment portfolio',\r\n                timeToRecover: '2-3 years historically',\r\n                recommendations: [\r\n                    'Maintain diversified portfolio',\r\n                    'Continue regular investing (dollar-cost averaging)',\r\n                    'Avoid panic selling'\r\n                ],\r\n                probability: 'High (occurs every 5-10 years)'\r\n            },\r\n            {\r\n                scenario: 'Major Medical Emergency',\r\n                impact: 'High',\r\n                description: 'Unexpected medical expenses',\r\n                timeToRecover: 'Depends on insurance coverage',\r\n                recommendations: [\r\n                    'Ensure adequate health insurance',\r\n                    'Build separate medical emergency fund',\r\n                    'Consider HSA contributions'\r\n                ],\r\n                probability: 'Medium'\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Generate more detailed financial analysis for the user\r\n     * - Net worth breakdown, savings rate, debt structure, expense categorization, investment diversification, insurance adequacy, peer benchmarks, scenario/stress testing\r\n     * - All calculations robust to edge cases\r\n     */\r\n    private static generateDetailedInsights(data: UserFinancialData, keyMetrics: any, _healthIndicators: HealthIndicator[]): any {\r\n        // Defensive: handle missing/invalid data\r\n        const assets = data.assets || {};\r\n        const liabilities = data.liabilities || {};\r\n        const expenses = data.expenses || {};\r\n        const investments = {\r\n            '401k': assets.employer401k || 0,\r\n            'IRA': (assets.traditionalIRA || 0) + (assets.rothIRA || 0),\r\n            'Brokerage': assets.brokerageAccounts || 0,\r\n            'Stocks': assets.stocks || 0,\r\n            'Bonds': assets.bonds || 0,\r\n            'Mutual Funds': assets.mutualFunds || 0,\r\n            'Crypto': assets.cryptocurrency || 0,\r\n            'Real Estate': assets.primaryResidence || 0 + assets.investmentProperties || 0\r\n        };\r\n        const debtStructure = {\r\n            'Secured Debt': (liabilities.mortgageBalance || 0) + (liabilities.homeEquityLoan || 0) + (liabilities.autoLoans || 0) + (liabilities.securedCreditLines || 0),\r\n            'Unsecured Debt': (liabilities.creditCardDebt || 0) + (liabilities.personalLoans || 0) + (liabilities.studentLoans || 0) + (liabilities.medicalDebt || 0),\r\n            'Business Debt': (liabilities.businessLoans || 0) + (liabilities.businessCreditLines || 0),\r\n            'Other Debt': (liabilities.taxDebt || 0) + (liabilities.legalJudgments || 0) + (liabilities.otherDebt || 0)\r\n        };\r\n        const expenseCategories = {\r\n            'Fixed': (expenses.housing || 0) + (expenses.utilities || 0) + (expenses.insurance || 0) + (expenses.loanPayments || 0) + (expenses.childcare || 0),\r\n            'Variable': (expenses.food || 0) + (expenses.transportation || 0) + (expenses.healthcare || 0) + (expenses.clothing || 0) + (expenses.personalCare || 0),\r\n            'Discretionary': (expenses.entertainment || 0) + (expenses.diningOut || 0) + (expenses.hobbies || 0) + (expenses.subscriptions || 0) + (expenses.shopping || 0) + (expenses.travel || 0)\r\n        };\r\n        // Peer benchmarks, scenario/stress testing, and insurance adequacy are already included in other sections, but can be summarized here\r\n        return {\r\n            netWorthBreakdown: {\r\n                totalAssets: this.getTotalAssets(assets),\r\n                totalLiabilities: this.getTotalLiabilities(liabilities),\r\n                netWorth: keyMetrics.netWorth\r\n            },\r\n            savingsRate: keyMetrics.savingsRate,\r\n            debtStructure,\r\n            expenseCategories,\r\n            investmentBreakdown: investments,\r\n            insuranceAdequacy: data.insurance || {},\r\n            peerBenchmarks: keyMetrics.peerBenchmarks || {},\r\n            scenarioAnalysis: keyMetrics.scenarioAnalysis || []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Calculate Financial Ratios\r\n     */\r\n    private static calculateFinancialRatios(data: UserFinancialData, keyMetrics: any): any {\r\n        const monthlyIncome = this.getTotalMonthlyIncome(data.income);\r\n        const monthlyExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const totalAssets = this.getTotalAssets(data.assets);\r\n        const totalLiabilities = this.getTotalLiabilities(data.liabilities);\r\n        \r\n        return {\r\n            liquidityRatios: {\r\n                currentRatio: totalLiabilities > 0 ? (data.assets.checking + data.assets.savings) / totalLiabilities : 0,\r\n                quickRatio: totalLiabilities > 0 ? data.assets.checking / totalLiabilities : 0,\r\n                emergencyFundRatio: keyMetrics.emergencyFundMonths\r\n            },\r\n            leverageRatios: {\r\n                debtToAssetRatio: totalAssets > 0 ? (totalLiabilities / totalAssets) * 100 : 0,\r\n                debtToIncomeRatio: keyMetrics.debtToIncomeRatio,\r\n                equityRatio: totalAssets > 0 ? ((totalAssets - totalLiabilities) / totalAssets) * 100 : 0\r\n            },\r\n            efficiencyRatios: {\r\n                savingsRate: keyMetrics.savingsRate,\r\n                expenseRatio: monthlyIncome > 0 ? (monthlyExpenses / monthlyIncome) * 100 : 0,\r\n                investmentRate: monthlyIncome > 0 ? (data.behaviors.monthlyInvestmentContribution / monthlyIncome) * 100 : 0\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Assess Financial Risk\r\n     */\r\n    private static assessFinancialRisk(data: UserFinancialData, keyMetrics: any): any {\r\n        const risks: { category: string; level: string; description: string; mitigation: string }[] = [];\r\n        \r\n        // Income risk\r\n        if (data.income.secondaryIncome === 0 && data.income.businessIncome === 0) {\r\n            risks.push({\r\n                category: 'Income Concentration',\r\n                level: 'High',\r\n                description: 'Dependent on single income source',\r\n                mitigation: 'Develop multiple income streams or enhance job security'\r\n            });\r\n        }\r\n        \r\n        // Liquidity risk\r\n        if (keyMetrics.emergencyFundMonths < 3) {\r\n            risks.push({\r\n                category: 'Liquidity Risk',\r\n                level: 'High',\r\n                description: 'Insufficient emergency funds',\r\n                mitigation: 'Build emergency fund to 6 months of expenses'\r\n            });\r\n        }\r\n        \r\n        // Credit risk\r\n        if (keyMetrics.creditUtilization > 30) {\r\n            risks.push({\r\n                category: 'Credit Risk',\r\n                level: 'Medium',\r\n                description: 'High credit utilization',\r\n                mitigation: 'Pay down credit card balances or increase credit limits'\r\n            });\r\n        }\r\n        \r\n        return {\r\n            overallRiskLevel: 'unknown',\r\n            riskFactors: risks\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Analyze Financial Goals\r\n     */\r\n    private static analyzeFinancialGoals(data: UserFinancialData, keyMetrics: any): any {\r\n        const currentAge = data.personalInfo.age;\r\n        const retirementAge = data.goals.retirementAge;\r\n        const yearsToRetirement = retirementAge - currentAge;\r\n        const monthlyInvestment = data.behaviors.monthlyInvestmentContribution;\r\n        \r\n        return {\r\n            retirementReadiness: {\r\n                yearsToRetirement,\r\n                currentSavings: data.assets.employer401k + data.assets.traditionalIRA + data.assets.rothIRA,\r\n                monthlyContribution: monthlyInvestment,\r\n                projectedValue: this.calculateRetirementProjection(data, keyMetrics),\r\n                onTrack: this.isRetirementOnTrack(data, keyMetrics)\r\n            },\r\n            emergencyGoal: {\r\n                target: this.getTotalMonthlyExpenses(data.expenses) * 6,\r\n                current: data.assets.emergencyFund + data.assets.savings,\r\n                progress: keyMetrics.emergencyFundMonths / 6 * 100,\r\n                timeToGoal: this.calculateTimeToEmergencyGoal(data, keyMetrics)\r\n            }\r\n        };\r\n    }\r\n\r\n    // Helper methods for the new analysis functions\r\n    private static calculateRetirementProjection(data: UserFinancialData, _keyMetrics: any): number {\r\n        const currentAge = data.personalInfo.age;\r\n        const retirementAge = data.goals.retirementAge;\r\n        const yearsToRetirement = retirementAge - currentAge;\r\n        const monthlyInvestment = data.behaviors.monthlyInvestmentContribution;\r\n        const currentSavings = data.assets.employer401k + data.assets.traditionalIRA + data.assets.rothIRA;\r\n        \r\n        // Assuming 7% annual return\r\n        const annualReturn = 0.07;\r\n        const futureValue = currentSavings * Math.pow(1 + annualReturn, yearsToRetirement);\r\n        const annuityValue = monthlyInvestment * 12 * (Math.pow(1 + annualReturn, yearsToRetirement) - 1) / annualReturn;\r\n        \r\n        return futureValue + annuityValue;\r\n    }\r\n\r\n    private static isRetirementOnTrack(data: UserFinancialData, keyMetrics: any): boolean {\r\n        const projectedValue = this.calculateRetirementProjection(data, keyMetrics);\r\n        const targetValue = data.goals.retirementIncomeNeeded * 25; // 4% rule\r\n        \r\n        return projectedValue >= targetValue;\r\n    }\r\n\r\n    private static calculateTimeToEmergencyGoal(data: UserFinancialData, keyMetrics: any): string {\r\n        const target = this.getTotalMonthlyExpenses(data.expenses) * 6;\r\n        const current = data.assets.emergencyFund + data.assets.savings;\r\n        const needed = target - current;\r\n        \r\n        if (needed <= 0) return 'Goal achieved';\r\n        if (keyMetrics.monthlyCashFlow <= 0) return 'Cannot achieve with current cash flow';\r\n        \r\n        const months = Math.ceil(needed / keyMetrics.monthlyCashFlow);\r\n        return `${months} months at current savings rate`;\r\n    }\r\n\r\n    private static calculatePeerBenchmarks(data: UserFinancialData): any { \r\n        return {\r\n            ageGroup: `${Math.floor(data.personalInfo.age / 10) * 10}s`,\r\n            incomeGroup: 'Middle Income',\r\n            netWorthPercentile: 50,\r\n            savingsRatePercentile: 45,\r\n            debtRatioPercentile: 55\r\n        };\r\n    }\r\n    \r\n    // Status helper methods\r\n    private static getCreditScoreStatus(score: number): 'excellent' | 'good' | 'fair' | 'poor' | 'critical' {\r\n        if (score >= 800) return 'excellent';\r\n        if (score >= 740) return 'good';\r\n        if (score >= 670) return 'fair';\r\n        if (score >= 580) return 'poor';\r\n        return 'critical';\r\n    }\r\n    \r\n    // Recommendation methods\r\n    private static getSpendingRecommendations(ratio: number): string[] { \r\n        if (ratio < 5) {\r\n            return [\r\n                'Immediate action needed: Create a strict budget to reduce expenses',\r\n                'Consider increasing income through side work or skills development',\r\n                'Review all subscriptions and discretionary spending'\r\n            ];\r\n        } else if (ratio < 10) {\r\n            return [\r\n                'Look for areas to cut unnecessary expenses',\r\n                'Consider ways to increase your income',\r\n                'Build an emergency fund as a priority'\r\n            ];\r\n        }\r\n        return ['Great job maintaining positive cash flow!'];\r\n    }\r\n    \r\n    private static getPaymentReliabilityRecommendations(reliability: string): string[] { \r\n        if (reliability === 'often-late' || reliability === 'sometimes-late') {\r\n            return [\r\n                'Set up automatic bill payments to improve payment history',\r\n                'Create a bill payment calendar with due dates',\r\n                'Consider consolidating due dates to simplify management'\r\n            ];\r\n        }\r\n        return ['Keep up the excellent payment history!'];\r\n    }\r\n\r\n    /**\r\n     * Get actionable, research-based recommendations for emergency fund\r\n     * Prevents $NaN by checking for valid numbers and zero expenses\r\n     */\r\n    private static getEmergencyFundRecommendations(months: number, monthlyExpenses?: number): string[] {\r\n        if (typeof months !== 'number' || isNaN(months) || months < 0) months = 0;\r\n        if (typeof monthlyExpenses !== 'number' || isNaN(monthlyExpenses) || monthlyExpenses <= 0) {\r\n            return [\r\n                'Unable to calculate additional savings needed due to missing or invalid expense data. Please review your expense inputs.'\r\n            ];\r\n        }\r\n        if (months >= 6) return ['You have a strong emergency fund. Maintain your current savings habits.'];\r\n        if (months >= 3) return ['Your emergency fund is solid. Consider increasing to 6 months for extra security.'];\r\n        const needed = Math.max(0, Math.round((3 - months) * monthlyExpenses));\r\n        if (isNaN(needed) || needed < 0) {\r\n            return ['Unable to calculate additional savings needed due to invalid data.'];\r\n        }\r\n        return [\r\n            `You currently have ${!isNaN(months) ? months.toFixed(1) : 'N/A'} months of expenses saved. While this is a good start, aiming for at least 3 months provides a much stronger safety net. You need to save approximately $${!isNaN(needed) ? needed.toLocaleString() : 'N/A'} more to reach this goal.`\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Get actionable, research-based recommendations for debt management\r\n     * - <20%: Maintain current habits\r\n     * - 20-28%: Monitor and avoid new debt\r\n     * - 28-36%: Reduce discretionary spending, pay down high-interest debt\r\n     * - 36-43%: Aggressively pay down debt, consider consolidation\r\n     * - >43%: Seek professional help, create a debt reduction plan\r\n     */\r\n    private static getDebtManagementRecommendations(ratio: number): string[] {\r\n        if (ratio < 0.2) return ['Maintain your current debt management habits.'];\r\n        if (ratio < 0.28) return ['Monitor your debt and avoid taking on new obligations.'];\r\n        if (ratio < 0.36) return [\r\n            'Reduce discretionary spending to free up cash for debt payments.',\r\n            'Prioritize paying down high-interest debt.'\r\n        ];\r\n        if (ratio < 0.43) return [\r\n            'Aggressively pay down debt to lower your debt-to-income ratio.',\r\n            'Consider debt consolidation or refinancing options.'\r\n        ];\r\n        return [\r\n            'Seek professional financial counseling or debt management assistance.',\r\n            'Create a strict debt reduction plan and avoid new debt.'\r\n        ];\r\n    }\r\n\r\n    private static getCreditHealthRecommendations(creditScore: number, utilization: number): string[] {\r\n        const recommendations: string[] = [];\r\n        \r\n        if (creditScore < 670) {\r\n            recommendations.push('Focus on improving credit score through on-time payments');\r\n            recommendations.push('Consider becoming an authorized user on a family member\\'s account');\r\n        }\r\n        \r\n        if (utilization > 30) {\r\n            recommendations.push('Reduce credit card balances to improve utilization ratio');\r\n            recommendations.push('Consider paying down cards or requesting credit limit increases');\r\n        }\r\n        \r\n        if (recommendations.length === 0) {\r\n            recommendations.push('Great credit health! Maintain current habits.');\r\n        }\r\n        \r\n        return recommendations;\r\n    }\r\n\r\n    private static getInsuranceRecommendations(insurance: any): string[] {\r\n        const recommendations: string[] = [];\r\n        \r\n        if (!insurance.healthInsurance) {\r\n            recommendations.push('Get health insurance immediately - essential protection');\r\n        }\r\n        if (!insurance.lifeInsurance) {\r\n            recommendations.push('Consider life insurance to protect dependents');\r\n        }\r\n        if (!insurance.shortTermDisability && !insurance.longTermDisability) {\r\n            recommendations.push('Consider disability insurance to protect your income');\r\n        }\r\n        \r\n        if (recommendations.length === 0) {\r\n            recommendations.push('Good insurance coverage! Review annually to ensure adequacy.');\r\n        }\r\n        \r\n        return recommendations;\r\n    }\r\n\r\n    private static getRetirementRecommendations(goals: any, monthlyInvestment: number): string[] {\r\n        const recommendations: string[] = [];\r\n        \r\n        if (monthlyInvestment === 0) {\r\n            recommendations.push('Start investing for retirement immediately, even small amounts help');\r\n            recommendations.push('Take advantage of employer 401(k) match if available');\r\n        } else if (monthlyInvestment < 500) {\r\n            recommendations.push('Consider increasing retirement contributions');\r\n            recommendations.push('Target 10-15% of income for retirement savings');\r\n        }\r\n        \r\n        if (goals.retirementConfidence !== 'very-confident') {\r\n            recommendations.push('Meet with financial advisor to create retirement plan');\r\n            recommendations.push('Use retirement calculators to estimate needs');\r\n        }\r\n        \r\n        if (recommendations.length === 0) {\r\n            recommendations.push('Excellent retirement planning! Stay on track.');\r\n        }\r\n        \r\n        return recommendations;\r\n    }\r\n\r\n    private static getPlanningRecommendations(budgeting: string, planning: string): string[] {\r\n        const recommendations: string[] = [];\r\n        \r\n        if (budgeting === 'no-budget') {\r\n            recommendations.push('Start with basic expense tracking using apps or spreadsheets');\r\n            recommendations.push('Create a simple budget to understand spending patterns');\r\n        } else if (budgeting === 'mental-budget') {\r\n            recommendations.push('Move to written budget for better accuracy');\r\n        }\r\n        \r\n        if (planning === 'never-plan' || planning === 'rarely-plan') {\r\n            recommendations.push('Set aside time monthly for financial planning');\r\n            recommendations.push('Start with simple goal-setting and progress tracking');\r\n        }\r\n        \r\n        if (recommendations.length === 0) {\r\n            recommendations.push('Great financial planning habits! Keep it up.');\r\n        }\r\n        \r\n        return recommendations;\r\n    }\r\n\r\n    private static getCreditUtilizationStatus(utilization: number): 'excellent' | 'good' | 'fair' | 'poor' | 'critical' {\r\n        if (utilization <= 10) return 'excellent';\r\n        if (utilization <= 30) return 'good';\r\n        if (utilization <= 50) return 'fair';\r\n        if (utilization <= 80) return 'poor';\r\n        return 'critical';\r\n    }\r\n\r\n    private static formatConfidenceText(confidence: string): string {\r\n        return confidence.replace(/-/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\r\n    }\r\n\r\n    private static formatBudgetText(budget: string): string {\r\n        const map: { [key: string]: string } = {\r\n            'detailed-budget': 'Detailed Budget',\r\n            'simple-tracking': 'Simple Tracking',\r\n            'mental-budget': 'Mental Budget',\r\n            'no-budget': 'No Budget'\r\n        };\r\n        return map[budget] || budget;\r\n    }\r\n\r\n    private static formatPlanningText(planning: string): string {\r\n        const map: { [key: string]: string } = {\r\n            'actively-plan': 'Actively Plan',\r\n            'occasionally-plan': 'Occasionally Plan',\r\n            'rarely-plan': 'Rarely Plan',\r\n            'never-plan': 'Never Plan'\r\n        };\r\n        return map[planning] || planning;\r\n    }\r\n\r\n    /**\r\n     * Validate that we're using actual user data, not mock/default values\r\n     */\r\n    private static validateUserData(data: UserFinancialData): void {\r\n        console.log('🔍 Data Validation - Verifying actual user inputs:', {\r\n            primarySalary: data.income.primarySalary,\r\n            housing: data.expenses.housing,\r\n            totalAssets: this.getTotalAssets(data.assets),\r\n            totalLiabilities: this.getTotalLiabilities(data.liabilities),\r\n            creditScore: data.liabilities.creditScore\r\n        });\r\n\r\n        // Log key calculations to ensure we're using real data\r\n        const totalIncome = this.getTotalMonthlyIncome(data.income);\r\n        const totalExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const cashFlow = totalIncome - totalExpenses;\r\n        \r\n        console.log('🔍 Calculated Metrics from User Data:', {\r\n            totalMonthlyIncome: totalIncome,\r\n            totalMonthlyExpenses: totalExpenses,\r\n            monthlyCashFlow: cashFlow,\r\n            emergencyFundMonths: totalExpenses > 0 ? (data.assets.checking + data.assets.savings + data.assets.emergencyFund) / totalExpenses : 0\r\n        });\r\n\r\n        // Validate critical inputs are not zero/default\r\n        if (data.income.primarySalary <= 0) {\r\n            throw new Error('Invalid data: Primary salary cannot be zero or negative');\r\n        }\r\n\r\n        if (data.liabilities.creditScore < 300 || data.liabilities.creditScore > 850) {\r\n            throw new Error('Invalid data: Credit score must be between 300 and 850');\r\n        }\r\n\r\n        console.log('✅ Data validation passed - using actual user inputs');\r\n    }\r\n} ","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!./shared-form-styles.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!./shared-form-styles.css\";\n       export default content && content.locals ? content.locals : undefined;\n","/**\r\n * Multi-Step Financial Data Collection Form\r\n * Comprehensive form based on 8 financial health indicators research\r\n *\r\n * @remarks\r\n * - Strictly typed, fully documented, and validated per project rules.\r\n * - All user input is validated and sanitized before use.\r\n * - UI/UX is mobile-first and accessible.\r\n */\r\n\r\nimport { FormStep, FormField } from '../../interfaces/form-types';\r\nimport { UserFinancialData } from '../../interfaces/core-types';\r\nimport '../shared-form-styles.css';\r\n\r\n/**\r\n * MultiStepForm\r\n * Renders and manages the comprehensive multi-step financial data form.\r\n */\r\nexport class MultiStepForm {\r\n    private currentStepIndex: number = 0;\r\n    private formData: Partial<UserFinancialData> = {};\r\n    private steps: FormStep[] = [];\r\n    private onDataChange?: (data: Partial<UserFinancialData>) => void;\r\n    private onComplete?: (data: UserFinancialData) => void;\r\n\r\n    /**\r\n     * Initializes the multi-step form.\r\n     * @param container - The DOM element to render the form into.\r\n     * @param callbacks - Optional callbacks for data change and completion.\r\n     */\r\n    constructor(\r\n        private container: HTMLElement,\r\n        callbacks?: {\r\n            onDataChange?: (data: Partial<UserFinancialData>) => void;\r\n            onComplete?: (data: UserFinancialData) => void;\r\n        }\r\n    ) {\r\n        this.onDataChange = callbacks?.onDataChange;\r\n        this.onComplete = callbacks?.onComplete;\r\n        this.initializeSteps();\r\n        this.initializeFormData();\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * Initializes the form steps with field definitions.\r\n     */\r\n    private initializeSteps(): void {\r\n        this.steps = [\r\n            {\r\n                id: 'personal-info',\r\n                title: 'Personal Information',\r\n                description: 'Tell us about yourself to personalize your analysis',\r\n                fields: [\r\n                    {\r\n                        id: 'age',\r\n                        type: 'number',\r\n                        label: 'Age',\r\n                        description: 'Your current age',\r\n                        required: true,\r\n                        value: 30,\r\n                        validation: { min: 18, max: 100 }\r\n                    },\r\n                    {\r\n                        id: 'maritalStatus',\r\n                        type: 'select',\r\n                        label: 'Marital Status',\r\n                        required: true,\r\n                        value: 'single',\r\n                        options: [\r\n                            { value: 'single', label: 'Single' },\r\n                            { value: 'married', label: 'Married' },\r\n                            { value: 'divorced', label: 'Divorced' },\r\n                            { value: 'widowed', label: 'Widowed' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        id: 'dependents',\r\n                        type: 'number',\r\n                        label: 'Number of Dependents',\r\n                        description: 'Children or others who depend on you financially',\r\n                        required: true,\r\n                        value: 0,\r\n                        validation: { min: 0, max: 10 }\r\n                    },\r\n                    {\r\n                        id: 'employmentStatus',\r\n                        type: 'select',\r\n                        label: 'Employment Status',\r\n                        required: true,\r\n                        value: 'employed',\r\n                        options: [\r\n                            { value: 'employed', label: 'Employed' },\r\n                            { value: 'self-employed', label: 'Self-Employed' },\r\n                            { value: 'unemployed', label: 'Unemployed' },\r\n                            { value: 'retired', label: 'Retired' },\r\n                            { value: 'student', label: 'Student' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        id: 'employmentTenure',\r\n                        type: 'number',\r\n                        label: 'Years at Current Job',\r\n                        description: 'How long have you been in your current position?',\r\n                        required: true,\r\n                        value: 3,\r\n                        validation: { min: 0, max: 50 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'income',\r\n                title: 'Income Sources',\r\n                description: 'All sources of monthly income',\r\n                fields: [\r\n                    {\r\n                        id: 'primarySalary',\r\n                        type: 'number',\r\n                        label: 'Primary Salary (Monthly)',\r\n                        description: 'Your main job salary after taxes',\r\n                        required: true,\r\n                        value: 5000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'secondaryIncome',\r\n                        type: 'number',\r\n                        label: 'Secondary Income (Monthly)',\r\n                        description: 'Part-time work, freelancing, side hustles',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 50 }\r\n                    },\r\n                    {\r\n                        id: 'businessIncome',\r\n                        type: 'number',\r\n                        label: 'Business Income (Monthly)',\r\n                        description: 'Net income from business ownership',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'investmentIncome',\r\n                        type: 'number',\r\n                        label: 'Investment Income (Monthly)',\r\n                        description: 'Dividends, interest, capital gains',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'rentalIncome',\r\n                        type: 'number',\r\n                        label: 'Rental Income (Monthly)',\r\n                        description: 'Net rental income from properties',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'benefitsIncome',\r\n                        type: 'number',\r\n                        label: 'Benefits Income (Monthly)',\r\n                        description: 'Social Security, disability, unemployment',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 50 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'expenses',\r\n                title: 'Monthly Expenses',\r\n                description: 'Break down your monthly spending',\r\n                fields: [\r\n                    {\r\n                        id: 'housing',\r\n                        type: 'number',\r\n                        label: 'Housing (Rent/Mortgage)',\r\n                        description: 'Monthly housing payment',\r\n                        required: true,\r\n                        value: 1500,\r\n                        validation: { min: 0, step: 50 }\r\n                    },\r\n                    {\r\n                        id: 'utilities',\r\n                        type: 'number',\r\n                        label: 'Utilities',\r\n                        description: 'Electric, gas, water, internet, phone',\r\n                        required: true,\r\n                        value: 200,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'food',\r\n                        type: 'number',\r\n                        label: 'Food & Groceries',\r\n                        description: 'Monthly food spending',\r\n                        required: true,\r\n                        value: 400,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'transportation',\r\n                        type: 'number',\r\n                        label: 'Transportation',\r\n                        description: 'Car payment, gas, insurance, public transit',\r\n                        required: true,\r\n                        value: 300,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'healthcare',\r\n                        type: 'number',\r\n                        label: 'Healthcare',\r\n                        description: 'Insurance premiums, copays, medications',\r\n                        required: true,\r\n                        value: 150,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'entertainment',\r\n                        type: 'number',\r\n                        label: 'Entertainment',\r\n                        description: 'Movies, subscriptions, hobbies',\r\n                        required: false,\r\n                        value: 100,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'diningOut',\r\n                        type: 'number',\r\n                        label: 'Dining Out',\r\n                        description: 'Restaurants, takeout, coffee',\r\n                        required: false,\r\n                        value: 150,\r\n                        validation: { min: 0, step: 25 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'assets',\r\n                title: 'Assets & Savings',\r\n                description: 'Your current assets and investments',\r\n                fields: [\r\n                    {\r\n                        id: 'checking',\r\n                        type: 'number',\r\n                        label: 'Checking Account',\r\n                        description: 'Current balance in checking',\r\n                        required: true,\r\n                        value: 2000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'savings',\r\n                        type: 'number',\r\n                        label: 'Savings Account',\r\n                        description: 'Current savings balance',\r\n                        required: true,\r\n                        value: 5000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'emergencyFund',\r\n                        type: 'number',\r\n                        label: 'Emergency Fund',\r\n                        description: 'Funds specifically for emergencies',\r\n                        required: true,\r\n                        value: 3000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'employer401k',\r\n                        type: 'number',\r\n                        label: '401(k) Balance',\r\n                        description: 'Current 401k balance',\r\n                        required: false,\r\n                        value: 25000,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'traditionalIRA',\r\n                        type: 'number',\r\n                        label: 'Traditional IRA',\r\n                        description: 'Traditional IRA balance',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'rothIRA',\r\n                        type: 'number',\r\n                        label: 'Roth IRA',\r\n                        description: 'Roth IRA balance',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'brokerageAccounts',\r\n                        type: 'number',\r\n                        label: 'Brokerage Accounts',\r\n                        description: 'Taxable investment accounts',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 1000 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'liabilities',\r\n                title: 'Debts & Liabilities',\r\n                description: 'Your current debts and obligations',\r\n                fields: [\r\n                    {\r\n                        id: 'creditCardDebt',\r\n                        type: 'number',\r\n                        label: 'Credit Card Debt',\r\n                        description: 'Total credit card balances',\r\n                        required: true,\r\n                        value: 2000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'studentLoans',\r\n                        type: 'number',\r\n                        label: 'Student Loans',\r\n                        description: 'Total student loan debt',\r\n                        required: false,\r\n                        value: 15000,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'autoLoans',\r\n                        type: 'number',\r\n                        label: 'Auto Loans',\r\n                        description: 'Car loan balances',\r\n                        required: false,\r\n                        value: 8000,\r\n                        validation: { min: 0, step: 500 }\r\n                    },\r\n                    {\r\n                        id: 'mortgageBalance',\r\n                        type: 'number',\r\n                        label: 'Mortgage Balance',\r\n                        description: 'Remaining mortgage debt',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'personalLoans',\r\n                        type: 'number',\r\n                        label: 'Personal Loans',\r\n                        description: 'Other personal debt',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 500 }\r\n                    },\r\n                    {\r\n                        id: 'creditScore',\r\n                        type: 'number',\r\n                        label: 'Credit Score',\r\n                        description: 'Your current credit score',\r\n                        required: true,\r\n                        value: 720,\r\n                        validation: { min: 300, max: 850 }\r\n                    },\r\n                    {\r\n                        id: 'totalCreditLimit',\r\n                        type: 'number',\r\n                        label: 'Total Credit Limit',\r\n                        description: 'Combined credit card limits',\r\n                        required: true,\r\n                        value: 10000,\r\n                        validation: { min: 0, step: 500 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'goals-behavior',\r\n                title: 'Goals & Behavior',\r\n                description: 'Your financial goals and habits',\r\n                fields: [\r\n                    {\r\n                        id: 'retirementAge',\r\n                        type: 'number',\r\n                        label: 'Target Retirement Age',\r\n                        description: 'When do you want to retire?',\r\n                        required: true,\r\n                        value: 65,\r\n                        validation: { min: 50, max: 80 }\r\n                    },\r\n                    {\r\n                        id: 'retirementIncomeNeeded',\r\n                        type: 'number',\r\n                        label: 'Monthly Retirement Income Goal',\r\n                        description: 'How much monthly income do you want in retirement?',\r\n                        required: true,\r\n                        value: 4000,\r\n                        validation: { min: 1000, step: 500 }\r\n                    },\r\n                    {\r\n                        id: 'emergencyFundTarget',\r\n                        type: 'number',\r\n                        label: 'Emergency Fund Target',\r\n                        description: 'Your target emergency fund amount',\r\n                        required: true,\r\n                        value: 10000,\r\n                        validation: { min: 1000, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'monthlyInvestmentContribution',\r\n                        type: 'number',\r\n                        label: 'Monthly Investment Contribution',\r\n                        description: 'How much do you invest monthly?',\r\n                        required: true,\r\n                        value: 300,\r\n                        validation: { min: 0, step: 50 }\r\n                    },\r\n                    {\r\n                        id: 'riskTolerance',\r\n                        type: 'select',\r\n                        label: 'Risk Tolerance',\r\n                        required: true,\r\n                        value: 'moderate',\r\n                        options: [\r\n                            { value: 'conservative', label: 'Conservative - Prefer stability' },\r\n                            { value: 'moderate', label: 'Moderate - Balanced approach' },\r\n                            { value: 'aggressive', label: 'Aggressive - Higher risk for growth' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        id: 'billPaymentReliability',\r\n                        type: 'select',\r\n                        label: 'Bill Payment History',\r\n                        required: true,\r\n                        value: 'usually-on-time',\r\n                        options: [\r\n                            { value: 'always-on-time', label: 'Always pay on time' },\r\n                            { value: 'usually-on-time', label: 'Usually pay on time' },\r\n                            { value: 'sometimes-late', label: 'Sometimes pay late' },\r\n                            { value: 'often-late', label: 'Often pay late' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        id: 'budgetingMethod',\r\n                        type: 'select',\r\n                        label: 'Budgeting Method',\r\n                        required: true,\r\n                        value: 'simple-tracking',\r\n                        options: [\r\n                            { value: 'detailed-budget', label: 'Detailed budget tracking' },\r\n                            { value: 'simple-tracking', label: 'Simple expense tracking' },\r\n                            { value: 'mental-budget', label: 'Mental budget only' },\r\n                            { value: 'no-budget', label: 'No budgeting' }\r\n                        ]\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Initializes the form data with default values.\r\n     */\r\n    private initializeFormData(): void {\r\n        // Initialize with default values from form fields\r\n        this.formData = {\r\n            personalInfo: {\r\n                age: 30,\r\n                maritalStatus: 'single',\r\n                dependents: 0,\r\n                state: 'CA',\r\n                employmentStatus: 'employed',\r\n                employmentTenure: 3,\r\n                healthStatus: 'good',\r\n                healthInsurance: true,\r\n                lifeInsurance: false,\r\n                shortTermDisability: false,\r\n                longTermDisability: false\r\n            },\r\n            income: {\r\n                primarySalary: 5000,\r\n                secondaryIncome: 0,\r\n                businessIncome: 0,\r\n                investmentIncome: 0,\r\n                rentalIncome: 0,\r\n                benefitsIncome: 0,\r\n                otherIncome: 0,\r\n                incomeGrowthRate: 3,\r\n                incomeVariability: 'stable',\r\n                effectiveTaxRate: 22\r\n            },\r\n            expenses: {\r\n                housing: 1500,\r\n                utilities: 200,\r\n                insurance: 150,\r\n                loanPayments: 400,\r\n                childcare: 0,\r\n                food: 400,\r\n                transportation: 300,\r\n                healthcare: 150,\r\n                clothing: 100,\r\n                personalCare: 50,\r\n                entertainment: 100,\r\n                diningOut: 150,\r\n                hobbies: 50,\r\n                subscriptions: 50,\r\n                shopping: 100,\r\n                travel: 200,\r\n                creditCardPayments: 100,\r\n                studentLoanPayments: 200,\r\n                otherDebtPayments: 100\r\n            },\r\n            assets: {\r\n                checking: 2000,\r\n                savings: 5000,\r\n                moneyMarket: 0,\r\n                emergencyFund: 3000,\r\n                employer401k: 25000,\r\n                traditionalIRA: 0,\r\n                rothIRA: 0,\r\n                brokerageAccounts: 0,\r\n                stocks: 0,\r\n                bonds: 0,\r\n                mutualFunds: 0,\r\n                primaryResidence: 0,\r\n                investmentProperties: 0,\r\n                cryptocurrency: 0,\r\n                preciousMetals: 0,\r\n                collectibles: 0,\r\n                businessEquity: 0,\r\n                otherAssets: 0\r\n            },\r\n            liabilities: {\r\n                mortgageBalance: 0,\r\n                homeEquityLoan: 0,\r\n                autoLoans: 8000,\r\n                securedCreditLines: 0,\r\n                creditCardDebt: 2000,\r\n                personalLoans: 0,\r\n                studentLoans: 15000,\r\n                medicalDebt: 0,\r\n                businessLoans: 0,\r\n                businessCreditLines: 0,\r\n                taxDebt: 0,\r\n                legalJudgments: 0,\r\n                otherDebt: 0,\r\n                creditScore: 720,\r\n                totalCreditLimit: 10000\r\n            },\r\n            insurance: {\r\n                healthInsurance: true,\r\n                healthDeductible: 2000,\r\n                healthOutOfPocketMax: 6000,\r\n                lifeInsurance: false,\r\n                lifeCoverageAmount: 0,\r\n                shortTermDisability: false,\r\n                longTermDisability: false,\r\n                disabilityCoveragePercent: 0,\r\n                homeInsurance: false,\r\n                autoInsurance: true,\r\n                umbrellaPolicy: false,\r\n                insuranceConfidence: 'somewhat-confident'\r\n            },\r\n            goals: {\r\n                emergencyFundTarget: 10000,\r\n                debtPayoffGoal: true,\r\n                majorPurchaseAmount: 5000,\r\n                homeDownPayment: 0,\r\n                educationFunding: 0,\r\n                careerChangeBuffer: 0,\r\n                retirementAge: 65,\r\n                retirementIncomeNeeded: 4000,\r\n                legacyGoalAmount: 0,\r\n                retirementConfidence: 'somewhat-confident',\r\n                longTermGoalConfidence: 'somewhat-confident',\r\n                riskTolerance: 'moderate',\r\n                investmentExperience: 'intermediate'\r\n            },\r\n            behaviors: {\r\n                billPaymentReliability: 'usually-on-time',\r\n                budgetingMethod: 'simple-tracking',\r\n                financialPlanningEngagement: 'occasionally-plan',\r\n                automaticSavings: true,\r\n                monthlyInvestmentContribution: 300,\r\n                emergencyFundPriority: 'high',\r\n                impulseSpendingFrequency: 'sometimes',\r\n                expenseTrackingMethod: 'casual'\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Renders the current step of the form.\r\n     */\r\n    private render(): void {\r\n        this.container.innerHTML = `\r\n            <div class=\"form-container\">\r\n                <button class=\"btn-secondary return-home-btn\" aria-label=\"Return to Home\" tabindex=\"0\" onclick=\"window.confirm('Are you sure you want to return to the home page? Unsaved data will be lost.') && window.location.reload();\">Return to Home</button>\r\n                <div class=\"form-progress\">\r\n                    <div class=\"progress-bar\">\r\n                        <div class=\"progress-fill\" style=\"width: ${((this.currentStepIndex + 1) / this.steps.length) * 100}%\"></div>\r\n                    </div>\r\n                    <div class=\"progress-text\">Step ${this.currentStepIndex + 1} of ${this.steps.length}</div>\r\n                </div>\r\n                \r\n                <div class=\"form-step-content\">\r\n                    ${this.renderCurrentStep()}\r\n                </div>\r\n                \r\n                <div class=\"form-navigation\">\r\n                    <button class=\"btn-secondary\" id=\"prevBtn\" ${this.currentStepIndex === 0 ? 'disabled' : ''}>\r\n                        Previous\r\n                    </button>\r\n                    <button class=\"btn-primary\" id=\"nextBtn\">\r\n                        ${this.currentStepIndex === this.steps.length - 1 ? 'Complete Analysis' : 'Next'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        this.attachEventListeners();\r\n    }\r\n\r\n    /**\r\n     * Renders the fields for the current step.\r\n     * @returns The HTML string for the current step's fields.\r\n     */\r\n    private renderCurrentStep(): string {\r\n        const step = this.steps[this.currentStepIndex];\r\n        \r\n        return `\r\n            <div class=\"form-header\">\r\n                <h2>${step.title}</h2>\r\n                <p>${step.description}</p>\r\n            </div>\r\n            \r\n            <div class=\"form-fields-grid\">\r\n                ${step.fields.map(field => this.renderField(field)).join('')}\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    /**\r\n     * Renders a single form field.\r\n     * @param field - The field definition to render.\r\n     * @returns The HTML string for the field.\r\n     */\r\n    private renderField(field: FormField): string {\r\n        const value = this.getFieldValue(field.id);\r\n        \r\n        switch (field.type) {\r\n            case 'number':\r\n                return `\r\n                    <div class=\"form-field\">\r\n                        <label for=\"${field.id}\" class=\"field-label\">\r\n                            ${field.label}\r\n                            ${field.required ? '<span class=\"required\">*</span>' : ''}\r\n                        </label>\r\n                        ${field.description ? `<p class=\"field-description\">${field.description}</p>` : ''}\r\n                        <input \r\n                            type=\"number\" \r\n                            id=\"${field.id}\" \r\n                            name=\"${field.id}\"\r\n                            value=\"${value}\"\r\n                            ${field.required ? 'required' : ''}\r\n                            ${field.validation?.min !== undefined ? `min=\"${field.validation.min}\"` : ''}\r\n                            ${field.validation?.max !== undefined ? `max=\"${field.validation.max}\"` : ''}\r\n                            ${field.validation?.step !== undefined ? `step=\"${field.validation.step}\"` : ''}\r\n                        />\r\n                    </div>\r\n                `;\r\n            \r\n            case 'select':\r\n                return `\r\n                    <div class=\"form-field\">\r\n                        <label for=\"${field.id}\" class=\"field-label\">\r\n                            ${field.label}\r\n                            ${field.required ? '<span class=\"required\">*</span>' : ''}\r\n                        </label>\r\n                        ${field.description ? `<p class=\"field-description\">${field.description}</p>` : ''}\r\n                        <select id=\"${field.id}\" name=\"${field.id}\" ${field.required ? 'required' : ''}>\r\n                            ${field.options?.map(option => \r\n                                `<option value=\"${option.value}\" ${value === option.value ? 'selected' : ''}>${option.label}</option>`\r\n                            ).join('')}\r\n                        </select>\r\n                    </div>\r\n                `;\r\n            \r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the value for a given field ID from form data.\r\n     * @param fieldId - The ID of the field.\r\n     * @returns The value of the field.\r\n     */\r\n    private getFieldValue(fieldId: string): any {\r\n        // Use type assertion to avoid TS error for dynamic field access\r\n        const value = (this.formData as any)[fieldId];\r\n        if (typeof value === 'number' && (isNaN(value) || value < 0)) return 0;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Attaches event listeners for navigation and field changes.\r\n     */\r\n    private attachEventListeners(): void {\r\n        const prevBtn = this.container.querySelector('#prevBtn') as HTMLButtonElement;\r\n        const nextBtn = this.container.querySelector('#nextBtn') as HTMLButtonElement;\r\n\r\n        prevBtn?.addEventListener('click', () => this.previousStep());\r\n        nextBtn?.addEventListener('click', () => this.nextStep());\r\n\r\n        // Add input event listeners for real-time validation\r\n        const inputs = this.container.querySelectorAll('input, select');\r\n        inputs.forEach(input => {\r\n            input.addEventListener('change', (e) => this.handleFieldChange(e));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles changes to form fields and updates form data.\r\n     * @param event - The input or select change event.\r\n     */\r\n    private handleFieldChange(event: Event): void {\r\n        const input = event.target as HTMLInputElement | HTMLSelectElement;\r\n        const fieldId = input.id;\r\n        const value = input.type === 'number' ? parseFloat(input.value) : input.value;\r\n        \r\n        // Update the field value in the current step\r\n        const currentStep = this.steps[this.currentStepIndex];\r\n        const field = currentStep.fields.find(f => f.id === fieldId);\r\n        if (field) {\r\n            field.value = value;\r\n        }\r\n\r\n        // Update the form data structure\r\n        this.updateFormData(fieldId, value);\r\n        \r\n        // Trigger data change callback\r\n        this.onDataChange?.(this.formData);\r\n    }\r\n\r\n    /**\r\n     * Updates the form data structure based on field ID and step.\r\n     * @param fieldId - The field ID.\r\n     * @param value - The new value for the field.\r\n     */\r\n    private updateFormData(fieldId: string, value: any): void {\r\n        // Update the nested form data structure based on field ID\r\n        const currentStepId = this.steps[this.currentStepIndex].id;\r\n        \r\n        switch (currentStepId) {\r\n            case 'personal-info':\r\n                if (!this.formData.personalInfo) this.formData.personalInfo = {} as any;\r\n                (this.formData.personalInfo as any)[fieldId] = value;\r\n                break;\r\n            case 'income':\r\n                if (!this.formData.income) this.formData.income = {} as any;\r\n                (this.formData.income as any)[fieldId] = value;\r\n                break;\r\n            case 'expenses':\r\n                if (!this.formData.expenses) this.formData.expenses = {} as any;\r\n                (this.formData.expenses as any)[fieldId] = value;\r\n                break;\r\n            case 'assets':\r\n                if (!this.formData.assets) this.formData.assets = {} as any;\r\n                (this.formData.assets as any)[fieldId] = value;\r\n                break;\r\n            case 'liabilities':\r\n                if (!this.formData.liabilities) this.formData.liabilities = {} as any;\r\n                (this.formData.liabilities as any)[fieldId] = value;\r\n                break;\r\n            case 'goals-behavior':\r\n                if (fieldId === 'retirementAge' || fieldId === 'retirementIncomeNeeded' || fieldId === 'emergencyFundTarget' || fieldId === 'riskTolerance') {\r\n                    if (!this.formData.goals) this.formData.goals = {} as any;\r\n                    (this.formData.goals as any)[fieldId] = value;\r\n                } else if (fieldId === 'monthlyInvestmentContribution' || fieldId === 'billPaymentReliability' || fieldId === 'budgetingMethod') {\r\n                    if (!this.formData.behaviors) this.formData.behaviors = {} as any;\r\n                    (this.formData.behaviors as any)[fieldId] = value;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates the current step's fields.\r\n     * @returns True if valid, false otherwise.\r\n     */\r\n    private validateCurrentStep(): boolean {\r\n        const currentStep = this.steps[this.currentStepIndex];\r\n        const errors: string[] = [];\r\n\r\n        for (const field of currentStep.fields) {\r\n            // Allow 0 as a valid value for number fields\r\n            if (field.required && (field.value === undefined || field.value === null || \r\n                (field.value === '' && field.type !== 'number') || \r\n                (field.type === 'number' && isNaN(Number(field.value))))) {\r\n                errors.push(`${field.label} is required`);\r\n            }\r\n            \r\n            if (field.type === 'number' && field.validation && field.value !== undefined && field.value !== null && field.value !== '') {\r\n                const numValue = parseFloat(field.value);\r\n                if (!isNaN(numValue)) {\r\n                    if (field.validation.min !== undefined && numValue < field.validation.min) {\r\n                        errors.push(`${field.label} must be at least ${field.validation.min}`);\r\n                    }\r\n                    if (field.validation.max !== undefined && numValue > field.validation.max) {\r\n                        errors.push(`${field.label} must be at most ${field.validation.max}`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        currentStep.validationErrors = errors;\r\n        currentStep.isComplete = errors.length === 0;\r\n        \r\n        return errors.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Navigates to the previous step.\r\n     */\r\n    private previousStep(): void {\r\n        if (this.currentStepIndex > 0) {\r\n            this.currentStepIndex--;\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Navigates to the next step or completes the form if on the last step.\r\n     */\r\n    private nextStep(): void {\r\n        if (this.validateCurrentStep()) {\r\n            if (this.currentStepIndex === this.steps.length - 1) {\r\n                // Complete the form\r\n                this.completeForm();\r\n            } else {\r\n                this.currentStepIndex++;\r\n                this.render();\r\n            }\r\n        } else {\r\n            // Show validation errors\r\n            this.showValidationErrors();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows validation errors for the current step.\r\n     */\r\n    private showValidationErrors(): void {\r\n        const currentStep = this.steps[this.currentStepIndex];\r\n        if (currentStep.validationErrors.length > 0) {\r\n            alert('Please fix the following errors:\\n' + currentStep.validationErrors.join('\\n'));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Completes the form and triggers the onComplete callback with validated data.\r\n     */\r\n    private completeForm(): void {\r\n        // Defensive: Build a complete, validated UserFinancialData object\r\n        const userData = this.buildCompleteUserData();\r\n        if (this.onComplete) {\r\n            this.onComplete(userData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds a strictly-typed UserFinancialData object from form data.\r\n     * @returns The constructed UserFinancialData object.\r\n     */\r\n    private buildCompleteUserData(): UserFinancialData {\r\n        // Normalize and validate all fields, fill missing with defaults\r\n        // ... implement normalization logic here ...\r\n        return this.formData as UserFinancialData;\r\n    }\r\n\r\n    /**\r\n     * Gets the current form data (partial).\r\n     * @returns The current partial UserFinancialData.\r\n     */\r\n    public getCurrentData(): Partial<UserFinancialData> {\r\n        return this.formData;\r\n    }\r\n} ","/**\r\n * Quick Analysis Form Component\r\n * Simplified form requiring only essential financial inputs\r\n *\r\n * @remarks\r\n * - Strictly typed, fully documented, and validated per project rules.\r\n * - All user input is validated and sanitized before use.\r\n * - UI/UX is mobile-first and accessible.\r\n */\r\n\r\nimport { UserFinancialData } from '../../interfaces/core-types';\r\n// Import shared CSS for unified UX\r\nimport '../shared-form-styles.css';\r\n\r\n/**\r\n * QuickAnalysisForm\r\n * Renders and manages the quick financial health form.\r\n */\r\nexport class QuickAnalysisForm {\r\n    private container: HTMLElement;\r\n    private onSubmit: (data: UserFinancialData) => void;\r\n\r\n    /**\r\n     * Initializes the form.\r\n     * @param containerId - The DOM element ID to render the form into.\r\n     * @param onSubmit - Callback when the form is submitted with valid data.\r\n     */\r\n    constructor(containerId: string, onSubmit: (data: UserFinancialData) => void) {\r\n        const element = document.getElementById(containerId);\r\n        if (!element) {\r\n            throw new Error(`Element with ID ${containerId} not found`);\r\n        }\r\n        this.container = element;\r\n        this.onSubmit = onSubmit;\r\n    }\r\n\r\n    /**\r\n     * Renders the form UI.\r\n     */\r\n    public render(): void {\r\n        this.container.innerHTML = this.generateHTML();\r\n        this.attachEventListeners();\r\n    }\r\n\r\n    /**\r\n     * Generates the HTML for the form.\r\n     * @returns The HTML string for the form.\r\n     */\r\n    private generateHTML(): string {\r\n        return `\r\n            <div class=\"form-container\">\r\n                <div class=\"form-header\">\r\n                    <h2>Quick Financial Health Check</h2>\r\n                    <p class=\"form-description\">\r\n                        Get a comprehensive financial analysis with just 6 essential inputs. \r\n                        Takes less than 2 minutes to complete.\r\n                    </p>\r\n                    <div class=\"progress-indicator\">\r\n                        <div class=\"progress-bar\">\r\n                            <div class=\"progress-fill\" id=\"formProgress\"></div>\r\n                        </div>\r\n                        <p class=\"progress-text\">Complete all fields to analyze</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <button class=\"btn-secondary return-home-btn\" aria-label=\"Return to Home\" tabindex=\"0\" onclick=\"window.confirm('Are you sure you want to return to the home page? Unsaved data will be lost.') && window.location.reload();\">Return to Home</button>\r\n\r\n                <form id=\"quickAnalysisForm\" class=\"quick-form\">\r\n                    <div class=\"form-fields-grid\">\r\n                        <div class=\"form-field\" data-field=\"income\">\r\n                            <label for=\"monthlyIncome\" class=\"field-label\">\r\n                                <span class=\"label-text\">Monthly Take-Home Income</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Your salary after taxes and deductions\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\" \r\n                                       id=\"monthlyIncome\" \r\n                                       name=\"monthlyIncome\" \r\n                                       placeholder=\"5,000\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Your monthly income after taxes and deductions</p>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"housing\">\r\n                            <label for=\"monthlyHousing\" class=\"field-label\">\r\n                                <span class=\"label-text\">Monthly Housing Cost</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Rent or mortgage payment\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\"\r\n                                       id=\"monthlyHousing\" \r\n                                       name=\"monthlyHousing\" \r\n                                       placeholder=\"1,500\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Rent or mortgage payment (excluding utilities)</p>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"expenses\">\r\n                            <label for=\"monthlyExpenses\" class=\"field-label\">\r\n                                <span class=\"label-text\">Other Monthly Expenses</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Food, transportation, utilities, entertainment, etc.\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\"\r\n                                       id=\"monthlyExpenses\" \r\n                                       name=\"monthlyExpenses\" \r\n                                       placeholder=\"2,000\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Food, transportation, utilities, entertainment, etc.</p>\r\n                            <div class=\"expense-breakdown\">\r\n                                <small>Typical breakdown: Food (30%), Transportation (25%), Utilities (15%), Other (30%)</small>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"savings\">\r\n                            <label for=\"totalSavings\" class=\"field-label\">\r\n                                <span class=\"label-text\">Total Savings & Emergency Fund</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"All liquid savings including emergency fund\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\"\r\n                                       id=\"totalSavings\" \r\n                                       name=\"totalSavings\" \r\n                                       placeholder=\"15,000\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Checking, savings, emergency fund (liquid assets)</p>\r\n                            <div class=\"savings-indicator\">\r\n                                <small>Emergency fund goal: <span id=\"emergencyGoal\">--</span> months of expenses</small>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"debt\">\r\n                            <label for=\"totalDebt\" class=\"field-label\">\r\n                                <span class=\"label-text\">Total Debt</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Credit cards, student loans, car loans (excluding mortgage)\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\"\r\n                                       id=\"totalDebt\" \r\n                                       name=\"totalDebt\" \r\n                                       placeholder=\"25,000\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Credit cards, student loans, car loans (excluding mortgage)</p>\r\n                            <div class=\"debt-ratio-indicator\">\r\n                                <small>Debt-to-income ratio: <span id=\"debtRatio\">--</span></small>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"credit\">\r\n                            <label for=\"creditScore\" class=\"field-label\">\r\n                                <span class=\"label-text\">Credit Score</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Your current credit score (300-850)\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <input type=\"number\" \r\n                                       id=\"creditScore\" \r\n                                       name=\"creditScore\" \r\n                                       placeholder=\"720\"\r\n                                       min=\"300\" \r\n                                       max=\"850\" \r\n                                       required \r\n                                       class=\"field-input\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Your current credit score (300-850)</p>\r\n                            <div class=\"credit-range\">\r\n                                <div class=\"range-indicator\">\r\n                                    <span class=\"range poor\">300-579</span>\r\n                                    <span class=\"range fair\">580-669</span>\r\n                                    <span class=\"range good\">670-739</span>\r\n                                    <span class=\"range excellent\">740-850</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-actions\">\r\n                        <button type=\"submit\" class=\"btn btn-primary btn-large\" id=\"analyzeButton\" disabled>\r\n                            <span class=\"btn-icon\">📊</span>\r\n                            <span class=\"btn-text\">Analyze My Financial Health</span>\r\n                            <div class=\"btn-loader\" style=\"display: none;\">\r\n                                <div class=\"spinner\"></div>\r\n                            </div>\r\n                        </button>\r\n                        <p class=\"analysis-note\">\r\n                            Get instant insights into your financial health with personalized recommendations\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div class=\"validation-errors\" id=\"validationErrors\" style=\"display: none;\">\r\n                        <!-- Error messages will be inserted here -->\r\n                    </div>\r\n                </form>\r\n\r\n                <div class=\"form-benefits\">\r\n                    <h3>What You'll Get:</h3>\r\n                    <ul class=\"benefits-list\">\r\n                        <li>\r\n                            <span class=\"benefit-icon\">📈</span>\r\n                            <span>Overall Financial Health Score based on your actual data</span>\r\n                        </li>\r\n                        <li>\r\n                            <span class=\"benefit-icon\">💡</span>\r\n                            <span>8 Key Health Indicators with clear explanations</span>\r\n                        </li>\r\n                        <li>\r\n                            <span class=\"benefit-icon\">🎯</span>\r\n                            <span>Prioritized action recommendations</span>\r\n                        </li>\r\n                        <li>\r\n                            <span class=\"benefit-icon\">📊</span>\r\n                            <span>Comparison to people in your age and income group</span>\r\n                        </li>\r\n                        <li>\r\n                            <span class=\"benefit-icon\">🔮</span>\r\n                            <span>Projections for your financial future</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    /**\r\n     * Attaches all event listeners for form interactivity and validation.\r\n     */\r\n    private attachEventListeners(): void {\r\n        const form = this.container.querySelector('#quickAnalysisForm') as HTMLFormElement;\r\n        if (form) {\r\n            form.addEventListener('submit', (event) => {\r\n                event.preventDefault();\r\n                this.handleSubmit();\r\n            });\r\n\r\n            // Add real-time validation and feedback\r\n            const inputs = form.querySelectorAll('input[required]');\r\n            inputs.forEach(input => {\r\n                input.addEventListener('input', (event) => {\r\n                    this.handleInputChange(event.target as HTMLInputElement);\r\n                });\r\n                \r\n                input.addEventListener('blur', (event) => {\r\n                    const target = event.target as HTMLInputElement;\r\n                    // Format currency on blur\r\n                    if (target.dataset.format === 'currency') {\r\n                        this.formatCurrencyInput(target);\r\n                    }\r\n                    this.validateField(target);\r\n                });\r\n            });\r\n\r\n            // Add tooltips\r\n            this.attachTooltips();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles input changes for real-time validation and feedback.\r\n     * @param _input - The input element that changed.\r\n     */\r\n    private handleInputChange(_input: HTMLInputElement): void {\r\n        // DO NOT format currency on every input, as it interferes with typing.\r\n        // Formatting is now handled on the 'blur' event.\r\n\r\n        // Update real-time calculations\r\n        this.updateRealTimeCalculations();\r\n        \r\n        // Update progress\r\n        this.updateProgress();\r\n        \r\n        // Enable/disable submit button\r\n        this.updateSubmitButton();\r\n    }\r\n\r\n    /**\r\n     * Formats a currency input field on blur.\r\n     * @param input - The input element to format.\r\n     */\r\n    private formatCurrencyInput(input: HTMLInputElement): void {\r\n        // First, strip any non-digit characters except for a decimal point\r\n        const value = input.value.replace(/[^0-9.]/g, '');\r\n        const numericValue = parseFloat(value) || 0;\r\n        // Allow zero as a valid value\r\n        input.value = numericValue > 0 ? numericValue.toLocaleString('en-US', { maximumFractionDigits: 0 }) : '0';\r\n    }\r\n\r\n    /**\r\n     * Updates real-time calculations (emergency fund months, debt ratio) as the user types.\r\n     */\r\n    private updateRealTimeCalculations(): void {\r\n        const income = this.getNumericValue('monthlyIncome');\r\n        const housing = this.getNumericValue('monthlyHousing');\r\n        const expenses = this.getNumericValue('monthlyExpenses');\r\n        const savings = this.getNumericValue('totalSavings');\r\n        const debt = this.getNumericValue('totalDebt');\r\n\r\n        // Update emergency fund months\r\n        const totalExpenses = housing + expenses;\r\n        const emergencyGoal = document.getElementById('emergencyGoal');\r\n        if (emergencyGoal) {\r\n            if (totalExpenses > 0 && savings >= 0) {\r\n                const emergencyMonths = (savings / totalExpenses);\r\n                emergencyGoal.textContent = isNaN(emergencyMonths) ? 'N/A' : emergencyMonths.toFixed(1);\r\n                emergencyGoal.className = !isNaN(emergencyMonths) && emergencyMonths >= 3 ? 'good' : 'needs-improvement';\r\n            } else {\r\n                emergencyGoal.textContent = 'N/A';\r\n                emergencyGoal.className = '';\r\n            }\r\n        }\r\n\r\n        // Update debt-to-income ratio\r\n        const debtRatioElement = document.getElementById('debtRatio');\r\n        if (income > 0) {\r\n            const annualIncome = income * 12;\r\n            let debtRatio = 0;\r\n            if (debt > 0) {\r\n                debtRatio = ((debt / annualIncome) * 100);\r\n                if (debtRatioElement) {\r\n                    debtRatioElement.textContent = `${debtRatio.toFixed(1)}%`;\r\n                    debtRatioElement.className = debtRatio <= 36 ? 'good' : 'needs-improvement';\r\n                }\r\n            } else if (debt === 0) {\r\n                if (debtRatioElement) {\r\n                    debtRatioElement.textContent = 'No debt! 🎉';\r\n                    debtRatioElement.className = 'good';\r\n                }\r\n            }\r\n        } else if (debtRatioElement) {\r\n            debtRatioElement.textContent = 'N/A';\r\n            debtRatioElement.className = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a numeric value from an input field, ensuring non-negative and valid.\r\n     * @param fieldName - The name attribute of the input field.\r\n     * @returns The numeric value or 0 if invalid.\r\n     */\r\n    private getNumericValue(fieldName: string): number {\r\n        const value = Number((this.container.querySelector(`[name=\"${fieldName}\"]`) as HTMLInputElement)?.value);\r\n        // Allow zero as valid, only block negatives and NaN\r\n        if (typeof value !== 'number' || isNaN(value) || value < 0) return 0;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Updates the progress bar and text based on completed fields.\r\n     */\r\n    private updateProgress(): void {\r\n        const form = this.container.querySelector('#quickAnalysisForm') as HTMLFormElement;\r\n        const inputs = form.querySelectorAll('input[required]');\r\n        let completedFields = 0;\r\n\r\n        inputs.forEach(input => {\r\n            if ((input as HTMLInputElement).value.trim() !== '') {\r\n                completedFields++;\r\n            }\r\n        });\r\n\r\n        const progress = (completedFields / inputs.length) * 100;\r\n        const progressFill = document.getElementById('formProgress');\r\n        const progressText = this.container.querySelector('.progress-text');\r\n        \r\n        if (progressFill) {\r\n            progressFill.style.width = `${progress}%`;\r\n        }\r\n        \r\n        if (progressText) {\r\n            if (progress === 100) {\r\n                progressText.textContent = 'Ready to analyze!';\r\n            } else {\r\n                progressText.textContent = `${completedFields}/${inputs.length} fields completed`;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables or disables the submit button based on form validity.\r\n     */\r\n    private updateSubmitButton(): void {\r\n        const form = this.container.querySelector('#quickAnalysisForm') as HTMLFormElement;\r\n        const button = document.getElementById('analyzeButton') as HTMLButtonElement;\r\n        const inputs = form.querySelectorAll('input[required]');\r\n        \r\n        let allValid = true;\r\n        inputs.forEach(input => {\r\n            const htmlInput = input as HTMLInputElement;\r\n            if (!htmlInput.value.trim() || !htmlInput.checkValidity()) {\r\n                allValid = false;\r\n            }\r\n        });\r\n\r\n        button.disabled = !allValid;\r\n        button.classList.toggle('ready', allValid);\r\n    }\r\n\r\n    /**\r\n     * Validates a single input field and provides feedback.\r\n     * @param input - The input element to validate.\r\n     */\r\n    private validateField(input: HTMLInputElement): void {\r\n        const fieldContainer = input.closest('.form-field');\r\n        const feedback = fieldContainer?.querySelector('.input-feedback');\r\n        if (!feedback) return;\r\n        let isValid = true;\r\n        let message = '';\r\n        const value = this.getNumericValue(input.name);\r\n        const fieldName = input.name;\r\n        // Basic validation\r\n        if (input.required && input.value.trim() === '') {\r\n            isValid = false;\r\n            message = 'This field is required';\r\n        } else if (value < 0) {\r\n            isValid = false;\r\n            message = 'Value cannot be negative';\r\n        } else {\r\n            // Field-specific validation\r\n            switch (fieldName) {\r\n                case 'creditScore':\r\n                    if (value < 300 || value > 850) {\r\n                        isValid = false;\r\n                        message = 'Credit score must be between 300 and 850';\r\n                    }\r\n                    break;\r\n                // $0 is valid for all other fields, including debt\r\n            }\r\n        }\r\n        fieldContainer?.classList.toggle('field-valid', isValid);\r\n        fieldContainer?.classList.toggle('field-error', !isValid);\r\n        if (feedback) {\r\n            feedback.textContent = message;\r\n            (feedback as HTMLElement).style.display = message ? 'block' : 'none';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attaches tooltips to help icons for accessibility.\r\n     */\r\n    private attachTooltips(): void {\r\n        const helpIcons = this.container.querySelectorAll('.help-icon');\r\n        helpIcons.forEach(icon => {\r\n            icon.addEventListener('mouseenter', (event) => {\r\n                const tooltipText = (event.target as HTMLElement).dataset.tooltip;\r\n                if (tooltipText) {\r\n                    this.showTooltip(event.target as HTMLElement, tooltipText);\r\n                }\r\n            });\r\n\r\n            icon.addEventListener('mouseleave', () => {\r\n                this.hideTooltip();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Shows a tooltip for a help icon.\r\n     * @param element - The help icon element.\r\n     * @param text - The tooltip text.\r\n     */\r\n    private showTooltip(element: HTMLElement, text: string): void {\r\n        // Ensure no old tooltips are lingering\r\n        this.hideTooltip();\r\n\r\n        const tooltip = document.createElement('div');\r\n        tooltip.className = 'tooltip';\r\n        tooltip.textContent = text;\r\n        document.body.appendChild(tooltip);\r\n\r\n        const rect = element.getBoundingClientRect();\r\n        // Position tooltip relative to the document, not the viewport\r\n        const top = rect.top + window.scrollY - 10;\r\n        const left = rect.left + rect.width / 2;\r\n\r\n        tooltip.style.left = `${left}px`;\r\n        tooltip.style.top = `${top}px`;\r\n        tooltip.style.transform = 'translate(-50%, -100%)';\r\n    }\r\n\r\n    /**\r\n     * Hides any visible tooltip.\r\n     */\r\n    private hideTooltip(): void {\r\n        const tooltip = document.querySelector('.tooltip');\r\n        if (tooltip) {\r\n            tooltip.remove();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles form submission, validates all fields, and builds user data.\r\n     */\r\n    private handleSubmit(): void {\r\n        const form = this.container.querySelector('#quickAnalysisForm') as HTMLFormElement;\r\n        const formData = new FormData(form);\r\n        \r\n        // Show loading state\r\n        const button = document.getElementById('analyzeButton') as HTMLButtonElement;\r\n        const btnText = button.querySelector('.btn-text');\r\n        const btnLoader = button.querySelector('.btn-loader');\r\n        \r\n        if (btnText && btnLoader) {\r\n            (btnText as HTMLElement).style.display = 'none';\r\n            (btnLoader as HTMLElement).style.display = 'block';\r\n        }\r\n        button.disabled = true;\r\n        \r\n        // Validate all fields and collect specific error messages\r\n        const inputs = form.querySelectorAll('input[required]');\r\n        const errors: string[] = [];\r\n        \r\n        inputs.forEach(input => {\r\n            this.validateField(input as HTMLInputElement);\r\n            const fieldContainer = (input as HTMLInputElement).closest('.form-field');\r\n            if (fieldContainer?.classList.contains('field-error')) {\r\n                const feedback = fieldContainer.querySelector('.input-feedback');\r\n                if (feedback && feedback.textContent) {\r\n                    const label = fieldContainer.querySelector('.label-text')?.textContent || 'Field';\r\n                    errors.push(`<strong>${label}:</strong> ${feedback.textContent}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (errors.length > 0) {\r\n            this.showValidationErrors(errors);\r\n            this.resetSubmitButton();\r\n            return;\r\n        }\r\n\r\n        // Hide errors if all are fixed\r\n        const errorContainer = this.container.querySelector('#validationErrors') as HTMLElement;\r\n        if (errorContainer) {\r\n            errorContainer.style.display = 'none';\r\n        }\r\n\r\n        // Build UserFinancialData from user inputs (NO DEFAULT VALUES)\r\n        const userData = this.buildUserDataFromForm(formData);\r\n        \r\n        // Log the actual data being used for analysis\r\n        console.log('🔍 Quick Analysis - Using actual user data:', {\r\n            monthlyIncome: userData.income.primarySalary,\r\n            monthlyHousing: userData.expenses.housing,\r\n            monthlyExpenses: userData.expenses.food + userData.expenses.transportation + userData.expenses.utilities,\r\n            totalSavings: userData.assets.checking + userData.assets.savings + userData.assets.emergencyFund,\r\n            totalDebt: userData.liabilities.creditCardDebt + userData.liabilities.autoLoans + userData.liabilities.studentLoans,\r\n            creditScore: userData.liabilities.creditScore\r\n        });\r\n        \r\n        this.onSubmit(userData);\r\n    }\r\n\r\n    /**\r\n     * Resets the submit button to its default state after validation errors.\r\n     */\r\n    private resetSubmitButton(): void {\r\n        const button = document.getElementById('analyzeButton') as HTMLButtonElement;\r\n        const btnText = button.querySelector('.btn-text');\r\n        const btnLoader = button.querySelector('.btn-loader');\r\n        \r\n        if (btnText && btnLoader) {\r\n            (btnText as HTMLElement).style.display = 'block';\r\n            (btnLoader as HTMLElement).style.display = 'none';\r\n        }\r\n        button.disabled = false;\r\n    }\r\n\r\n    /**\r\n     * Builds a strictly-typed UserFinancialData object from form data.\r\n     * @param formData - The FormData object from the form.\r\n     * @returns The constructed UserFinancialData object.\r\n     */\r\n    private buildUserDataFromForm(formData: FormData): UserFinancialData {\r\n        // Get actual user inputs (remove any commas from formatted currency)\r\n        const monthlyIncome = parseFloat((formData.get('monthlyIncome') as string).replace(/[,$]/g, '')) || 0;\r\n        const monthlyHousing = parseFloat((formData.get('monthlyHousing') as string).replace(/[,$]/g, '')) || 0;\r\n        const monthlyExpenses = parseFloat((formData.get('monthlyExpenses') as string).replace(/[,$]/g, '')) || 0;\r\n        const totalSavings = parseFloat((formData.get('totalSavings') as string).replace(/[,$]/g, '')) || 0;\r\n        const totalDebt = parseFloat((formData.get('totalDebt') as string).replace(/[,$]/g, '')) || 0;\r\n        const creditScore = parseFloat((formData.get('creditScore') as string)) || 300; // Minimum valid credit score\r\n\r\n        // Validate that we have actual user data\r\n        if (monthlyIncome === 0) {\r\n            throw new Error('Monthly income is required and cannot be zero');\r\n        }\r\n\r\n        // Use only user-entered values for all fields\r\n        return {\r\n            personalInfo: {\r\n                age: 35,\r\n                maritalStatus: 'single',\r\n                dependents: 0,\r\n                state: 'CA',\r\n                employmentStatus: 'employed',\r\n                employmentTenure: 3,\r\n                healthStatus: 'good',\r\n                healthInsurance: true,\r\n                lifeInsurance: false,\r\n                shortTermDisability: false,\r\n                longTermDisability: false\r\n            },\r\n            income: {\r\n                primarySalary: monthlyIncome, // USER INPUT\r\n                secondaryIncome: 0,\r\n                businessIncome: 0,\r\n                investmentIncome: 0,\r\n                rentalIncome: 0,\r\n                benefitsIncome: 0,\r\n                otherIncome: 0,\r\n                incomeGrowthRate: 0.03,\r\n                incomeVariability: 'stable',\r\n                effectiveTaxRate: 0.22\r\n            },\r\n            expenses: {\r\n                housing: monthlyHousing, // USER INPUT\r\n                utilities: 0,\r\n                insurance: 0,\r\n                loanPayments: 0,\r\n                childcare: 0,\r\n                food: 0,\r\n                transportation: 0,\r\n                healthcare: 0,\r\n                clothing: 0,\r\n                personalCare: 0,\r\n                entertainment: 0,\r\n                diningOut: 0,\r\n                hobbies: 0,\r\n                subscriptions: 0,\r\n                shopping: 0,\r\n                travel: 0,\r\n                creditCardPayments: 0,\r\n                studentLoanPayments: 0,\r\n                otherDebtPayments: 0\r\n            },\r\n            assets: {\r\n                checking: totalSavings, // USER INPUT\r\n                savings: 0,\r\n                moneyMarket: 0,\r\n                emergencyFund: 0,\r\n                employer401k: 0,\r\n                traditionalIRA: 0,\r\n                rothIRA: 0,\r\n                brokerageAccounts: 0,\r\n                stocks: 0,\r\n                bonds: 0,\r\n                mutualFunds: 0,\r\n                primaryResidence: 0,\r\n                investmentProperties: 0,\r\n                cryptocurrency: 0,\r\n                preciousMetals: 0,\r\n                collectibles: 0,\r\n                businessEquity: 0,\r\n                otherAssets: 0\r\n            },\r\n            liabilities: {\r\n                mortgageBalance: 0,\r\n                homeEquityLoan: 0,\r\n                autoLoans: 0,\r\n                securedCreditLines: 0,\r\n                creditCardDebt: totalDebt, // USER INPUT\r\n                personalLoans: 0,\r\n                studentLoans: 0,\r\n                medicalDebt: 0,\r\n                businessLoans: 0,\r\n                businessCreditLines: 0,\r\n                taxDebt: 0,\r\n                legalJudgments: 0,\r\n                otherDebt: 0,\r\n                creditScore: creditScore, // USER INPUT\r\n                totalCreditLimit: 0\r\n            },\r\n            insurance: {\r\n                healthInsurance: true,\r\n                healthDeductible: 0,\r\n                healthOutOfPocketMax: 0,\r\n                lifeInsurance: false,\r\n                lifeCoverageAmount: 0,\r\n                shortTermDisability: false,\r\n                longTermDisability: false,\r\n                disabilityCoveragePercent: 0,\r\n                homeInsurance: false,\r\n                autoInsurance: false,\r\n                umbrellaPolicy: false,\r\n                insuranceConfidence: 'somewhat-confident'\r\n            },\r\n            goals: {\r\n                emergencyFundTarget: 0,\r\n                debtPayoffGoal: totalDebt > 0,\r\n                majorPurchaseAmount: 0,\r\n                homeDownPayment: 0,\r\n                educationFunding: 0,\r\n                careerChangeBuffer: 0,\r\n                retirementAge: 65,\r\n                retirementIncomeNeeded: 0,\r\n                legacyGoalAmount: 0,\r\n                retirementConfidence: 'somewhat-confident',\r\n                longTermGoalConfidence: 'somewhat-confident',\r\n                riskTolerance: 'moderate',\r\n                investmentExperience: 'intermediate'\r\n            },\r\n            behaviors: {\r\n                billPaymentReliability: creditScore > 750 ? 'always-on-time' : creditScore > 650 ? 'usually-on-time' : 'sometimes-late',\r\n                budgetingMethod: 'simple-tracking',\r\n                financialPlanningEngagement: 'occasionally-plan',\r\n                automaticSavings: totalSavings > monthlyIncome,\r\n                monthlyInvestmentContribution: 0,\r\n                emergencyFundPriority: totalSavings < (monthlyHousing + monthlyExpenses) * 3 ? 'high' : 'medium',\r\n                impulseSpendingFrequency: 'sometimes',\r\n                expenseTrackingMethod: 'casual'\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Shows validation errors in the UI.\r\n     * @param errors - Array of error messages to display.\r\n     */\r\n    private showValidationErrors(errors: string[]): void {\r\n        const errorContainer = this.container.querySelector('#validationErrors') as HTMLElement;\r\n        if (errorContainer) {\r\n            errorContainer.innerHTML = `\r\n                <div class=\"error-messages\">\r\n                    <h4>Please fix the following errors:</h4>\r\n                    <ul>\r\n                        ${errors.map(error => `<li>${error}</li>`).join('')}\r\n                    </ul>\r\n                </div>\r\n            `;\r\n            errorContainer.style.display = 'block';\r\n        }\r\n    }\r\n}","/**\r\n * Enhanced Results Display Component\r\n * Provides clear, actionable financial analysis results with explanations\r\n *\r\n * @remarks\r\n * - Strictly typed, fully documented, and validated per project rules.\r\n * - All displayed values are validated and sanitized before display.\r\n * - UI/UX is mobile-first and accessible.\r\n */\r\n\r\nimport { ComprehensiveAnalysisResult } from '../../interfaces/analysis-types';\r\nimport '../shared-form-styles.css';\r\n\r\n/**\r\n * EnhancedResultsDisplay\r\n * Renders the financial analysis results in a clear, accessible, and actionable format.\r\n */\r\nexport class EnhancedResultsDisplay {\r\n    private container: HTMLElement;\r\n\r\n    /**\r\n     * Initializes the results display component.\r\n     * @param containerId - The DOM element ID to render the results into.\r\n     */\r\n    constructor(containerId: string) {\r\n        const element = document.getElementById(containerId);\r\n        if (!element) {\r\n            throw new Error(`Element with ID ${containerId} not found`);\r\n        }\r\n        this.container = element;\r\n    }\r\n\r\n    /**\r\n     * Renders the analysis results.\r\n     * @param analysisResult - The comprehensive analysis result object.\r\n     */\r\n    public render(analysisResult: ComprehensiveAnalysisResult): void {\r\n        // Defensive: Validate all numbers before display\r\n        if (!analysisResult || typeof analysisResult !== 'object') {\r\n            this.container.innerHTML = '<div class=\"error-message\">No analysis data available.</div>';\r\n            return;\r\n        }\r\n        this.container.innerHTML = '';\r\n        this.container.className = 'form-container enhanced-results-display';\r\n        this.container.setAttribute('aria-label', 'Financial Health Analysis Results');\r\n        this.container.innerHTML = `\r\n          <section class=\"results-section\" aria-labelledby=\"score-heading\">\r\n            ${this.generateOverallScoreSection(analysisResult)}\r\n          </section>\r\n          <section class=\"results-section\" aria-labelledby=\"insights-heading\">\r\n            ${this.generateKeyInsightsSection(analysisResult)}\r\n          </section>\r\n          <section class=\"results-section\" aria-labelledby=\"action-plan-heading\">\r\n            ${this.generateActionPlanSection(analysisResult)}\r\n          </section>\r\n        `;\r\n        this.attachInteractiveElements();\r\n    }\r\n\r\n    /**\r\n     * Generates the overall score section HTML.\r\n     * @param analysisResult - The analysis result object.\r\n     * @returns The HTML string for the score section.\r\n     */\r\n    private generateOverallScoreSection(analysisResult: ComprehensiveAnalysisResult): string {\r\n        const score: string | number = typeof analysisResult.overallHealthScore === 'number' && !isNaN(analysisResult.overallHealthScore) ? analysisResult.overallHealthScore : 'N/A';\r\n        const level = analysisResult.healthLevel;\r\n        let scoreText = '';\r\n        switch (level) {\r\n            case 'excellent': scoreText = 'Excellent: You are in outstanding financial health.'; break;\r\n            case 'good': scoreText = 'Good: You are on track, with a few areas to optimize.'; break;\r\n            case 'fair': scoreText = 'Fair: There are some areas to improve.'; break;\r\n            case 'limited': scoreText = 'Limited: Take action to improve your financial health.'; break;\r\n            case 'critical': scoreText = 'Critical: Immediate action is needed.'; break;\r\n            default: scoreText = '';\r\n        }\r\n        return `\r\n          <div class=\"score-section form-header\" style=\"text-align:center; margin-bottom:24px;\">\r\n            <h2 id=\"score-heading\">Financial Health Score</h2>\r\n            <div class=\"score-circle\" style=\"display:inline-block; width:100px; height:100px; border-radius:50%; background:${this.getScoreColor(level)}; color:#fff; font-size:2.2rem; line-height:100px; font-weight:bold;\">${score}</div>\r\n            <div class=\"score-explanation\">${scoreText}</div>\r\n            <div class=\"score-peer\" style=\"display:none;\"></div>\r\n          </div>\r\n        `;\r\n    }\r\n\r\n    /**\r\n     * Generates the key insights section HTML.\r\n     * @param analysisResult - The analysis result object.\r\n     * @returns The HTML string for the key insights section.\r\n     */\r\n    private generateKeyInsightsSection(analysisResult: ComprehensiveAnalysisResult): string {\r\n        const km = analysisResult.keyMetrics;\r\n        const savingsRateBreakdown = km.savingsRateBreakdown;\r\n        const insights: Array<{icon:string, headline:string, value:string, explanation:string, positive:boolean, breakdown?:string, breakdownId?:string}> = [];\r\n        if (typeof km.emergencyFundMonths === 'number') {\r\n            insights.push({\r\n                icon: km.emergencyFundMonths >= 3 ? '\\ud83d\\udcb0' : '\\u26a0\\ufe0f',\r\n                headline: 'Emergency Fund',\r\n                value: km.emergencyFundMonths === 0 ? 'No savings' : `${km.emergencyFundMonths.toFixed(1)} months`,\r\n                explanation: km.emergencyFundMonths >= 3 ? 'You have a solid emergency fund.' : 'Aim for 3-6 months of expenses saved.',\r\n                positive: km.emergencyFundMonths >= 3,\r\n                breakdown: `Liquid assets (checking, savings, money market, emergency fund) divided by total monthly expenses.`,\r\n                breakdownId: 'breakdown-emergency-fund'\r\n            });\r\n        }\r\n        if (typeof km.debtToIncomeRatio === 'number' && km.dtiBreakdown) {\r\n            insights.push({\r\n                icon: km.debtToIncomeRatio === 0 ? '\\u2705' : (km.debtToIncomeRatio <= 36 ? '\\ud83d\\udc4d' : '\\u26a0\\ufe0f'),\r\n                headline: 'Debt-to-Income',\r\n                value: `${km.debtToIncomeRatio.toFixed(1)}%`,\r\n                explanation: km.debtToIncomeRatio === 0 ? 'No debt: Great job!' : (km.debtToIncomeRatio <= 36 ? 'Your debt is in a healthy range.' : 'Try to keep debt below 36% of income.'),\r\n                positive: km.debtToIncomeRatio <= 36,\r\n                breakdown: `DTI = Total Debt ($${km.dtiBreakdown.totalDebt.toLocaleString()}) / Gross Monthly Income ($${km.dtiBreakdown.totalIncome.toLocaleString()}) × 100 = <strong>${km.dtiBreakdown.debtToIncomeRatio.toFixed(1)}%</strong>.<br>Industry standard: <a href='https://www.consumerfinance.gov/ask-cfpb/what-is-a-debt-to-income-ratio-en-1791/' target='_blank' rel='noopener'>CFPB</a>`,\r\n                breakdownId: 'breakdown-dti'\r\n            });\r\n        }\r\n        // Net Worth\r\n        if (typeof km.netWorth === 'number' && km.netWorthBreakdown) {\r\n            insights.push({\r\n                icon: km.netWorth > 0 ? '\\ud83d\\udcb8' : '\\u26a0\\ufe0f',\r\n                headline: 'Net Worth',\r\n                value: `$${km.netWorth.toLocaleString()}`,\r\n                explanation: km.netWorth > 0 ? 'Positive net worth: You own more than you owe.' : 'Negative net worth: Focus on reducing liabilities and building assets.',\r\n                positive: km.netWorth > 0,\r\n                breakdown: `Net Worth = Total Assets ($${km.netWorthBreakdown.totalAssets.toLocaleString()}) - Total Liabilities ($${km.netWorthBreakdown.totalLiabilities.toLocaleString()}) = <strong>$${km.netWorthBreakdown.netWorth.toLocaleString()}</strong>.<br>Industry standard: <a href='https://www.nerdwallet.com/article/finance/net-worth-calculator' target='_blank' rel='noopener'>NerdWallet</a>`,\r\n                breakdownId: 'breakdown-net-worth'\r\n            });\r\n        }\r\n        // Savings Rate\r\n        if (typeof km.savingsRate === 'number' && savingsRateBreakdown) {\r\n            insights.push({\r\n                icon: km.savingsRate >= 10 ? '💡' : '⚠️',\r\n                headline: 'Savings Rate',\r\n                value: `${km.savingsRate.toFixed(1)}%`,\r\n                explanation: km.savingsRate >= 10 ? 'Good savings rate.' : 'Aim to save at least 10% of income.',\r\n                positive: km.savingsRate >= 10,\r\n                breakdown: `Savings Rate = Savings ($${savingsRateBreakdown.savings.toLocaleString()}) / Total Income ($${savingsRateBreakdown.totalIncome.toLocaleString()}) × 100 = <strong>${savingsRateBreakdown.savingsRate.toFixed(1)}%</strong>.`,\r\n                breakdownId: 'breakdown-savings-rate'\r\n            });\r\n        }\r\n        return `\r\n        <div class=\"key-insights\" style=\"display:flex;flex-wrap:wrap;gap:1rem;justify-content:center;\">\r\n            ${insights.map((insight) => `\r\n                <div class=\"insight-card\" style=\"flex:1 1 220px;min-width:180px;max-width:260px;background:#fff;border-radius:12px;box-shadow:0 2px 8px rgba(0,0,0,0.06);padding:1rem;display:flex;flex-direction:column;align-items:center;position:relative;\">\r\n                    <span class=\"insight-icon\" aria-label=\"${insight.headline}\" style=\"font-size:2rem;\">${insight.icon}</span>\r\n                    <div class=\"insight-headline\" style=\"font-weight:600;font-size:1.1rem;margin-top:0.5rem;display:flex;align-items:center;gap:0.3rem;\">\r\n                        ${insight.headline}\r\n                        <button class=\"info-toggle\" aria-expanded=\"false\" aria-controls=\"${insight.breakdownId}\" tabindex=\"0\" title=\"How is this calculated?\" style=\"background:none;border:none;cursor:pointer;font-size:1.1rem;color:#2563eb;outline:none;\" data-breakdown-id=\"${insight.breakdownId}\">&#9432;</button>\r\n                    </div>\r\n                    <div class=\"insight-value\" style=\"font-size:1.3rem;font-weight:bold;margin:0.5rem 0;\">${insight.value}</div>\r\n                    <div class=\"insight-explanation\" style=\"font-size:0.98rem;color:${insight.positive ? '#10b981' : '#ef4444'};\">${insight.explanation}</div>\r\n                    <div class=\"insight-breakdown breakdown-collapsible\" id=\"${insight.breakdownId}\" style=\"display:none;margin-top:0.5rem;font-size:0.92rem;background:#f3f4f6;padding:0.7rem 0.8rem;border-radius:8px;\">${insight.breakdown || ''}</div>\r\n                </div>\r\n            `).join('')}\r\n        </div>\r\n        <style>\r\n        @media (max-width: 600px) {\r\n            .key-insights { flex-direction:column; align-items:stretch; }\r\n            .insight-card { min-width:unset; max-width:unset; width:100%; }\r\n        }\r\n        .info-toggle:focus { outline: 2px solid #2563eb; }\r\n        </style>\r\n        `;\r\n    }\r\n\r\n    /**\r\n     * Generates the action plan section HTML.\r\n     * @param analysisResult - The analysis result object.\r\n     * @returns The HTML string for the action plan section.\r\n     */\r\n    private generateActionPlanSection(analysisResult: ComprehensiveAnalysisResult): string {\r\n        // Defensive: Only show actionable steps if present\r\n        const recs = analysisResult.prioritizedRecommendations || [];\r\n        if (!recs.length) {\r\n            return `<div class=\"action-plan-section\" aria-labelledby=\"action-plan-heading\" style=\"text-align:center; padding:24px 0;\">\r\n              <h2 id=\"action-plan-heading\" style=\"font-size:1.2rem; margin-bottom:8px;\">Personalized Action Plan</h2>\r\n              <div style=\"color:#10b981; font-size:1.1rem;\">You're on track! No urgent actions needed.</div>\r\n            </div>`;\r\n        }\r\n        return `<div class=\"action-plan-section\" aria-labelledby=\"action-plan-heading\">\r\n          <h2 id=\"action-plan-heading\" style=\"font-size:1.2rem; margin-bottom:8px;\">Personalized Action Plan</h2>\r\n          <ol class=\"action-plan-list\" style=\"list-style:none; padding:0; margin:0;\">\r\n            ${recs.map((rec, idx) => `\r\n              <li class=\"action-step-card\" style=\"margin-bottom:18px; background:#f3f4f6; border-radius:10px; padding:16px; display:flex; align-items:flex-start; gap:1rem;\">\r\n                <span class=\"step-icon\" aria-label=\"Step ${idx+1}\" style=\"font-size:1.5rem; color:#3b82f6; font-weight:bold;\">${idx+1}</span>\r\n                <div style=\"flex:1;\">\r\n                  <div style=\"font-weight:600; color:#2563eb; font-size:1.05rem;\">${rec.title}</div>\r\n                  <div style=\"font-size:0.98rem; color:#444; margin-bottom:4px;\">${rec.description}</div>\r\n                  <ul style=\"margin:0 0 0 16px; padding:0; color:#374151; font-size:0.97rem;\">\r\n                    ${rec.actionSteps.map(step => `<li style=\"margin-bottom:2px;\">${step}</li>`).join('')}\r\n                  </ul>\r\n                  <div style=\"font-size:0.9rem; color:#888; margin-top:4px;\">Timeframe: ${this.formatTimeframe(rec.timeframe)} | Impact: ${this.formatImpact(rec.impactLevel)}</div>\r\n                </div>\r\n              </li>\r\n            `).join('')}\r\n          </ol>\r\n        </div>`;\r\n    }\r\n\r\n    /**\r\n     * Attaches interactive elements for accessibility and info toggles.\r\n     */\r\n    private attachInteractiveElements(): void {\r\n        // Add event listeners for info buttons to toggle breakdowns\r\n        const infoButtons = this.container.querySelectorAll('.info-toggle');\r\n        infoButtons.forEach(btn => {\r\n            btn.addEventListener('click', (e) => {\r\n                const breakdownId = (e.currentTarget as HTMLElement).getAttribute('data-breakdown-id');\r\n                if (!breakdownId) return;\r\n                const breakdown = this.container.querySelector(`#${breakdownId}`) as HTMLElement;\r\n                if (breakdown) {\r\n                    const expanded = breakdown.style.display === 'block';\r\n                    breakdown.style.display = expanded ? 'none' : 'block';\r\n                    (e.currentTarget as HTMLElement).setAttribute('aria-expanded', (!expanded).toString());\r\n                }\r\n            });\r\n            // Keyboard accessibility\r\n            btn.addEventListener('keydown', (e) => {\r\n                const ke = e as KeyboardEvent;\r\n                if (ke.key === 'Enter' || ke.key === ' ') {\r\n                    ke.preventDefault();\r\n                    (btn as HTMLElement).click();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private formatTimeframe(timeframe: string): string {\r\n        const timeframeMap: { [key: string]: string } = {\r\n            'immediate': 'This Week',\r\n            'short-term': '1-3 Months',\r\n            'medium-term': '3-12 Months',\r\n            'long-term': '1+ Years'\r\n        };\r\n        return timeframeMap[timeframe] || timeframe;\r\n    }\r\n\r\n    private formatImpact(impact: string): string {\r\n        const impactMap: { [key: string]: string } = {\r\n            'high': 'High',\r\n            'medium': 'Medium',\r\n            'low': 'Low'\r\n        };\r\n        return impactMap[impact] || impact;\r\n    }\r\n\r\n    /**\r\n     * Gets the color for the score circle based on health level.\r\n     * @param level - The health level string.\r\n     * @returns The color hex code.\r\n     */\r\n    private getScoreColor(level: string): string {\r\n        const colorMap: { [key: string]: string } = {\r\n            'excellent': '#10b981',\r\n            'good': '#3b82f6',\r\n            'fair': '#f59e0b',\r\n            'limited': '#ef4444',\r\n            'critical': '#ef4444'\r\n        };\r\n        return colorMap[level] || '#555';\r\n    }\r\n} ","/**\r\n * Improved Financial Health Analyzer Application\r\n * Addresses customer feedback:\r\n * 1. Analysis uses data provided correctly\r\n * 2. Results are clear and actionable\r\n * 3. Reduced input requirements with Quick Analysis option\r\n *\r\n * @remarks\r\n * - Strictly typed, fully documented, and validated per project rules.\r\n * - All user input is validated and sanitized before analysis.\r\n * - UI/UX is mobile-first and accessible.\r\n */\r\n\r\nimport { UserFinancialData } from './interfaces/core-types';\r\nimport { ComprehensiveAnalysisResult } from './interfaces/analysis-types';\r\nimport { FinancialCalculationEngine } from './core/calculations';\r\nimport { MultiStepForm } from './components/forms/MultiStepForm';\r\nimport { QuickAnalysisForm } from './components/forms/QuickAnalysisForm';\r\nimport { EnhancedResultsDisplay } from './components/ui/EnhancedResultsDisplay';\r\n\r\n/**\r\n * ImprovedFinancialHealthApp\r\n * Main application controller for the Financial Health Analyzer.\r\n */\r\nexport class ImprovedFinancialHealthApp {\r\n    private currentAnalysisType: 'quick' | 'comprehensive' | null = null;\r\n    private multiStepForm?: MultiStepForm; // Used for comprehensive analysis\r\n    private quickForm?: QuickAnalysisForm;\r\n    private resultsDisplay?: EnhancedResultsDisplay;\r\n\r\n    // DOM Elements\r\n    private analysisChoiceContainer?: HTMLElement;\r\n    private formContainer?: HTMLElement;\r\n    private resultsContainer?: HTMLElement;\r\n\r\n    /**\r\n     * Initializes the application and attaches event listeners.\r\n     */\r\n    constructor() {\r\n        this.initializeDOMElements();\r\n        this.attachEventListeners();\r\n        this.showAnalysisChoice();\r\n    }\r\n\r\n    /**\r\n     * Initializes required DOM elements for the app.\r\n     */\r\n    private initializeDOMElements(): void {\r\n        this.analysisChoiceContainer = document.getElementById('analysisChoiceContainer') || undefined;\r\n        this.formContainer = document.getElementById('formContainer') || undefined;\r\n        this.resultsContainer = document.getElementById('resultsContainer') || undefined;\r\n\r\n        if (!this.analysisChoiceContainer || !this.formContainer || !this.resultsContainer) {\r\n            throw new Error('Required DOM elements not found');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attaches event listeners for analysis type selection.\r\n     */\r\n    private attachEventListeners(): void {\r\n        // Analysis type choice buttons\r\n        const quickBtn = document.getElementById('chooseQuickAnalysis');\r\n        const comprehensiveBtn = document.getElementById('chooseComprehensiveAnalysis');\r\n\r\n        if (quickBtn) {\r\n            quickBtn.addEventListener('click', () => {\r\n                this.startQuickAnalysis();\r\n            });\r\n        }\r\n\r\n        if (comprehensiveBtn) {\r\n            comprehensiveBtn.addEventListener('click', () => {\r\n                this.startComprehensiveAnalysis();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows the analysis type choice screen.\r\n     */\r\n    private showAnalysisChoice(): void {\r\n        if (this.analysisChoiceContainer && this.formContainer && this.resultsContainer) {\r\n            this.analysisChoiceContainer.style.display = 'block';\r\n            this.formContainer.style.display = 'none';\r\n            this.resultsContainer.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the quick analysis flow and renders the quick form.\r\n     */\r\n    private startQuickAnalysis(): void {\r\n        this.currentAnalysisType = 'quick';\r\n        this.showFormContainer();\r\n\r\n        // Initialize Quick Analysis Form\r\n        if (this.formContainer) {\r\n            this.formContainer.innerHTML = '<div id=\"quickFormContainer\"></div>';\r\n            this.quickForm = new QuickAnalysisForm('quickFormContainer', (userData) => {\r\n                this.handleFormSubmission(userData);\r\n            });\r\n            this.quickForm.render();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the comprehensive analysis flow and renders the multi-step form.\r\n     */\r\n    private startComprehensiveAnalysis(): void {\r\n        this.currentAnalysisType = 'comprehensive';\r\n        this.showFormContainer();\r\n\r\n        // Initialize Multi-Step Form\r\n        if (this.formContainer) {\r\n            this.formContainer.innerHTML = '<div id=\"multiStepFormContainer\"></div>';\r\n            const container = document.getElementById('multiStepFormContainer');\r\n            if (container) {\r\n                this.multiStepForm = new MultiStepForm(container, {\r\n                    onComplete: (userData: UserFinancialData) => {\r\n                        this.handleFormSubmission(userData);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows the form container and hides other sections.\r\n     */\r\n    private showFormContainer(): void {\r\n        if (this.analysisChoiceContainer && this.formContainer && this.resultsContainer) {\r\n            this.analysisChoiceContainer.style.display = 'none';\r\n            this.formContainer.style.display = 'block';\r\n            this.resultsContainer.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles form submission, performs analysis, and displays results.\r\n     * @param userData - Validated user financial data from the form\r\n     */\r\n    private async handleFormSubmission(userData: UserFinancialData): Promise<void> {\r\n        try {\r\n            this.showLoadingState();\r\n            // Ensure we're using fresh data directly from the form\r\n            // Input sanitization should be performed in the form component before this point\r\n            // Remove or guard console.log in production\r\n            // console.log('Processing user data:', userData);\r\n            // Perform the financial analysis\r\n            const analysisResult = await this.performAnalysis(userData);\r\n            // Display the results\r\n            this.displayResults(analysisResult);\r\n        } catch (error) {\r\n            // User-facing error message is clear and actionable\r\n            this.showError('Analysis failed. Please try again.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows a loading state while analysis is being performed.\r\n     * Updates ARIA attributes for accessibility.\r\n     */\r\n    private showLoadingState(): void {\r\n        if (this.formContainer && this.resultsContainer) {\r\n            this.formContainer.style.display = 'none';\r\n            this.resultsContainer.style.display = 'block';\r\n            // Show loading indicator\r\n            const loadingIndicator = document.getElementById('loadingIndicator');\r\n            const analysisResults = document.getElementById('analysisResults');\r\n            if (loadingIndicator && analysisResults) {\r\n                loadingIndicator.style.display = 'block';\r\n                analysisResults.style.display = 'none';\r\n                // Accessibility: update ARIA attributes\r\n                loadingIndicator.setAttribute('role', 'status');\r\n                loadingIndicator.setAttribute('aria-live', 'polite');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the financial analysis using the calculation engine.\r\n     * @param userData - Validated user financial data\r\n     * @returns ComprehensiveAnalysisResult\r\n     */\r\n    private async performAnalysis(userData: UserFinancialData): Promise<ComprehensiveAnalysisResult> {\r\n        // Simulate processing delay for better UX\r\n        await new Promise(resolve => setTimeout(resolve, 1500));\r\n        // Use the FinancialCalculationEngine to perform the analysis\r\n        return FinancialCalculationEngine.analyzeFinancialHealth(userData);\r\n    }\r\n\r\n    /**\r\n     * Displays the analysis results using the enhanced results display component.\r\n     * @param analysisResult - The result of the financial analysis\r\n     */\r\n    private displayResults(analysisResult: ComprehensiveAnalysisResult): void {\r\n        // Hide loading indicator\r\n        const loadingIndicator = document.getElementById('loadingIndicator');\r\n        const analysisResults = document.getElementById('analysisResults');\r\n        if (loadingIndicator && analysisResults) {\r\n            loadingIndicator.style.display = 'none';\r\n            analysisResults.style.display = 'block';\r\n        }\r\n        // Initialize enhanced results display\r\n        if (this.resultsContainer) {\r\n            // Clear existing results and create enhanced display container\r\n            const existingResults = document.getElementById('analysisResults');\r\n            if (existingResults) {\r\n                existingResults.innerHTML = '<div id=\"enhancedResults\"></div>';\r\n                this.resultsDisplay = new EnhancedResultsDisplay('enhancedResults');\r\n                this.resultsDisplay.render(analysisResult);\r\n            }\r\n        }\r\n        // Add navigation options\r\n        this.addResultsNavigation();\r\n    }\r\n\r\n    /**\r\n     * Adds navigation options to the results display (e.g., start new analysis).\r\n     * Ensures accessibility for navigation controls.\r\n     */\r\n    private addResultsNavigation(): void {\r\n        const resultsContainer = document.getElementById('enhancedResults');\r\n        if (resultsContainer) {\r\n            const navigationHTML = `\r\n                <div class=\"results-navigation\">\r\n                    <div class=\"nav-actions\">\r\n                        <button class=\"btn btn-outline\" id=\"startNewAnalysis\" aria-label=\"Start New Analysis\">\r\n                            📊 Start New Analysis\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"analysis-info\">\r\n                        <p class=\"analysis-type\">\r\n                            Analysis Type: <strong>${this.currentAnalysisType === 'quick' ? 'Quick Analysis' : 'Comprehensive Analysis'}</strong>\r\n                        </p>\r\n                        <p class=\"analysis-date\">\r\n                            Generated: <strong>${new Date().toLocaleDateString()}</strong>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            resultsContainer.insertAdjacentHTML('beforeend', navigationHTML);\r\n            const startNewBtn = document.getElementById('startNewAnalysis');\r\n            if (startNewBtn) {\r\n                startNewBtn.addEventListener('click', () => {\r\n                    this.resetApplication();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the application to the initial state.\r\n     */\r\n    private resetApplication(): void {\r\n        this.currentAnalysisType = null;\r\n        // Reset form instances\r\n        if (this.multiStepForm) {\r\n            this.multiStepForm = undefined;\r\n        }\r\n        if (this.quickForm) {\r\n            this.quickForm = undefined;\r\n        }\r\n        if (this.resultsDisplay) {\r\n            this.resultsDisplay = undefined;\r\n        }\r\n        this.showAnalysisChoice();\r\n    }\r\n\r\n    /**\r\n     * Shows a user-facing error message as a toast notification.\r\n     * @param message - The error message to display\r\n     * Adds role=\"alert\" for accessibility.\r\n     */\r\n    private showError(message: string): void {\r\n        // Show error message to user\r\n        const errorContainer = document.createElement('div');\r\n        errorContainer.className = 'error-toast';\r\n        errorContainer.setAttribute('role', 'alert'); // Accessibility\r\n        errorContainer.innerHTML = `\r\n            <div class=\"toast-content\">\r\n                <span class=\"toast-icon\">❌</span>\r\n                <span class=\"toast-message\">${message}</span>\r\n            </div>\r\n        `;\r\n        document.body.appendChild(errorContainer);\r\n        // Remove after 5 seconds\r\n        setTimeout(() => {\r\n            if (errorContainer.parentNode) {\r\n                errorContainer.parentNode.removeChild(errorContainer);\r\n            }\r\n        }, 5000);\r\n    }\r\n}\r\n\r\n// Initialize the application when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    new ImprovedFinancialHealthApp();\r\n}); "],"names":["module","exports","styleElement","nonce","setAttribute","stylesInDOM","getIndexByIdentifier","identifier","result","i","length","modulesToDom","list","options","idCountMap","identifiers","item","id","base","count","concat","indexByIdentifier","obj","css","media","sourceMap","supports","layer","references","updater","addElementStyle","byIndex","splice","push","api","domAPI","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","styleSheet","cssText","firstChild","removeChild","appendChild","document","createTextNode","cssWithMappingToString","toString","this","map","content","needLayer","join","modules","dedupe","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","___CSS_LOADER_EXPORT___","element","createElement","setAttributes","attributes","insert","memo","style","target","styleTarget","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","insertStyleElement","styleTagTransform","apply","parentNode","removeStyleElement","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call","nc","RecommendationEngine","generateRecommendations","analysis","recommendations","keyMetrics","debtToIncomeRatio","savingsRate","monthlyCashFlow","creditScore","investments","age","assets","checking","savings","emergencyFund","expenses","housing","food","transportation","utilities","totalLiquidAssets","totalMonthlyExpenses","isNaN","months","needed","Math","max","category","priority","title","description","toFixed","amount","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","format","actionSteps","timeframe","impactLevel","getEmergencyFundRecommendations","liabilities","isQuickAnalysis","income","primarySalary","ratio","getHousingCostRatioRecommendations","getCombinedInsightRecommendations","isComprehensiveAnalysis","personalInfo","employer401k","traditionalIRA","rothIRA","brokerageAccounts","stocks","bonds","mutualFunds","insurance","dependents","recs","healthInsurance","lifeInsurance","getInsuranceAdequacyRecommendations","sort","b","priorityOrder","high","medium","low","Array","from","Map","r","values","slice","hasMinimalFields","creditCardDebt","hasComprehensiveFields","secondaryIncome","FinancialCalculationEngine","analyzeFinancialHealth","validateUserData","calculateKeyMetrics","healthIndicators","calculateHealthIndicators","overallHealthScore","calculateOverallHealthScore","healthLevel","getHealthLevel","liquidityAnalysis","analyzeLiquidity","debtAnalysis","analyzeDebt","investmentAnalysis","analyzeInvestments","insuranceAnalysis","analyzeInsurance","wealthProjections","projectWealth","scenarioAnalysis","analyzeScenarios","prioritizedRecommendations","peerBenchmarks","calculatePeerBenchmarks","detailedInsights","generateDetailedInsights","financialRatios","calculateFinancialRatios","riskAssessment","assessFinancialRisk","goalAnalysis","analyzeFinancialGoals","totalIncome","getTotalMonthlyIncome","totalExpenses","getTotalMonthlyExpenses","totalAssets","getTotalAssets","totalLiabilities","getTotalLiabilities","netWorth","moneyMarket","totalDebt","getTotalDebt","netWorthBreakdown","dtiBreakdown","emergencyFundMonths","behaviors","monthlyInvestmentContribution","creditUtilization","totalCreditLimit","liquidityRatio","assetAllocationScore","calculateAssetAllocationScore","analyzeSpendingVsIncome","analyzeBillPaymentReliability","analyzeEmergencySavings","analyzeDebtManagement","analyzeCreditHealth","analyzeInsuranceConfidence","analyzeLongTermGoalConfidence","analyzeFinancialPlanningEngagement","cashFlowRatio","score","status","name","weight","metrics","value","formatCurrency","numericValue","benchmark","improvement","getSpendingRecommendations","explanation","reliability","billPaymentReliability","formatReliabilityText","getCreditScoreStatus","getPaymentReliabilityRecommendations","totalMonthlyIncome","totalMonthlyDebt","getDebtManagementRecommendations","round","businessIncome","investmentIncome","rentalIncome","benefitsIncome","otherIncome","loanPayments","childcare","healthcare","clothing","personalCare","entertainment","diningOut","hobbies","subscriptions","shopping","travel","creditCardPayments","studentLoanPayments","otherDebtPayments","primaryResidence","investmentProperties","cryptocurrency","preciousMetals","collectibles","businessEquity","otherAssets","reduce","sum","Number","indicators","totalWeightedScore","totalWeight","indicator","getCreditUtilizationStatus","getCreditHealthRecommendations","hasHealthInsurance","hasLifeInsurance","hasDisabilityInsurance","shortTermDisability","longTermDisability","confidence","insuranceConfidence","insuranceCount","formatConfidenceText","getInsuranceRecommendations","retirementConfidence","goals","hasRetirementSavings","monthlyInvestment","getRetirementRecommendations","budgeting","budgetingMethod","planning","financialPlanningEngagement","budgetScore","planningScore","formatBudgetText","formatPlanningText","getPlanningRecommendations","totalInvestments","investmentRatio","targetStockAllocation","allocationScore","abs","_keyMetrics","monthlyExpenses","monthlyIncome","investmentRate","coverageScore","currentAge","yearsToRetirement","retirementAge","currentInvestments","projections","rate","forEach","scenario","monthlyRate","totalProjected","pow","projectedValue","monthlyContribution","assumptions","toLocaleString","impact","timeToRecover","probability","_healthIndicators","debtStructure","mortgageBalance","homeEquityLoan","autoLoans","securedCreditLines","personalLoans","studentLoans","medicalDebt","businessLoans","businessCreditLines","taxDebt","legalJudgments","otherDebt","expenseCategories","investmentBreakdown","insuranceAdequacy","liquidityRatios","currentRatio","quickRatio","emergencyFundRatio","leverageRatios","debtToAssetRatio","equityRatio","efficiencyRatios","expenseRatio","risks","level","mitigation","overallRiskLevel","riskFactors","retirementReadiness","currentSavings","calculateRetirementProjection","onTrack","isRetirementOnTrack","emergencyGoal","current","progress","timeToGoal","calculateTimeToEmergencyGoal","retirementIncomeNeeded","ceil","ageGroup","floor","incomeGroup","netWorthPercentile","savingsRatePercentile","debtRatioPercentile","utilization","replace","l","toUpperCase","budget","console","log","cashFlow","locals","MultiStepForm","constructor","container","callbacks","currentStepIndex","formData","steps","onDataChange","onComplete","initializeSteps","initializeFormData","render","fields","type","label","required","validation","min","isComplete","validationErrors","step","maritalStatus","state","employmentStatus","employmentTenure","healthStatus","incomeGrowthRate","incomeVariability","effectiveTaxRate","healthDeductible","healthOutOfPocketMax","lifeCoverageAmount","disabilityCoveragePercent","homeInsurance","autoInsurance","umbrellaPolicy","emergencyFundTarget","debtPayoffGoal","majorPurchaseAmount","homeDownPayment","educationFunding","careerChangeBuffer","legacyGoalAmount","longTermGoalConfidence","riskTolerance","investmentExperience","automaticSavings","emergencyFundPriority","impulseSpendingFrequency","expenseTrackingMethod","innerHTML","renderCurrentStep","attachEventListeners","field","renderField","getFieldValue","option","fieldId","prevBtn","nextBtn","addEventListener","previousStep","nextStep","querySelectorAll","input","handleFieldChange","event","parseFloat","find","f","updateFormData","validateCurrentStep","currentStep","errors","numValue","completeForm","showValidationErrors","alert","userData","buildCompleteUserData","getCurrentData","QuickAnalysisForm","containerId","onSubmit","getElementById","generateHTML","form","preventDefault","handleSubmit","handleInputChange","dataset","formatCurrencyInput","validateField","attachTooltips","_input","updateRealTimeCalculations","updateProgress","updateSubmitButton","getNumericValue","debt","emergencyMonths","textContent","className","debtRatioElement","debtRatio","fieldName","inputs","completedFields","trim","progressFill","progressText","width","button","allValid","htmlInput","checkValidity","disabled","classList","toggle","fieldContainer","closest","feedback","isValid","message","display","icon","tooltipText","tooltip","showTooltip","hideTooltip","text","body","rect","getBoundingClientRect","top","scrollY","left","transform","FormData","btnText","btnLoader","contains","resetSubmitButton","errorContainer","buildUserDataFromForm","monthlyHousing","totalSavings","error","EnhancedResultsDisplay","analysisResult","generateOverallScoreSection","generateKeyInsightsSection","generateActionPlanSection","attachInteractiveElements","scoreText","getScoreColor","km","savingsRateBreakdown","insights","headline","positive","breakdown","breakdownId","insight","rec","idx","formatTimeframe","formatImpact","btn","currentTarget","getAttribute","expanded","ke","click","ImprovedFinancialHealthApp","currentAnalysisType","initializeDOMElements","showAnalysisChoice","analysisChoiceContainer","formContainer","resultsContainer","quickBtn","comprehensiveBtn","startQuickAnalysis","startComprehensiveAnalysis","showFormContainer","quickForm","handleFormSubmission","multiStepForm","showLoadingState","performAnalysis","displayResults","showError","loadingIndicator","analysisResults","Promise","resolve","setTimeout","existingResults","resultsDisplay","addResultsNavigation","navigationHTML","Date","toLocaleDateString","insertAdjacentHTML","startNewBtn","resetApplication"],"sourceRoot":""}