{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://financial-adviser-app/./src/utils/format-utils.ts","webpack://financial-adviser-app/./src/core/RecommendationEngine.ts","webpack://financial-adviser-app/./src/core/calculations.ts","webpack://financial-adviser-app/./src/components/forms/MultiStepForm.ts","webpack://financial-adviser-app/./src/components/forms/QuickAnalysisForm.ts","webpack://financial-adviser-app/./src/components/ui/EnhancedResultsDisplay.ts","webpack://financial-adviser-app/./src/ImprovedApp.ts"],"sourcesContent":["/**\r\n * Utility functions for formatting data for display.\r\n */\r\n\r\n/**\r\n * Formats a number as a US currency string.\r\n * @param amount The number to format.\r\n * @returns A string formatted as currency (e.g., \"$1,234.56\").\r\n */\r\nexport function formatCurrency(amount: number): string {\r\n    if (typeof amount !== 'number' || isNaN(amount)) return 'N/A';\r\n    if (amount === 0) return '$0';\r\n    return new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 0,\r\n    }).format(Math.round(amount));\r\n} ","import { ComprehensiveAnalysisResult, HealthIndicator, Recommendation } from '../interfaces/analysis-types';\r\nimport { UserFinancialData } from '../interfaces/core-types';\r\nimport { formatCurrency } from '../utils/format-utils';\r\n\r\n/**\r\n * Generates actionable, prioritized recommendations based on the financial analysis.\r\n */\r\nexport class RecommendationEngine {\r\n\r\n    /**\r\n     * Main function to generate all recommendations.\r\n     * @param analysis - The full comprehensive analysis result.\r\n     * @param data - The original user financial data.\r\n     * @returns A sorted and deduplicated array of Recommendation objects.\r\n     */\r\n    public static generateRecommendations(analysis: ComprehensiveAnalysisResult, data: UserFinancialData): Recommendation[] {\r\n        let recommendations: Recommendation[] = [];\r\n        const { healthIndicators, keyMetrics } = analysis;\r\n\r\n        // --- HIGH PRIORITY: Critical Issues & Risks ---\r\n        recommendations.push(...this.getEmergencyFundRecommendations(keyMetrics, data));\r\n        recommendations.push(...this.getHighDebtRecommendations(keyMetrics, data));\r\n        recommendations.push(...this.getNegativeCashFlowRecommendations(keyMetrics));\r\n\r\n        // --- MEDIUM PRIORITY: Opportunities & Important Improvements ---\r\n        recommendations.push(...this.getSavingsRateRecommendations(keyMetrics));\r\n        recommendations.push(...this.getInsuranceRecommendations(data));\r\n        recommendations.push(...this.getCreditScoreOptimizationRecommendations(data.liabilities.creditScore));\r\n        recommendations.push(...this.getInvestmentRecommendations(data, keyMetrics));\r\n\r\n        // --- LOW PRIORITY: Fine-Tuning & Best Practices ---\r\n        recommendations.push(...this.getBudgetingRecommendations(data));\r\n        recommendations.push(...this.getAutomatedSavingsRecommendations(data));\r\n        \r\n        // Add recommendations based on overall indicator status (as a fallback)\r\n        healthIndicators.forEach(indicator => {\r\n            recommendations.push(...this.getGenericIndicatorRecommendations(indicator));\r\n        });\r\n\r\n        // Sort recommendations by priority: high -> medium -> low\r\n        recommendations.sort((a, b) => {\r\n            const priorityOrder = { high: 0, medium: 1, low: 2 };\r\n            return priorityOrder[a.priority] - priorityOrder[b.priority];\r\n        });\r\n\r\n        // Deduplicate and return the top recommendations\r\n        const uniqueRecommendations = Array.from(new Map(recommendations.map(r => [r.id, r])).values());\r\n        return uniqueRecommendations.slice(0, 10); // Return up to 10\r\n    }\r\n    \r\n    // ===================================================================\r\n    // HIGH PRIORITY RECOMMENDATION LOGIC\r\n    // ===================================================================\r\n\r\n    private static getEmergencyFundRecommendations(keyMetrics: any, data: UserFinancialData): Recommendation[] {\r\n        const recommendations: Recommendation[] = [];\r\n        const { emergencyFundMonths, totalLiquidAssets } = keyMetrics;\r\n        const totalMonthlyExpenses = data.expenses.housing + data.expenses.food + data.expenses.transportation + data.expenses.utilities; // Simplified for quick analysis\r\n        \r\n        if (totalMonthlyExpenses <= 0) return []; // Cannot calculate if expenses are zero\r\n\r\n        const targetFund = totalMonthlyExpenses * 3; // Target 3 months for high priority\r\n\r\n        if (emergencyFundMonths < 1) {\r\n            recommendations.push({\r\n                id: 'emergency-fund-critical',\r\n                category: 'savings',\r\n                priority: 'high',\r\n                title: 'Critically Low Emergency Fund',\r\n                description: `You have less than one month of expenses saved (${formatCurrency(totalLiquidAssets)}). This puts you at high risk for financial hardship if you face an unexpected event. Building a safety net should be your top priority.`,\r\n                actionSteps: [\r\n                    `Immediately open or fund a dedicated high-yield savings account.`,\r\n                    `Set a goal to save at least one full month of expenses (${formatCurrency(totalMonthlyExpenses)}) as quickly as possible.`,\r\n                    `Pause all non-essential spending and investments until this initial goal is met.`\r\n                ],\r\n                timeframe: 'next-30-days',\r\n                impactLevel: 'high'\r\n            });\r\n        } else if (emergencyFundMonths < 3) {\r\n            const amountNeeded = targetFund - totalLiquidAssets;\r\n            recommendations.push({\r\n                id: 'emergency-fund-low',\r\n                category: 'savings',\r\n                priority: 'high',\r\n                title: 'Build Your 3-Month Emergency Fund',\r\n                description: `You currently have ${emergencyFundMonths.toFixed(1)} months of expenses saved. While this is a good start, aiming for at least 3 months provides a much stronger safety net. You need to save approximately ${formatCurrency(amountNeeded)} more to reach this goal.`,\r\n                actionSteps: [\r\n                    `Calculate your exact total monthly expenses to confirm your target of ${formatCurrency(targetFund)}.`,\r\n                    `Set up an automatic recurring transfer to your savings account each payday.`,\r\n                    `Look for opportunities to reduce spending (e.g., dining out, subscriptions) and redirect that money to savings.`\r\n                ],\r\n                timeframe: '1-3-months',\r\n                impactLevel: 'high'\r\n            });\r\n        }\r\n        return recommendations;\r\n    }\r\n\r\n    private static getHighDebtRecommendations(keyMetrics: any, _data: UserFinancialData): Recommendation[] {\r\n        const recommendations: Recommendation[] = [];\r\n        const { debtToIncomeRatio, creditUtilization } = keyMetrics;\r\n\r\n        if (debtToIncomeRatio > 43) {\r\n             recommendations.push({\r\n                id: 'dti-ratio-high',\r\n                category: 'debt',\r\n                priority: 'high',\r\n                title: 'Aggressively Pay Down High-Interest Debt',\r\n                description: `Your debt-to-income (DTI) ratio is ${debtToIncomeRatio.toFixed(1)}%, which is considered high and may impact your ability to borrow in the future. Creating a focused debt-repayment plan is essential.`,\r\n                actionSteps: [\r\n                    `List all your debts from highest interest rate to lowest (this is the \"Avalanche\" method).`,\r\n                    `Make minimum payments on all debts, but put every extra dollar towards the debt with the highest interest rate.`,\r\n                    `Consider a debt consolidation loan or balance transfer card to lower your interest rates, but be mindful of fees.`\r\n                ],\r\n                timeframe: '3-6-months',\r\n                impactLevel: 'high'\r\n            });\r\n        }\r\n        \r\n        if (creditUtilization > 50) {\r\n             recommendations.push({\r\n                id: 'credit-utilization-high',\r\n                category: 'debt',\r\n                priority: 'high',\r\n                title: 'Lower Your Credit Utilization',\r\n                description: `Your credit utilization is ${creditUtilization.toFixed(1)}%, which is significantly impacting your credit score. Lowering this is one of the fastest ways to improve your financial health.`,\r\n                actionSteps: [\r\n                    `Make paying down your credit card balances your top priority.`,\r\n                    `If possible, make multiple small payments throughout the month instead of one large one.`,\r\n                    `Consider asking for a credit limit increase on your existing cards (if you can trust yourself not to spend more).`\r\n                ],\r\n                timeframe: '1-3-months',\r\n                impactLevel: 'high'\r\n            });\r\n        }\r\n        return recommendations;\r\n    }\r\n    \r\n    private static getNegativeCashFlowRecommendations(keyMetrics: any): Recommendation[] {\r\n        if (keyMetrics.monthlyCashFlow < 0) {\r\n            return [{\r\n                id: 'negative-cash-flow',\r\n                category: 'spending',\r\n                priority: 'high',\r\n                title: 'Address Negative Monthly Cash Flow',\r\n                description: `You are spending ${formatCurrency(Math.abs(keyMetrics.monthlyCashFlow))} more than you earn each month. This is unsustainable and requires immediate attention to create a budget and cut expenses.`,\r\n                actionSteps: [\r\n                    `Track every dollar you spend for the next 30 days using an app or spreadsheet.`,\r\n                    `Identify 3-5 non-essential spending categories where you can cut back immediately (e.g., dining out, subscriptions, shopping).`,\r\n                    `Build a detailed monthly budget based on your findings and stick to it.`\r\n                ],\r\n                timeframe: 'next-30-days',\r\n                impactLevel: 'high'\r\n            }];\r\n        }\r\n        return [];\r\n    }\r\n    \r\n    // ===================================================================\r\n    // MEDIUM PRIORITY RECOMMENDATION LOGIC\r\n    // ===================================================================\r\n\r\n    private static getSavingsRateRecommendations(keyMetrics: any): Recommendation[] {\r\n        const { savingsRate } = keyMetrics;\r\n        if (savingsRate >= 0 && savingsRate < 10) {\r\n            return [{\r\n                id: 'increase-savings-rate',\r\n                category: 'savings',\r\n                priority: 'medium',\r\n                title: 'Increase Your Savings Rate',\r\n                description: `Your current savings rate is ${savingsRate.toFixed(1)}%. While any saving is good, a healthy target is between 10-20% of your income. A higher rate will accelerate your progress towards your financial goals.`,\r\n                actionSteps: [\r\n                    `Try to increase your savings rate by 1% each month.`,\r\n                    `Allocate any future pay raises or bonuses directly to savings or investments.`,\r\n                    `Review your budget for small, recurring expenses that can be cut and redirected to savings.`\r\n                ],\r\n                timeframe: 'ongoing',\r\n                impactLevel: 'medium'\r\n            }];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private static getInsuranceRecommendations(data: UserFinancialData): Recommendation[] {\r\n        if (data.insurance.insuranceConfidence !== 'very-confident') {\r\n            return [{\r\n                id: 'review-insurance-coverage',\r\n                category: 'risk',\r\n                priority: 'medium',\r\n                title: 'Review Your Insurance Coverage',\r\n                description: `You indicated you are not 'very confident' in your insurance coverage. Having the right insurance is crucial for protecting your financial well-being from unexpected events.`,\r\n                actionSteps: [\r\n                    `Schedule a free review with your current insurance agent(s) to discuss your life, disability, home/auto policies.`,\r\n                    `Assess your life insurance needs. A common rule of thumb is 10-12 times your annual income.`,\r\n                    `Ensure you have long-term disability insurance that covers at least 60% of your income.`\r\n                ],\r\n                timeframe: 'next-3-months',\r\n                impactLevel: 'high'\r\n            }];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private static getCreditScoreOptimizationRecommendations(creditScore: number): Recommendation[] {\r\n        if (creditScore > 740) {\r\n            return [{\r\n                id: 'leverage-excellent-credit',\r\n                category: 'credit',\r\n                priority: 'medium',\r\n                title: 'Leverage Your Excellent Credit Score',\r\n                description: `Your credit score of ${creditScore} is excellent! This is a powerful financial tool you can use to your advantage.`,\r\n                actionSteps: [\r\n                    `Consider refinancing any existing loans (mortgage, auto, student) to secure a lower interest rate.`,\r\n                    `Explore premium travel or cashback credit cards that offer significant rewards and benefits.`,\r\n                    `Continue your great habits: always pay your bills on time and keep credit utilization low.`\r\n                ],\r\n                timeframe: 'ongoing',\r\n                impactLevel: 'medium'\r\n            }];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private static getInvestmentRecommendations(data: UserFinancialData, keyMetrics: any): Recommendation[] {\r\n        if (keyMetrics.emergencyFundMonths >= 4 && data.behaviors.monthlyInvestmentContribution === 0) {\r\n             return [{\r\n                id: 'start-investing',\r\n                category: 'investment',\r\n                priority: 'medium',\r\n                title: 'Start Investing for the Future',\r\n                description: `You have a solid emergency fund, which is a great foundation. Now is the perfect time to start investing to grow your wealth for long-term goals like retirement.`,\r\n                actionSteps: [\r\n                    `If your employer offers a 401(k) match, contribute at least enough to get the full match. It's free money!`,\r\n                    `Open a Roth IRA, which offers tax-free growth and withdrawals in retirement.`,\r\n                    `Start with a simple, low-cost target-date index fund or a broad market ETF.`\r\n                ],\r\n                timeframe: 'next-3-months',\r\n                impactLevel: 'high'\r\n            }];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    // ===================================================================\r\n    // LOW PRIORITY RECOMMENDATION LOGIC\r\n    // ===================================================================\r\n\r\n    private static getBudgetingRecommendations(data: UserFinancialData): Recommendation[] {\r\n        if (data.behaviors.budgetingMethod === 'no-budget' || data.behaviors.budgetingMethod === 'simple-tracking') {\r\n             return [{\r\n                id: 'create-a-budget',\r\n                category: 'spending',\r\n                priority: 'low',\r\n                title: 'Adopt a Formal Budgeting Method',\r\n                description: `You've indicated you don't follow a formal budget. A budget is a powerful tool for telling your money where to go, instead of wondering where it went.`,\r\n                actionSteps: [\r\n                    `Try the 50/30/20 rule as a starting point: 50% of income for needs, 30% for wants, and 20% for savings.`,\r\n                    `Use a budgeting app (like YNAB or Mint) or a simple spreadsheet to track your spending against your plan.`,\r\n                    `Review your budget monthly and make adjustments as needed.`\r\n                ],\r\n                timeframe: 'next-month',\r\n                impactLevel: 'medium'\r\n            }];\r\n        }\r\n        return [];\r\n    }\r\n    \r\n    private static getAutomatedSavingsRecommendations(data: UserFinancialData): Recommendation[] {\r\n        if (!data.behaviors.automaticSavings) {\r\n            return [{\r\n                id: 'automate-your-savings',\r\n                category: 'savings',\r\n                priority: 'low',\r\n                title: 'Automate Your Savings and Investments',\r\n                description: `You're not currently automating your savings. Paying yourself first by automating transfers is the easiest and most effective way to build wealth consistently.`,\r\n                actionSteps: [\r\n                    `Set up an automatic recurring transfer from your checking to your savings account for the day after you get paid.`,\r\n                    `Set up automatic contributions to your 401(k), IRA, or other investment accounts.`,\r\n                    `Start small if you need to, even $25 a week, and increase the amount every few months.`\r\n                ],\r\n                timeframe: 'next-paycheck',\r\n                impactLevel: 'high'\r\n            }];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    // ===================================================================\r\n    // GENERIC FALLBACK LOGIC\r\n    // ===================================================================\r\n\r\n    private static getGenericIndicatorRecommendations(indicator: HealthIndicator): Recommendation[] {\r\n        if (indicator.status === 'critical' || indicator.status === 'poor') {\r\n            return [{\r\n                id: `improve-${indicator.name.toLowerCase().replace(/ /g, '-')}`,\r\n                category: 'planning', // Generic category\r\n                priority: 'high',\r\n                title: `Focus on Improving ${indicator.name}`,\r\n                description: `Your score for ${indicator.name} is low. Taking steps to improve this area can have a significant impact on your overall financial health.`,\r\n                actionSteps: [\r\n                    `Review the detailed metrics for the ${indicator.name} indicator to understand the key drivers.`,\r\n                    \"Read educational content about this topic to build your knowledge.\",\r\n                    \"Create a small, achievable goal to start building momentum.\"\r\n                ],\r\n                timeframe: 'immediate',\r\n                impactLevel: 'high'\r\n            }];\r\n        } else if (indicator.status === 'fair') {\r\n             return [{\r\n                id: `optimize-${indicator.name.toLowerCase().replace(/ /g, '-')}`,\r\n                category: 'planning',\r\n                priority: 'low',\r\n                title: `Optimize Your ${indicator.name}`,\r\n                description: `Your score for ${indicator.name} is fair. This is a good foundation, but there are opportunities to make this area even stronger.`,\r\n                actionSteps: [\r\n                    `Compare your metrics for ${indicator.name} to industry benchmarks and best practices.`,\r\n                    `Identify one specific action you can take in the next month to improve your score.`,\r\n                    `Re-evaluate in 3 months to track your progress.`\r\n                ],\r\n                timeframe: 'next-3-months',\r\n                impactLevel: 'medium'\r\n            }];\r\n        }\r\n        \r\n        return [];\r\n    }\r\n} ","/**\r\n * Comprehensive Financial Health Calculation Engine\r\n * Based on Financial Health Network 2024 research and industry best practices\r\n */\r\n\r\nimport { UserFinancialData } from '../interfaces/core-types';\r\nimport { \r\n    HealthIndicator, \r\n    FinancialMetric, \r\n    ComprehensiveAnalysisResult,\r\n    WealthProjection,\r\n    ScenarioAnalysis\r\n} from '../interfaces/analysis-types';\r\nimport { RecommendationEngine } from './RecommendationEngine';\r\n\r\nexport class FinancialCalculationEngine {\r\n    \r\n    /**\r\n     * Perform comprehensive financial health analysis\r\n     */\r\n    public static analyzeFinancialHealth(data: UserFinancialData): ComprehensiveAnalysisResult {\r\n        // Validate that we're using real user data, not defaults\r\n        this.validateUserData(data);\r\n        const keyMetrics = this.calculateKeyMetrics(data);\r\n        const healthIndicators = this.calculateHealthIndicators(data, keyMetrics);\r\n        const overallHealthScore = this.calculateOverallHealthScore(healthIndicators);\r\n        \r\n        const result: ComprehensiveAnalysisResult = {\r\n            overallHealthScore,\r\n            healthLevel: this.getHealthLevel(overallHealthScore),\r\n            healthIndicators,\r\n            keyMetrics,\r\n            liquidityAnalysis: this.analyzeLiquidity(data, keyMetrics),\r\n            debtAnalysis: this.analyzeDebt(data, keyMetrics),\r\n            investmentAnalysis: this.analyzeInvestments(data, keyMetrics),\r\n            insuranceAnalysis: this.analyzeInsurance(data),\r\n            wealthProjections: this.projectWealth(data, keyMetrics),\r\n            scenarioAnalysis: this.analyzeScenarios(data, keyMetrics),\r\n            prioritizedRecommendations: [], // Will be populated next\r\n            peerBenchmarks: this.calculatePeerBenchmarks(data),\r\n            detailedInsights: this.generateDetailedInsights(data, keyMetrics, healthIndicators),\r\n            financialRatios: this.calculateFinancialRatios(data, keyMetrics),\r\n            riskAssessment: this.assessFinancialRisk(data, keyMetrics),\r\n            goalAnalysis: this.analyzeFinancialGoals(data, keyMetrics)\r\n        };\r\n\r\n        result.prioritizedRecommendations = RecommendationEngine.generateRecommendations(result, data);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Calculate key financial metrics\r\n     */\r\n    private static calculateKeyMetrics(data: UserFinancialData) {\r\n        const totalIncome = this.getTotalMonthlyIncome(data.income);\r\n        const totalExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const monthlyCashFlow = totalIncome - totalExpenses;\r\n        const totalAssets = this.getTotalAssets(data.assets);\r\n        const totalLiabilities = this.getTotalLiabilities(data.liabilities);\r\n        // Defensive: Prevent NaN/undefined\r\n        const netWorth = (typeof totalAssets === 'number' && typeof totalLiabilities === 'number' && !isNaN(totalAssets) && !isNaN(totalLiabilities)) ? (totalAssets - totalLiabilities) : 0;\r\n        const totalLiquidAssets = (data.assets.checking || 0) + (data.assets.savings || 0) + (data.assets.moneyMarket || 0) + (data.assets.emergencyFund || 0);\r\n        const totalDebt = this.getTotalDebt(data.liabilities);\r\n        // DTI: Use monthly income, not annualized (see Wells Fargo, Experian, CFPB)\r\n        const debtToIncomeRatio = totalIncome > 0 ? (totalDebt / totalIncome) * 100 : (totalDebt > 0 ? 100 : 0);\r\n        // Defensive breakdowns for UI\r\n        const netWorthBreakdown = {\r\n            totalAssets,\r\n            totalLiabilities,\r\n            netWorth\r\n        };\r\n        const dtiBreakdown = {\r\n            totalDebt,\r\n            totalIncome,\r\n            debtToIncomeRatio\r\n        };\r\n        return {\r\n            monthlyCashFlow: isNaN(monthlyCashFlow) ? 0 : monthlyCashFlow,\r\n            emergencyFundMonths: totalExpenses > 0 && totalLiquidAssets >= 0 ? totalLiquidAssets / totalExpenses : 0,\r\n            debtToIncomeRatio,\r\n            dtiBreakdown,\r\n            savingsRate: totalIncome > 0 ? ((monthlyCashFlow - (data.behaviors?.monthlyInvestmentContribution || 0)) / totalIncome) * 100 : 0,\r\n            creditUtilization: data.liabilities.totalCreditLimit > 0 ? (data.liabilities.creditCardDebt / data.liabilities.totalCreditLimit) * 100 : 0,\r\n            netWorth,\r\n            netWorthBreakdown,\r\n            liquidityRatio: totalLiabilities > 0 ? totalLiquidAssets / totalLiabilities : totalLiquidAssets > 0 ? 100 : 0,\r\n            assetAllocationScore: this.calculateAssetAllocationScore(data)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Calculate the 8 core health indicators based on Financial Health Network research\r\n     */\r\n    private static calculateHealthIndicators(data: UserFinancialData, keyMetrics: any): HealthIndicator[] {\r\n        return [\r\n            this.analyzeSpendingVsIncome(data, keyMetrics),\r\n            this.analyzeBillPaymentReliability(data),\r\n            this.analyzeEmergencySavings(data, keyMetrics),\r\n            this.analyzeDebtManagement(data),\r\n            this.analyzeCreditHealth(data, keyMetrics),\r\n            this.analyzeInsuranceConfidence(data),\r\n            this.analyzeLongTermGoalConfidence(data),\r\n            this.analyzeFinancialPlanningEngagement(data)\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 1: Spending vs Income Analysis\r\n     */\r\n    private static analyzeSpendingVsIncome(data: UserFinancialData, keyMetrics: any): HealthIndicator {\r\n        const totalIncome = this.getTotalMonthlyIncome(data.income);\r\n        const cashFlowRatio = totalIncome > 0 ? (keyMetrics.monthlyCashFlow / totalIncome) * 100 : 0;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        if (cashFlowRatio >= 20) {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (cashFlowRatio >= 10) {\r\n            score = 80;\r\n            status = 'good';\r\n        } else if (cashFlowRatio >= 5) {\r\n            score = 60;\r\n            status = 'fair';\r\n        } else if (cashFlowRatio > 0) {\r\n            score = 40;\r\n            status = 'poor';\r\n        } else {\r\n            score = 0;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Spending vs Income',\r\n            score,\r\n            status,\r\n            weight: 15,\r\n            metrics: [\r\n                {\r\n                    title: 'Monthly Cash Flow',\r\n                    value: this.formatCurrency(keyMetrics.monthlyCashFlow),\r\n                    numericValue: keyMetrics.monthlyCashFlow,\r\n                    description: 'Amount left after all expenses',\r\n                    status,\r\n                    benchmark: 'Target: 20% of income',\r\n                    improvement: cashFlowRatio < 20 ? 'Consider reducing expenses or increasing income' : undefined\r\n                },\r\n                {\r\n                    title: 'Cash Flow Ratio',\r\n                    value: `${cashFlowRatio.toFixed(1)}%`,\r\n                    numericValue: cashFlowRatio,\r\n                    description: 'Percentage of income available after expenses',\r\n                    status,\r\n                    benchmark: 'Excellent: 20%+, Good: 10-19%'\r\n                }\r\n            ],\r\n            recommendations: this.getSpendingRecommendations(cashFlowRatio),\r\n            explanation: `This indicator measures if you spend less than you earn. Your cash flow ratio is ${cashFlowRatio.toFixed(1)}%, resulting in a score of ${score}/100. A healthy ratio is typically above 10-20%.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 2: Bill Payment Reliability\r\n     */\r\n    private static analyzeBillPaymentReliability(data: UserFinancialData): HealthIndicator {\r\n        const reliability = data.behaviors.billPaymentReliability;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        switch (reliability) {\r\n            case 'always-on-time':\r\n                score = 100;\r\n                status = 'excellent';\r\n                break;\r\n            case 'usually-on-time':\r\n                score = 75;\r\n                status = 'good';\r\n                break;\r\n            case 'sometimes-late':\r\n                score = 50;\r\n                status = 'fair';\r\n                break;\r\n            case 'often-late':\r\n                score = 25;\r\n                status = 'poor';\r\n                break;\r\n            default:\r\n                score = 0;\r\n                status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Bill Payment Reliability',\r\n            score,\r\n            status,\r\n            weight: 15,\r\n            metrics: [\r\n                {\r\n                    title: 'Payment History',\r\n                    value: this.formatReliabilityText(reliability),\r\n                    description: 'Consistency of bill payments',\r\n                    status,\r\n                    benchmark: 'Target: Always on time'\r\n                },\r\n                {\r\n                    title: 'Credit Score Impact',\r\n                    value: data.liabilities.creditScore.toString(),\r\n                    numericValue: data.liabilities.creditScore,\r\n                    description: 'Current credit score',\r\n                    status: this.getCreditScoreStatus(data.liabilities.creditScore),\r\n                    benchmark: 'Excellent: 800+, Good: 740-799, Fair: 670-739'\r\n                }\r\n            ],\r\n            recommendations: this.getPaymentReliabilityRecommendations(reliability),\r\n            explanation: `This indicator reflects your consistency in paying bills on time. Your self-reported reliability is '${this.formatReliabilityText(reliability)}', leading to a score of ${score}/100. On-time payments are crucial for a good credit score.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Analyze Debt Management Effectiveness (core health indicator #4)\r\n     * Uses research-based debt-to-income ratio, edge case handling, and clear status logic.\r\n     * - Target: <36% total DTI, <28% housing DTI\r\n     * - Status: 'excellent' <20%, 'good' <28%, 'fair' <36%, 'poor' <43%, 'critical' >=43%\r\n     * - Handles zero/negative income and missing data\r\n     */\r\n    private static analyzeDebtManagement(data: UserFinancialData): HealthIndicator {\r\n        // Defensive: Validate income and liabilities\r\n        const totalMonthlyIncome = this.getTotalMonthlyIncome(data.income);\r\n        const totalMonthlyDebt = this.getTotalDebt(data.liabilities);\r\n        let debtToIncomeRatio = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        let explanation = '';\r\n        let recommendations: string[] = [];\r\n\r\n        if (totalMonthlyIncome > 0) {\r\n            debtToIncomeRatio = totalMonthlyDebt / totalMonthlyIncome;\r\n            if (debtToIncomeRatio < 0.2) {\r\n                status = 'excellent';\r\n                explanation = 'Your debt-to-income ratio is well below recommended thresholds.';\r\n            } else if (debtToIncomeRatio < 0.28) {\r\n                status = 'good';\r\n                explanation = 'Your debt-to-income ratio is healthy and manageable.';\r\n            } else if (debtToIncomeRatio < 0.36) {\r\n                status = 'fair';\r\n                explanation = 'Your debt-to-income ratio is approaching risk thresholds.';\r\n            } else if (debtToIncomeRatio < 0.43) {\r\n                status = 'poor';\r\n                explanation = 'Your debt-to-income ratio is above recommended limits. Consider reducing debt.';\r\n            } else {\r\n                status = 'critical';\r\n                explanation = 'Your debt-to-income ratio is dangerously high. Immediate action is needed.';\r\n            }\r\n        } else {\r\n            // Edge case: zero or negative income\r\n            debtToIncomeRatio = totalMonthlyDebt > 0 ? 1 : 0;\r\n            status = totalMonthlyDebt > 0 ? 'critical' : 'excellent';\r\n            explanation = totalMonthlyDebt > 0\r\n                ? 'No reported income but outstanding debts. Address income or debt immediately.'\r\n                : 'No income or debt reported.';\r\n        }\r\n\r\n        // Recommendations (research-based)\r\n        recommendations = this.getDebtManagementRecommendations(debtToIncomeRatio);\r\n\r\n        return {\r\n            name: 'Debt Management Effectiveness',\r\n            score: Math.max(0, 100 - Math.round(debtToIncomeRatio * 100)),\r\n            status,\r\n            weight: 0.15,\r\n            metrics: [\r\n                {\r\n                    title: 'Debt-to-Income Ratio',\r\n                    value: (debtToIncomeRatio * 100).toFixed(1) + '%',\r\n                    numericValue: debtToIncomeRatio,\r\n                    description: 'Total monthly debt payments as a percentage of monthly income',\r\n                    status,\r\n                    benchmark: '<36%',\r\n                    improvement: status === 'excellent' ? '' : 'Reduce debt or increase income to improve ratio.'\r\n                }\r\n            ],\r\n            recommendations,\r\n            explanation\r\n        };\r\n    }\r\n\r\n    // Helper Methods\r\n    private static getTotalMonthlyIncome(income: any): number {\r\n        return income.primarySalary + income.secondaryIncome + income.businessIncome + \r\n               income.investmentIncome + income.rentalIncome + income.benefitsIncome + income.otherIncome;\r\n    }\r\n\r\n    private static getTotalMonthlyExpenses(expenses: any): number {\r\n        return expenses.housing + expenses.utilities + expenses.insurance + expenses.loanPayments +\r\n               expenses.childcare + expenses.food + expenses.transportation + expenses.healthcare +\r\n               expenses.clothing + expenses.personalCare + expenses.entertainment + expenses.diningOut +\r\n               expenses.hobbies + expenses.subscriptions + expenses.shopping + expenses.travel +\r\n               expenses.creditCardPayments + expenses.studentLoanPayments + expenses.otherDebtPayments;\r\n    }\r\n\r\n    private static getTotalAssets(assets: any): number {\r\n        // Defensive: Treat missing/invalid as zero\r\n        return (assets.checking || 0) + (assets.savings || 0) + (assets.moneyMarket || 0) + (assets.emergencyFund || 0) +\r\n               (assets.employer401k || 0) + (assets.traditionalIRA || 0) + (assets.rothIRA || 0) + (assets.brokerageAccounts || 0) +\r\n               (assets.stocks || 0) + (assets.bonds || 0) + (assets.mutualFunds || 0) + (assets.primaryResidence || 0) +\r\n               (assets.investmentProperties || 0) + (assets.cryptocurrency || 0) + (assets.preciousMetals || 0) +\r\n               (assets.collectibles || 0) + (assets.businessEquity || 0) + (assets.otherAssets || 0);\r\n    }\r\n\r\n    /**\r\n     * Get total monthly debt payments from all liability categories\r\n     * Allows total debt to be zero and prevents NaN\r\n     */\r\n    private static getTotalDebt(liabilities: any): number {\r\n        if (!liabilities || typeof liabilities !== 'object') return 0;\r\n        return [\r\n            'mortgageBalance', 'homeEquityLoan', 'autoLoans', 'securedCreditLines',\r\n            'creditCardDebt', 'personalLoans', 'studentLoans', 'medicalDebt',\r\n            'businessLoans', 'businessCreditLines', 'taxDebt', 'legalJudgments', 'otherDebt'\r\n        ].reduce((sum, key) => sum + (Number(liabilities[key]) || 0), 0);\r\n    }\r\n\r\n    /**\r\n     * Get total liabilities from all liability categories\r\n     * Sums all liability fields, treating missing as zero\r\n     */\r\n    private static getTotalLiabilities(liabilities: any): number {\r\n        return [\r\n            'mortgageBalance', 'homeEquityLoan', 'autoLoans', 'securedCreditLines',\r\n            'creditCardDebt', 'personalLoans', 'studentLoans', 'medicalDebt',\r\n            'businessLoans', 'businessCreditLines', 'taxDebt', 'legalJudgments', 'otherDebt'\r\n        ].reduce((sum, key) => sum + (Number(liabilities[key]) || 0), 0);\r\n    }\r\n\r\n    private static formatCurrency(amount: number): string {\r\n        if (typeof amount !== 'number' || isNaN(amount)) return 'N/A';\r\n        if (amount === 0) return '$0';\r\n        return new Intl.NumberFormat('en-US', {\r\n            style: 'currency',\r\n            currency: 'USD',\r\n            minimumFractionDigits: 0,\r\n            maximumFractionDigits: 0\r\n        }).format(amount);\r\n    }\r\n\r\n    private static formatReliabilityText(reliability: string): string {\r\n        const map: { [key: string]: string } = {\r\n            'always-on-time': 'Always On Time',\r\n            'usually-on-time': 'Usually On Time',\r\n            'sometimes-late': 'Sometimes Late',\r\n            'often-late': 'Often Late'\r\n        };\r\n        return map[reliability] || reliability;\r\n    }\r\n\r\n    private static calculateOverallHealthScore(indicators: HealthIndicator[]): number {\r\n        let totalWeightedScore = 0;\r\n        let totalWeight = 0;\r\n        \r\n        for (const indicator of indicators) {\r\n            totalWeightedScore += indicator.score * indicator.weight;\r\n            totalWeight += indicator.weight;\r\n        }\r\n        \r\n        return totalWeight > 0 ? Math.round(totalWeightedScore / totalWeight) : 0;\r\n    }\r\n\r\n    private static getHealthLevel(score: number): 'excellent' | 'good' | 'fair' | 'limited' | 'critical' {\r\n        if (score >= 80) return 'excellent';\r\n        if (score >= 65) return 'good';\r\n        if (score >= 50) return 'fair';\r\n        if (score >= 35) return 'limited';\r\n        return 'critical';\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 3: Emergency Savings Adequacy\r\n     */\r\n    private static analyzeEmergencySavings(data: UserFinancialData, keyMetrics: any): HealthIndicator {\r\n        const emergencyFundMonths = keyMetrics.emergencyFundMonths;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        if (emergencyFundMonths >= 6) {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (emergencyFundMonths >= 3) {\r\n            score = 80;\r\n            status = 'good';\r\n        } else if (emergencyFundMonths >= 1) {\r\n            score = 60;\r\n            status = 'fair';\r\n        } else if (emergencyFundMonths > 0) {\r\n            score = 30;\r\n            status = 'poor';\r\n        } else {\r\n            score = 0;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Emergency Savings',\r\n            score,\r\n            status,\r\n            weight: 20,\r\n            metrics: [\r\n                {\r\n                    title: 'Emergency Fund Coverage',\r\n                    value: `${emergencyFundMonths.toFixed(1)} months`,\r\n                    numericValue: emergencyFundMonths,\r\n                    description: 'How many months of expenses your liquid savings can cover',\r\n                    status,\r\n                    benchmark: 'Target: 3-6 months'\r\n                },\r\n                {\r\n                    title: 'Total Liquid Assets',\r\n                    value: this.formatCurrency(data.assets.checking + data.assets.savings + \r\n                                              data.assets.moneyMarket + data.assets.emergencyFund),\r\n                    numericValue: data.assets.checking + data.assets.savings + \r\n                                 data.assets.moneyMarket + data.assets.emergencyFund,\r\n                    description: 'Cash and easily accessible funds',\r\n                    status\r\n                }\r\n            ],\r\n            recommendations: this.getEmergencyFundRecommendations(emergencyFundMonths, this.getTotalMonthlyExpenses(data.expenses)),\r\n            explanation: `This measures your financial cushion for unexpected events. You have ${emergencyFundMonths.toFixed(1)} months of expenses saved, giving you a score of ${score}/100. The standard recommendation is 3-6 months.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 5: Credit Score Health\r\n     */\r\n    private static analyzeCreditHealth(data: UserFinancialData, keyMetrics: any): HealthIndicator {\r\n        const creditScore = data.liabilities.creditScore;\r\n        const creditUtilization = keyMetrics.creditUtilization;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        if (creditScore >= 800 && creditUtilization <= 10) {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (creditScore >= 740 && creditUtilization <= 30) {\r\n            score = 80;\r\n            status = 'good';\r\n        } else if (creditScore >= 670) {\r\n            score = 60;\r\n            status = 'fair';\r\n        } else if (creditScore >= 580) {\r\n            score = 40;\r\n            status = 'poor';\r\n        } else {\r\n            score = 20;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Credit Health',\r\n            score,\r\n            status,\r\n            weight: 10,\r\n            metrics: [\r\n                {\r\n                    title: 'Credit Score',\r\n                    value: creditScore.toString(),\r\n                    numericValue: creditScore,\r\n                    description: 'Your current credit score',\r\n                    status: this.getCreditScoreStatus(creditScore),\r\n                    benchmark: 'Excellent: 800+, Good: 740-799, Fair: 670-739'\r\n                },\r\n                {\r\n                    title: 'Credit Utilization',\r\n                    value: `${creditUtilization.toFixed(1)}%`,\r\n                    numericValue: creditUtilization,\r\n                    description: 'Percentage of available credit you are using',\r\n                    status: this.getCreditUtilizationStatus(keyMetrics.creditUtilization),\r\n                    benchmark: 'Target: Below 30%'\r\n                }\r\n            ],\r\n            recommendations: this.getCreditHealthRecommendations(data.liabilities.creditScore, keyMetrics.creditUtilization),\r\n            explanation: `This reflects your creditworthiness. With a credit score of ${data.liabilities.creditScore} and a utilization of ${keyMetrics.creditUtilization.toFixed(1)}%, your score is ${score}/100. Both are key factors in your financial health.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 6: Insurance Coverage Confidence\r\n     */\r\n    private static analyzeInsuranceConfidence(data: UserFinancialData): HealthIndicator {\r\n        const hasHealthInsurance = data.insurance.healthInsurance;\r\n        const hasLifeInsurance = data.insurance.lifeInsurance;\r\n        const hasDisabilityInsurance = data.insurance.shortTermDisability || data.insurance.longTermDisability;\r\n        const confidence = data.insurance.insuranceConfidence;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        const insuranceCount = (hasHealthInsurance ? 1 : 0) + (hasLifeInsurance ? 1 : 0) + (hasDisabilityInsurance ? 1 : 0);\r\n        \r\n        if (insuranceCount === 3 && confidence === 'very-confident') {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (insuranceCount >= 2 && confidence !== 'not-confident') {\r\n            score = 80;\r\n            status = 'good';\r\n        } else if (insuranceCount >= 1) {\r\n            score = 60;\r\n            status = 'fair';\r\n        } else if (hasHealthInsurance) {\r\n            score = 40;\r\n            status = 'poor';\r\n        } else {\r\n            score = 20;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Insurance Confidence',\r\n            score,\r\n            status,\r\n            weight: 10,\r\n            metrics: [\r\n                {\r\n                    title: 'Self-Reported Confidence',\r\n                    value: this.formatConfidenceText(confidence),\r\n                    description: 'Your confidence in your insurance coverage',\r\n                    status\r\n                }\r\n            ],\r\n            recommendations: this.getInsuranceRecommendations(data.insurance),\r\n            explanation: `This measures your confidence in being protected from financial shocks. Your reported confidence level gives you a score of ${score}/100.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 7: Long-term Financial Goal Confidence\r\n     */\r\n    private static analyzeLongTermGoalConfidence(data: UserFinancialData): HealthIndicator {\r\n        const retirementConfidence = data.goals.retirementConfidence;\r\n        const hasRetirementSavings = (data.assets.employer401k + data.assets.traditionalIRA + data.assets.rothIRA) > 0;\r\n        const monthlyInvestment = data.behaviors.monthlyInvestmentContribution;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        if (retirementConfidence === 'very-confident' && hasRetirementSavings && monthlyInvestment > 0) {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (retirementConfidence === 'somewhat-confident' && hasRetirementSavings) {\r\n            score = 75;\r\n            status = 'good';\r\n        } else if (hasRetirementSavings || monthlyInvestment > 0) {\r\n            score = 50;\r\n            status = 'fair';\r\n        } else if (retirementConfidence !== 'not-confident') {\r\n            score = 25;\r\n            status = 'poor';\r\n        } else {\r\n            score = 0;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Long-term Goal Confidence',\r\n            score,\r\n            status,\r\n            weight: 10,\r\n            metrics: [\r\n                {\r\n                    title: 'Retirement Confidence',\r\n                    value: this.formatConfidenceText(retirementConfidence),\r\n                    description: 'Your confidence in your retirement savings plan',\r\n                    status,\r\n                    benchmark: 'Target: Very confident with active saving'\r\n                },\r\n                {\r\n                    title: 'Monthly Investment',\r\n                    value: this.formatCurrency(monthlyInvestment),\r\n                    numericValue: monthlyInvestment,\r\n                    description: 'Monthly investment contribution',\r\n                    status: monthlyInvestment > 500 ? 'excellent' : monthlyInvestment > 0 ? 'good' : 'poor',\r\n                    benchmark: 'Target: 10-15% of income'\r\n                }\r\n            ],\r\n            recommendations: this.getRetirementRecommendations(data.goals, monthlyInvestment),\r\n            explanation: `This assesses your confidence in reaching long-term financial goals like retirement. Your reported confidence results in a score of ${score}/100.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 8: Financial Planning Engagement\r\n     */\r\n    private static analyzeFinancialPlanningEngagement(data: UserFinancialData): HealthIndicator {\r\n        const budgeting = data.behaviors.budgetingMethod;\r\n        const planning = data.behaviors.financialPlanningEngagement;\r\n\r\n        let budgetScore = 0;\r\n        switch (budgeting) {\r\n            case 'detailed-budget': budgetScore = 100; break;\r\n            case 'simple-tracking': budgetScore = 75; break;\r\n            case 'mental-budget': budgetScore = 40; break;\r\n            case 'no-budget': budgetScore = 0; break;\r\n        }\r\n\r\n        let planningScore = 0;\r\n        switch (planning) {\r\n            case 'actively-plan': planningScore = 100; break;\r\n            case 'occasionally-plan': planningScore = 70; break;\r\n            case 'rarely-plan': planningScore = 30; break;\r\n            case 'never-plan': planningScore = 0; break;\r\n        }\r\n\r\n        const score = Math.round((budgetScore * 0.5) + (planningScore * 0.5));\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n\r\n        if (score >= 90) {\r\n            status = 'excellent';\r\n        } else if (score >= 70) {\r\n            status = 'good';\r\n        } else if (score >= 50) {\r\n            status = 'fair';\r\n        } else if (score >= 20) {\r\n            status = 'poor';\r\n        }\r\n\r\n        return {\r\n            name: 'Financial Planning Engagement',\r\n            score,\r\n            status,\r\n            weight: 10,\r\n            metrics: [\r\n                {\r\n                    title: 'Budgeting Method',\r\n                    value: this.formatBudgetText(budgeting),\r\n                    description: 'How you manage your budget',\r\n                    status: score >= 70 ? 'good' : 'poor'\r\n                },\r\n                {\r\n                    title: 'Planning Engagement',\r\n                    value: this.formatPlanningText(planning),\r\n                    description: 'How actively you plan your finances',\r\n                    status: score >= 70 ? 'good' : 'poor'\r\n                }\r\n            ],\r\n            recommendations: this.getPlanningRecommendations(budgeting, planning),\r\n            explanation: `This measures how actively you are planning and tracking your finances. Your approach gives you a score of ${score}/100.`\r\n        };\r\n    }\r\n\r\n    // Helper calculation methods\r\n    private static calculateAssetAllocationScore(data: UserFinancialData): number {\r\n        const totalInvestments = data.assets.employer401k + data.assets.traditionalIRA + \r\n                               data.assets.rothIRA + data.assets.brokerageAccounts + data.assets.stocks;\r\n        const totalAssets = this.getTotalAssets(data.assets);\r\n        \r\n        if (totalAssets === 0) return 0;\r\n        \r\n        const investmentRatio = totalInvestments / totalAssets;\r\n        const age = data.personalInfo.age;\r\n        const targetStockAllocation = (100 - age) / 100;\r\n        \r\n        const allocationScore = Math.max(0, 100 - Math.abs(investmentRatio - targetStockAllocation) * 200);\r\n        return Math.round(allocationScore);\r\n    }\r\n\r\n    /**\r\n     * Enhanced Liquidity Analysis\r\n     */\r\n    private static analyzeLiquidity(data: UserFinancialData, _keyMetrics: any): FinancialMetric[] {\r\n        const totalLiquidAssets = data.assets.checking + data.assets.savings + \r\n                                 data.assets.moneyMarket + data.assets.emergencyFund;\r\n        const monthlyExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const liquidityRatio = monthlyExpenses > 0 ? totalLiquidAssets / monthlyExpenses : 0;\r\n        \r\n        return [\r\n            {\r\n                title: 'Liquid Assets',\r\n                value: this.formatCurrency(totalLiquidAssets),\r\n                numericValue: totalLiquidAssets,\r\n                description: 'Cash and cash equivalents available immediately',\r\n                status: totalLiquidAssets >= monthlyExpenses * 6 ? 'excellent' : \r\n                       totalLiquidAssets >= monthlyExpenses * 3 ? 'good' : 'poor',\r\n                benchmark: 'Target: 6+ months of expenses'\r\n            },\r\n            {\r\n                title: 'Liquidity Ratio',\r\n                value: `${liquidityRatio.toFixed(1)} months`,\r\n                numericValue: liquidityRatio,\r\n                description: 'Months of expenses covered by liquid assets',\r\n                status: liquidityRatio >= 6 ? 'excellent' : liquidityRatio >= 3 ? 'good' : 'poor',\r\n                benchmark: 'Excellent: 6+ months, Good: 3-6 months'\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Enhanced Debt Analysis\r\n     */\r\n    private static analyzeDebt(data: UserFinancialData, keyMetrics: any): FinancialMetric[] {\r\n        const totalDebt = this.getTotalDebt(data.liabilities);\r\n        const debtToIncomeRatio = keyMetrics.debtToIncomeRatio;\r\n        const creditUtilization = keyMetrics.creditUtilization;\r\n        \r\n        return [\r\n            {\r\n                title: 'Total Debt',\r\n                value: this.formatCurrency(totalDebt),\r\n                numericValue: totalDebt,\r\n                description: 'All outstanding debt obligations',\r\n                status: debtToIncomeRatio <= 20 ? 'excellent' : debtToIncomeRatio <= 36 ? 'good' : 'poor',\r\n                benchmark: 'Target: <20% of annual income'\r\n            },\r\n            {\r\n                title: 'Debt-to-Income Ratio',\r\n                value: `${debtToIncomeRatio.toFixed(1)}%`,\r\n                numericValue: debtToIncomeRatio,\r\n                description: 'Total debt as percentage of annual income',\r\n                status: debtToIncomeRatio <= 20 ? 'excellent' : debtToIncomeRatio <= 36 ? 'good' : 'poor',\r\n                benchmark: 'Excellent: <20%, Good: 20-36%, Poor: >36%'\r\n            },\r\n            {\r\n                title: 'Credit Utilization',\r\n                value: `${creditUtilization.toFixed(1)}%`,\r\n                numericValue: creditUtilization,\r\n                description: 'Credit card balances vs available credit',\r\n                status: creditUtilization <= 10 ? 'excellent' : creditUtilization <= 30 ? 'good' : 'poor',\r\n                benchmark: 'Excellent: <10%, Good: 10-30%, Poor: >30%'\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Enhanced Investment Analysis\r\n     */\r\n    private static analyzeInvestments(data: UserFinancialData, keyMetrics: any): FinancialMetric[] {\r\n        const totalInvestments = data.assets.employer401k + data.assets.traditionalIRA + \r\n                               data.assets.rothIRA + data.assets.brokerageAccounts + \r\n                               data.assets.stocks + data.assets.bonds + data.assets.mutualFunds;\r\n        const monthlyIncome = this.getTotalMonthlyIncome(data.income);\r\n        const investmentRate = monthlyIncome > 0 ? (data.behaviors.monthlyInvestmentContribution / monthlyIncome) * 100 : 0;\r\n        const age = data.personalInfo.age;\r\n        const targetStockAllocation = 110 - age; // Rule of thumb: 110 - age = stock %\r\n        \r\n        return [\r\n            {\r\n                title: 'Total Investments',\r\n                value: this.formatCurrency(totalInvestments),\r\n                numericValue: totalInvestments,\r\n                description: 'All investment accounts and securities',\r\n                status: investmentRate >= 15 ? 'excellent' : investmentRate >= 10 ? 'good' : 'poor',\r\n                benchmark: 'Target: 15%+ of income invested monthly'\r\n            },\r\n            {\r\n                title: 'Investment Rate',\r\n                value: `${investmentRate.toFixed(1)}%`,\r\n                numericValue: investmentRate,\r\n                description: 'Monthly investment as percentage of income',\r\n                status: investmentRate >= 15 ? 'excellent' : investmentRate >= 10 ? 'good' : 'poor',\r\n                benchmark: 'Excellent: 15%+, Good: 10-15%, Poor: <10%'\r\n            },\r\n            {\r\n                title: 'Asset Allocation Score',\r\n                value: `${keyMetrics.assetAllocationScore}/100`,\r\n                numericValue: keyMetrics.assetAllocationScore,\r\n                description: 'How well diversified your investments are',\r\n                status: keyMetrics.assetAllocationScore >= 80 ? 'excellent' : \r\n                       keyMetrics.assetAllocationScore >= 60 ? 'good' : 'poor',\r\n                benchmark: `Target stock allocation for age ${age}: ~${targetStockAllocation}%`\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Enhanced Insurance Analysis\r\n     */\r\n    private static analyzeInsurance(data: UserFinancialData): FinancialMetric[] {\r\n        const hasHealthInsurance = data.personalInfo.healthInsurance;\r\n        const hasLifeInsurance = data.personalInfo.lifeInsurance;\r\n        const hasDisabilityInsurance = data.personalInfo.shortTermDisability || data.personalInfo.longTermDisability;\r\n        const dependents = data.personalInfo.dependents;\r\n        \r\n        const coverageScore = (hasHealthInsurance ? 40 : 0) + \r\n                            (hasLifeInsurance && dependents > 0 ? 30 : dependents === 0 ? 30 : 0) + \r\n                            (hasDisabilityInsurance ? 30 : 0);\r\n        \r\n        return [\r\n            {\r\n                title: 'Insurance Coverage Score',\r\n                value: `${coverageScore}/100`,\r\n                numericValue: coverageScore,\r\n                description: 'Overall adequacy of insurance protection',\r\n                status: coverageScore >= 90 ? 'excellent' : coverageScore >= 70 ? 'good' : 'poor',\r\n                benchmark: 'Target: 90+ (Health + Life + Disability)'\r\n            },\r\n            {\r\n                title: 'Essential Coverage',\r\n                value: hasHealthInsurance ? 'Health ✓' : 'Health ✗',\r\n                description: 'Health insurance status',\r\n                status: hasHealthInsurance ? 'excellent' : 'critical',\r\n                benchmark: 'Required: Health insurance is essential'\r\n            },\r\n            {\r\n                title: 'Income Protection',\r\n                value: hasDisabilityInsurance ? 'Disability ✓' : 'Disability ✗',\r\n                description: 'Disability insurance status',\r\n                status: hasDisabilityInsurance ? 'good' : 'poor',\r\n                benchmark: 'Recommended: Protect 60-70% of income'\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Enhanced Wealth Projections\r\n     */\r\n    private static projectWealth(data: UserFinancialData, _keyMetrics: any): WealthProjection[] {\r\n        const currentAge = data.personalInfo.age;\r\n        const retirementAge = data.goals.retirementAge;\r\n        const yearsToRetirement = retirementAge - currentAge;\r\n        const monthlyInvestment = data.behaviors.monthlyInvestmentContribution;\r\n        const currentInvestments = data.assets.employer401k + data.assets.traditionalIRA + \r\n                                 data.assets.rothIRA + data.assets.brokerageAccounts;\r\n        \r\n        // Conservative projection at 6% annual return\r\n        const conservativeReturn = 0.06;\r\n        const moderateReturn = 0.08;\r\n        const aggressiveReturn = 0.10;\r\n        \r\n        const projections: WealthProjection[] = [];\r\n        const scenarios = [\r\n            { name: 'Conservative (6%)', rate: conservativeReturn },\r\n            { name: 'Moderate (8%)', rate: moderateReturn },\r\n            { name: 'Aggressive (10%)', rate: aggressiveReturn }\r\n        ];\r\n        \r\n        scenarios.forEach(scenario => {\r\n            const monthlyRate = scenario.rate / 12;\r\n            const months = yearsToRetirement * 12;\r\n            \r\n            // Future value of current investments\r\n            const futureValueCurrent = currentInvestments * Math.pow(1 + scenario.rate, yearsToRetirement);\r\n            \r\n            // Future value of monthly contributions (annuity)\r\n            const futureValueContributions = monthlyInvestment * \r\n                ((Math.pow(1 + monthlyRate, months) - 1) / monthlyRate);\r\n            \r\n            const totalProjected = futureValueCurrent + futureValueContributions;\r\n            \r\n            projections.push({\r\n                scenario: scenario.name,\r\n                timeframe: `${yearsToRetirement} years`,\r\n                projectedValue: totalProjected,\r\n                monthlyContribution: monthlyInvestment,\r\n                assumptions: `${(scenario.rate * 100).toFixed(0)}% annual return, ${monthlyInvestment > 0 ? '$' + monthlyInvestment.toLocaleString() : '$0'} monthly`\r\n            });\r\n        });\r\n        \r\n        return projections;\r\n    }\r\n\r\n    /**\r\n     * Enhanced Scenario Analysis\r\n     */\r\n    private static analyzeScenarios(data: UserFinancialData, _keyMetrics: any): ScenarioAnalysis[] {\r\n        const monthlyExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const emergencyFund = data.assets.emergencyFund + data.assets.savings;\r\n        \r\n        return [\r\n            {\r\n                scenario: 'Job Loss',\r\n                impact: 'High',\r\n                description: 'Complete loss of primary income',\r\n                timeToRecover: emergencyFund > 0 ? `${(emergencyFund / monthlyExpenses).toFixed(1)} months` : '0 months',\r\n                recommendations: [\r\n                    'Build emergency fund to 6 months of expenses',\r\n                    'Consider disability insurance',\r\n                    'Diversify income sources'\r\n                ],\r\n                probability: 'Medium'\r\n            },\r\n            {\r\n                scenario: 'Market Downturn (-30%)',\r\n                impact: 'Medium',\r\n                description: '30% decline in investment portfolio',\r\n                timeToRecover: '2-3 years historically',\r\n                recommendations: [\r\n                    'Maintain diversified portfolio',\r\n                    'Continue regular investing (dollar-cost averaging)',\r\n                    'Avoid panic selling'\r\n                ],\r\n                probability: 'High (occurs every 5-10 years)'\r\n            },\r\n            {\r\n                scenario: 'Major Medical Emergency',\r\n                impact: 'High',\r\n                description: 'Unexpected medical expenses',\r\n                timeToRecover: 'Depends on insurance coverage',\r\n                recommendations: [\r\n                    'Ensure adequate health insurance',\r\n                    'Build separate medical emergency fund',\r\n                    'Consider HSA contributions'\r\n                ],\r\n                probability: 'Medium'\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Generate more detailed financial analysis for the user\r\n     * - Net worth breakdown, savings rate, debt structure, expense categorization, investment diversification, insurance adequacy, peer benchmarks, scenario/stress testing\r\n     * - All calculations robust to edge cases\r\n     */\r\n    private static generateDetailedInsights(data: UserFinancialData, keyMetrics: any, _healthIndicators: HealthIndicator[]): any {\r\n        // Defensive: handle missing/invalid data\r\n        const assets = data.assets || {};\r\n        const liabilities = data.liabilities || {};\r\n        const expenses = data.expenses || {};\r\n        const investments = {\r\n            '401k': assets.employer401k || 0,\r\n            'IRA': (assets.traditionalIRA || 0) + (assets.rothIRA || 0),\r\n            'Brokerage': assets.brokerageAccounts || 0,\r\n            'Stocks': assets.stocks || 0,\r\n            'Bonds': assets.bonds || 0,\r\n            'Mutual Funds': assets.mutualFunds || 0,\r\n            'Crypto': assets.cryptocurrency || 0,\r\n            'Real Estate': assets.primaryResidence || 0 + assets.investmentProperties || 0\r\n        };\r\n        const debtStructure = {\r\n            'Secured Debt': (liabilities.mortgageBalance || 0) + (liabilities.homeEquityLoan || 0) + (liabilities.autoLoans || 0) + (liabilities.securedCreditLines || 0),\r\n            'Unsecured Debt': (liabilities.creditCardDebt || 0) + (liabilities.personalLoans || 0) + (liabilities.studentLoans || 0) + (liabilities.medicalDebt || 0),\r\n            'Business Debt': (liabilities.businessLoans || 0) + (liabilities.businessCreditLines || 0),\r\n            'Other Debt': (liabilities.taxDebt || 0) + (liabilities.legalJudgments || 0) + (liabilities.otherDebt || 0)\r\n        };\r\n        const expenseCategories = {\r\n            'Fixed': (expenses.housing || 0) + (expenses.utilities || 0) + (expenses.insurance || 0) + (expenses.loanPayments || 0) + (expenses.childcare || 0),\r\n            'Variable': (expenses.food || 0) + (expenses.transportation || 0) + (expenses.healthcare || 0) + (expenses.clothing || 0) + (expenses.personalCare || 0),\r\n            'Discretionary': (expenses.entertainment || 0) + (expenses.diningOut || 0) + (expenses.hobbies || 0) + (expenses.subscriptions || 0) + (expenses.shopping || 0) + (expenses.travel || 0)\r\n        };\r\n        // Peer benchmarks, scenario/stress testing, and insurance adequacy are already included in other sections, but can be summarized here\r\n        return {\r\n            netWorthBreakdown: {\r\n                totalAssets: this.getTotalAssets(assets),\r\n                totalLiabilities: this.getTotalLiabilities(liabilities),\r\n                netWorth: keyMetrics.netWorth\r\n            },\r\n            savingsRate: keyMetrics.savingsRate,\r\n            debtStructure,\r\n            expenseCategories,\r\n            investmentBreakdown: investments,\r\n            insuranceAdequacy: data.insurance || {},\r\n            peerBenchmarks: keyMetrics.peerBenchmarks || {},\r\n            scenarioAnalysis: keyMetrics.scenarioAnalysis || []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Calculate Financial Ratios\r\n     */\r\n    private static calculateFinancialRatios(data: UserFinancialData, keyMetrics: any): any {\r\n        const monthlyIncome = this.getTotalMonthlyIncome(data.income);\r\n        const monthlyExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const totalAssets = this.getTotalAssets(data.assets);\r\n        const totalLiabilities = this.getTotalLiabilities(data.liabilities);\r\n        \r\n        return {\r\n            liquidityRatios: {\r\n                currentRatio: totalLiabilities > 0 ? (data.assets.checking + data.assets.savings) / totalLiabilities : 0,\r\n                quickRatio: totalLiabilities > 0 ? data.assets.checking / totalLiabilities : 0,\r\n                emergencyFundRatio: keyMetrics.emergencyFundMonths\r\n            },\r\n            leverageRatios: {\r\n                debtToAssetRatio: totalAssets > 0 ? (totalLiabilities / totalAssets) * 100 : 0,\r\n                debtToIncomeRatio: keyMetrics.debtToIncomeRatio,\r\n                equityRatio: totalAssets > 0 ? ((totalAssets - totalLiabilities) / totalAssets) * 100 : 0\r\n            },\r\n            efficiencyRatios: {\r\n                savingsRate: keyMetrics.savingsRate,\r\n                expenseRatio: monthlyIncome > 0 ? (monthlyExpenses / monthlyIncome) * 100 : 0,\r\n                investmentRate: monthlyIncome > 0 ? (data.behaviors.monthlyInvestmentContribution / monthlyIncome) * 100 : 0\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Assess Financial Risk\r\n     */\r\n    private static assessFinancialRisk(data: UserFinancialData, keyMetrics: any): any {\r\n        const risks: { category: string; level: string; description: string; mitigation: string }[] = [];\r\n        \r\n        // Income risk\r\n        if (data.income.secondaryIncome === 0 && data.income.businessIncome === 0) {\r\n            risks.push({\r\n                category: 'Income Concentration',\r\n                level: 'High',\r\n                description: 'Dependent on single income source',\r\n                mitigation: 'Develop multiple income streams or enhance job security'\r\n            });\r\n        }\r\n        \r\n        // Liquidity risk\r\n        if (keyMetrics.emergencyFundMonths < 3) {\r\n            risks.push({\r\n                category: 'Liquidity Risk',\r\n                level: 'High',\r\n                description: 'Insufficient emergency funds',\r\n                mitigation: 'Build emergency fund to 6 months of expenses'\r\n            });\r\n        }\r\n        \r\n        // Credit risk\r\n        if (keyMetrics.creditUtilization > 30) {\r\n            risks.push({\r\n                category: 'Credit Risk',\r\n                level: 'Medium',\r\n                description: 'High credit utilization',\r\n                mitigation: 'Pay down credit card balances or increase credit limits'\r\n            });\r\n        }\r\n        \r\n        return {\r\n            overallRiskLevel: 'unknown',\r\n            riskFactors: risks\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Analyze Financial Goals\r\n     */\r\n    private static analyzeFinancialGoals(data: UserFinancialData, keyMetrics: any): any {\r\n        const currentAge = data.personalInfo.age;\r\n        const retirementAge = data.goals.retirementAge;\r\n        const yearsToRetirement = retirementAge - currentAge;\r\n        const monthlyInvestment = data.behaviors.monthlyInvestmentContribution;\r\n        \r\n        return {\r\n            retirementReadiness: {\r\n                yearsToRetirement,\r\n                currentSavings: data.assets.employer401k + data.assets.traditionalIRA + data.assets.rothIRA,\r\n                monthlyContribution: monthlyInvestment,\r\n                projectedValue: this.calculateRetirementProjection(data, keyMetrics),\r\n                onTrack: this.isRetirementOnTrack(data, keyMetrics)\r\n            },\r\n            emergencyGoal: {\r\n                target: this.getTotalMonthlyExpenses(data.expenses) * 6,\r\n                current: data.assets.emergencyFund + data.assets.savings,\r\n                progress: keyMetrics.emergencyFundMonths / 6 * 100,\r\n                timeToGoal: this.calculateTimeToEmergencyGoal(data, keyMetrics)\r\n            }\r\n        };\r\n    }\r\n\r\n    // Helper methods for the new analysis functions\r\n    private static calculateRetirementProjection(data: UserFinancialData, _keyMetrics: any): number {\r\n        const currentAge = data.personalInfo.age;\r\n        const retirementAge = data.goals.retirementAge;\r\n        const yearsToRetirement = retirementAge - currentAge;\r\n        const monthlyInvestment = data.behaviors.monthlyInvestmentContribution;\r\n        const currentSavings = data.assets.employer401k + data.assets.traditionalIRA + data.assets.rothIRA;\r\n        \r\n        // Assuming 7% annual return\r\n        const annualReturn = 0.07;\r\n        const futureValue = currentSavings * Math.pow(1 + annualReturn, yearsToRetirement);\r\n        const annuityValue = monthlyInvestment * 12 * (Math.pow(1 + annualReturn, yearsToRetirement) - 1) / annualReturn;\r\n        \r\n        return futureValue + annuityValue;\r\n    }\r\n\r\n    private static isRetirementOnTrack(data: UserFinancialData, keyMetrics: any): boolean {\r\n        const projectedValue = this.calculateRetirementProjection(data, keyMetrics);\r\n        const targetValue = data.goals.retirementIncomeNeeded * 25; // 4% rule\r\n        \r\n        return projectedValue >= targetValue;\r\n    }\r\n\r\n    private static calculateTimeToEmergencyGoal(data: UserFinancialData, keyMetrics: any): string {\r\n        const target = this.getTotalMonthlyExpenses(data.expenses) * 6;\r\n        const current = data.assets.emergencyFund + data.assets.savings;\r\n        const needed = target - current;\r\n        \r\n        if (needed <= 0) return 'Goal achieved';\r\n        if (keyMetrics.monthlyCashFlow <= 0) return 'Cannot achieve with current cash flow';\r\n        \r\n        const months = Math.ceil(needed / keyMetrics.monthlyCashFlow);\r\n        return `${months} months at current savings rate`;\r\n    }\r\n\r\n    private static calculatePeerBenchmarks(data: UserFinancialData): any { \r\n        return {\r\n            ageGroup: `${Math.floor(data.personalInfo.age / 10) * 10}s`,\r\n            incomeGroup: 'Middle Income',\r\n            netWorthPercentile: 50,\r\n            savingsRatePercentile: 45,\r\n            debtRatioPercentile: 55\r\n        };\r\n    }\r\n    \r\n    // Status helper methods\r\n    private static getCreditScoreStatus(score: number): 'excellent' | 'good' | 'fair' | 'poor' | 'critical' {\r\n        if (score >= 800) return 'excellent';\r\n        if (score >= 740) return 'good';\r\n        if (score >= 670) return 'fair';\r\n        if (score >= 580) return 'poor';\r\n        return 'critical';\r\n    }\r\n    \r\n    // Recommendation methods\r\n    private static getSpendingRecommendations(ratio: number): string[] { \r\n        if (ratio < 5) {\r\n            return [\r\n                'Immediate action needed: Create a strict budget to reduce expenses',\r\n                'Consider increasing income through side work or skills development',\r\n                'Review all subscriptions and discretionary spending'\r\n            ];\r\n        } else if (ratio < 10) {\r\n            return [\r\n                'Look for areas to cut unnecessary expenses',\r\n                'Consider ways to increase your income',\r\n                'Build an emergency fund as a priority'\r\n            ];\r\n        }\r\n        return ['Great job maintaining positive cash flow!'];\r\n    }\r\n    \r\n    private static getPaymentReliabilityRecommendations(reliability: string): string[] { \r\n        if (reliability === 'often-late' || reliability === 'sometimes-late') {\r\n            return [\r\n                'Set up automatic bill payments to improve payment history',\r\n                'Create a bill payment calendar with due dates',\r\n                'Consider consolidating due dates to simplify management'\r\n            ];\r\n        }\r\n        return ['Keep up the excellent payment history!'];\r\n    }\r\n\r\n    /**\r\n     * Get actionable, research-based recommendations for emergency fund\r\n     * Prevents $NaN by checking for valid numbers and zero expenses\r\n     */\r\n    private static getEmergencyFundRecommendations(months: number, monthlyExpenses?: number): string[] {\r\n        if (typeof months !== 'number' || isNaN(months) || months < 0) months = 0;\r\n        if (typeof monthlyExpenses !== 'number' || isNaN(monthlyExpenses) || monthlyExpenses <= 0) {\r\n            return [\r\n                'Unable to calculate additional savings needed due to missing or invalid expense data. Please review your expense inputs.'\r\n            ];\r\n        }\r\n        if (months >= 6) return ['You have a strong emergency fund. Maintain your current savings habits.'];\r\n        if (months >= 3) return ['Your emergency fund is solid. Consider increasing to 6 months for extra security.'];\r\n        const needed = Math.max(0, Math.round((3 - months) * monthlyExpenses));\r\n        if (isNaN(needed) || needed < 0) {\r\n            return ['Unable to calculate additional savings needed due to invalid data.'];\r\n        }\r\n        return [\r\n            `You currently have ${!isNaN(months) ? months.toFixed(1) : 'N/A'} months of expenses saved. While this is a good start, aiming for at least 3 months provides a much stronger safety net. You need to save approximately $${!isNaN(needed) ? needed.toLocaleString() : 'N/A'} more to reach this goal.`\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Get actionable, research-based recommendations for debt management\r\n     * - <20%: Maintain current habits\r\n     * - 20-28%: Monitor and avoid new debt\r\n     * - 28-36%: Reduce discretionary spending, pay down high-interest debt\r\n     * - 36-43%: Aggressively pay down debt, consider consolidation\r\n     * - >43%: Seek professional help, create a debt reduction plan\r\n     */\r\n    private static getDebtManagementRecommendations(ratio: number): string[] {\r\n        if (ratio < 0.2) return ['Maintain your current debt management habits.'];\r\n        if (ratio < 0.28) return ['Monitor your debt and avoid taking on new obligations.'];\r\n        if (ratio < 0.36) return [\r\n            'Reduce discretionary spending to free up cash for debt payments.',\r\n            'Prioritize paying down high-interest debt.'\r\n        ];\r\n        if (ratio < 0.43) return [\r\n            'Aggressively pay down debt to lower your debt-to-income ratio.',\r\n            'Consider debt consolidation or refinancing options.'\r\n        ];\r\n        return [\r\n            'Seek professional financial counseling or debt management assistance.',\r\n            'Create a strict debt reduction plan and avoid new debt.'\r\n        ];\r\n    }\r\n\r\n    private static getCreditHealthRecommendations(creditScore: number, utilization: number): string[] {\r\n        const recommendations: string[] = [];\r\n        \r\n        if (creditScore < 670) {\r\n            recommendations.push('Focus on improving credit score through on-time payments');\r\n            recommendations.push('Consider becoming an authorized user on a family member\\'s account');\r\n        }\r\n        \r\n        if (utilization > 30) {\r\n            recommendations.push('Reduce credit card balances to improve utilization ratio');\r\n            recommendations.push('Consider paying down cards or requesting credit limit increases');\r\n        }\r\n        \r\n        if (recommendations.length === 0) {\r\n            recommendations.push('Great credit health! Maintain current habits.');\r\n        }\r\n        \r\n        return recommendations;\r\n    }\r\n\r\n    private static getInsuranceRecommendations(insurance: any): string[] {\r\n        const recommendations: string[] = [];\r\n        \r\n        if (!insurance.healthInsurance) {\r\n            recommendations.push('Get health insurance immediately - essential protection');\r\n        }\r\n        if (!insurance.lifeInsurance) {\r\n            recommendations.push('Consider life insurance to protect dependents');\r\n        }\r\n        if (!insurance.shortTermDisability && !insurance.longTermDisability) {\r\n            recommendations.push('Consider disability insurance to protect your income');\r\n        }\r\n        \r\n        if (recommendations.length === 0) {\r\n            recommendations.push('Good insurance coverage! Review annually to ensure adequacy.');\r\n        }\r\n        \r\n        return recommendations;\r\n    }\r\n\r\n    private static getRetirementRecommendations(goals: any, monthlyInvestment: number): string[] {\r\n        const recommendations: string[] = [];\r\n        \r\n        if (monthlyInvestment === 0) {\r\n            recommendations.push('Start investing for retirement immediately, even small amounts help');\r\n            recommendations.push('Take advantage of employer 401(k) match if available');\r\n        } else if (monthlyInvestment < 500) {\r\n            recommendations.push('Consider increasing retirement contributions');\r\n            recommendations.push('Target 10-15% of income for retirement savings');\r\n        }\r\n        \r\n        if (goals.retirementConfidence !== 'very-confident') {\r\n            recommendations.push('Meet with financial advisor to create retirement plan');\r\n            recommendations.push('Use retirement calculators to estimate needs');\r\n        }\r\n        \r\n        if (recommendations.length === 0) {\r\n            recommendations.push('Excellent retirement planning! Stay on track.');\r\n        }\r\n        \r\n        return recommendations;\r\n    }\r\n\r\n    private static getPlanningRecommendations(budgeting: string, planning: string): string[] {\r\n        const recommendations: string[] = [];\r\n        \r\n        if (budgeting === 'no-budget') {\r\n            recommendations.push('Start with basic expense tracking using apps or spreadsheets');\r\n            recommendations.push('Create a simple budget to understand spending patterns');\r\n        } else if (budgeting === 'mental-budget') {\r\n            recommendations.push('Move to written budget for better accuracy');\r\n        }\r\n        \r\n        if (planning === 'never-plan' || planning === 'rarely-plan') {\r\n            recommendations.push('Set aside time monthly for financial planning');\r\n            recommendations.push('Start with simple goal-setting and progress tracking');\r\n        }\r\n        \r\n        if (recommendations.length === 0) {\r\n            recommendations.push('Great financial planning habits! Keep it up.');\r\n        }\r\n        \r\n        return recommendations;\r\n    }\r\n\r\n    private static getCreditUtilizationStatus(utilization: number): 'excellent' | 'good' | 'fair' | 'poor' | 'critical' {\r\n        if (utilization <= 10) return 'excellent';\r\n        if (utilization <= 30) return 'good';\r\n        if (utilization <= 50) return 'fair';\r\n        if (utilization <= 80) return 'poor';\r\n        return 'critical';\r\n    }\r\n\r\n    private static formatConfidenceText(confidence: string): string {\r\n        return confidence.replace(/-/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\r\n    }\r\n\r\n    private static formatBudgetText(budget: string): string {\r\n        const map: { [key: string]: string } = {\r\n            'detailed-budget': 'Detailed Budget',\r\n            'simple-tracking': 'Simple Tracking',\r\n            'mental-budget': 'Mental Budget',\r\n            'no-budget': 'No Budget'\r\n        };\r\n        return map[budget] || budget;\r\n    }\r\n\r\n    private static formatPlanningText(planning: string): string {\r\n        const map: { [key: string]: string } = {\r\n            'actively-plan': 'Actively Plan',\r\n            'occasionally-plan': 'Occasionally Plan',\r\n            'rarely-plan': 'Rarely Plan',\r\n            'never-plan': 'Never Plan'\r\n        };\r\n        return map[planning] || planning;\r\n    }\r\n\r\n    /**\r\n     * Validate that we're using actual user data, not mock/default values\r\n     */\r\n    private static validateUserData(data: UserFinancialData): void {\r\n        console.log('🔍 Data Validation - Verifying actual user inputs:', {\r\n            primarySalary: data.income.primarySalary,\r\n            housing: data.expenses.housing,\r\n            totalAssets: this.getTotalAssets(data.assets),\r\n            totalLiabilities: this.getTotalLiabilities(data.liabilities),\r\n            creditScore: data.liabilities.creditScore\r\n        });\r\n\r\n        // Log key calculations to ensure we're using real data\r\n        const totalIncome = this.getTotalMonthlyIncome(data.income);\r\n        const totalExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const cashFlow = totalIncome - totalExpenses;\r\n        \r\n        console.log('🔍 Calculated Metrics from User Data:', {\r\n            totalMonthlyIncome: totalIncome,\r\n            totalMonthlyExpenses: totalExpenses,\r\n            monthlyCashFlow: cashFlow,\r\n            emergencyFundMonths: totalExpenses > 0 ? (data.assets.checking + data.assets.savings + data.assets.emergencyFund) / totalExpenses : 0\r\n        });\r\n\r\n        // Validate critical inputs are not zero/default\r\n        if (data.income.primarySalary <= 0) {\r\n            throw new Error('Invalid data: Primary salary cannot be zero or negative');\r\n        }\r\n\r\n        if (data.liabilities.creditScore < 300 || data.liabilities.creditScore > 850) {\r\n            throw new Error('Invalid data: Credit score must be between 300 and 850');\r\n        }\r\n\r\n        console.log('✅ Data validation passed - using actual user inputs');\r\n    }\r\n} ","/**\r\n * Multi-Step Financial Data Collection Form\r\n * Comprehensive form based on 8 financial health indicators research\r\n */\r\n\r\nimport { FormStep, FormField, UserFinancialData } from '../../types';\r\n\r\nexport class MultiStepForm {\r\n    private currentStepIndex: number = 0;\r\n    private formData: Partial<UserFinancialData> = {};\r\n    private steps: FormStep[] = [];\r\n    private onDataChange?: (data: Partial<UserFinancialData>) => void;\r\n    private onComplete?: (data: UserFinancialData) => void;\r\n\r\n    constructor(\r\n        private container: HTMLElement,\r\n        callbacks?: {\r\n            onDataChange?: (data: Partial<UserFinancialData>) => void;\r\n            onComplete?: (data: UserFinancialData) => void;\r\n        }\r\n    ) {\r\n        this.onDataChange = callbacks?.onDataChange;\r\n        this.onComplete = callbacks?.onComplete;\r\n        this.initializeSteps();\r\n        this.initializeFormData();\r\n        this.render();\r\n    }\r\n\r\n    private initializeSteps(): void {\r\n        this.steps = [\r\n            {\r\n                id: 'personal-info',\r\n                title: 'Personal Information',\r\n                description: 'Tell us about yourself to personalize your analysis',\r\n                fields: [\r\n                    {\r\n                        id: 'age',\r\n                        type: 'number',\r\n                        label: 'Age',\r\n                        description: 'Your current age',\r\n                        required: true,\r\n                        value: 30,\r\n                        validation: { min: 18, max: 100 }\r\n                    },\r\n                    {\r\n                        id: 'maritalStatus',\r\n                        type: 'select',\r\n                        label: 'Marital Status',\r\n                        required: true,\r\n                        value: 'single',\r\n                        options: [\r\n                            { value: 'single', label: 'Single' },\r\n                            { value: 'married', label: 'Married' },\r\n                            { value: 'divorced', label: 'Divorced' },\r\n                            { value: 'widowed', label: 'Widowed' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        id: 'dependents',\r\n                        type: 'number',\r\n                        label: 'Number of Dependents',\r\n                        description: 'Children or others who depend on you financially',\r\n                        required: true,\r\n                        value: 0,\r\n                        validation: { min: 0, max: 10 }\r\n                    },\r\n                    {\r\n                        id: 'employmentStatus',\r\n                        type: 'select',\r\n                        label: 'Employment Status',\r\n                        required: true,\r\n                        value: 'employed',\r\n                        options: [\r\n                            { value: 'employed', label: 'Employed' },\r\n                            { value: 'self-employed', label: 'Self-Employed' },\r\n                            { value: 'unemployed', label: 'Unemployed' },\r\n                            { value: 'retired', label: 'Retired' },\r\n                            { value: 'student', label: 'Student' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        id: 'employmentTenure',\r\n                        type: 'number',\r\n                        label: 'Years at Current Job',\r\n                        description: 'How long have you been in your current position?',\r\n                        required: true,\r\n                        value: 3,\r\n                        validation: { min: 0, max: 50 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'income',\r\n                title: 'Income Sources',\r\n                description: 'All sources of monthly income',\r\n                fields: [\r\n                    {\r\n                        id: 'primarySalary',\r\n                        type: 'number',\r\n                        label: 'Primary Salary (Monthly)',\r\n                        description: 'Your main job salary after taxes',\r\n                        required: true,\r\n                        value: 5000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'secondaryIncome',\r\n                        type: 'number',\r\n                        label: 'Secondary Income (Monthly)',\r\n                        description: 'Part-time work, freelancing, side hustles',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 50 }\r\n                    },\r\n                    {\r\n                        id: 'businessIncome',\r\n                        type: 'number',\r\n                        label: 'Business Income (Monthly)',\r\n                        description: 'Net income from business ownership',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'investmentIncome',\r\n                        type: 'number',\r\n                        label: 'Investment Income (Monthly)',\r\n                        description: 'Dividends, interest, capital gains',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'rentalIncome',\r\n                        type: 'number',\r\n                        label: 'Rental Income (Monthly)',\r\n                        description: 'Net rental income from properties',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'benefitsIncome',\r\n                        type: 'number',\r\n                        label: 'Benefits Income (Monthly)',\r\n                        description: 'Social Security, disability, unemployment',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 50 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'expenses',\r\n                title: 'Monthly Expenses',\r\n                description: 'Break down your monthly spending',\r\n                fields: [\r\n                    {\r\n                        id: 'housing',\r\n                        type: 'number',\r\n                        label: 'Housing (Rent/Mortgage)',\r\n                        description: 'Monthly housing payment',\r\n                        required: true,\r\n                        value: 1500,\r\n                        validation: { min: 0, step: 50 }\r\n                    },\r\n                    {\r\n                        id: 'utilities',\r\n                        type: 'number',\r\n                        label: 'Utilities',\r\n                        description: 'Electric, gas, water, internet, phone',\r\n                        required: true,\r\n                        value: 200,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'food',\r\n                        type: 'number',\r\n                        label: 'Food & Groceries',\r\n                        description: 'Monthly food spending',\r\n                        required: true,\r\n                        value: 400,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'transportation',\r\n                        type: 'number',\r\n                        label: 'Transportation',\r\n                        description: 'Car payment, gas, insurance, public transit',\r\n                        required: true,\r\n                        value: 300,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'healthcare',\r\n                        type: 'number',\r\n                        label: 'Healthcare',\r\n                        description: 'Insurance premiums, copays, medications',\r\n                        required: true,\r\n                        value: 150,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'entertainment',\r\n                        type: 'number',\r\n                        label: 'Entertainment',\r\n                        description: 'Movies, subscriptions, hobbies',\r\n                        required: false,\r\n                        value: 100,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'diningOut',\r\n                        type: 'number',\r\n                        label: 'Dining Out',\r\n                        description: 'Restaurants, takeout, coffee',\r\n                        required: false,\r\n                        value: 150,\r\n                        validation: { min: 0, step: 25 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'assets',\r\n                title: 'Assets & Savings',\r\n                description: 'Your current assets and investments',\r\n                fields: [\r\n                    {\r\n                        id: 'checking',\r\n                        type: 'number',\r\n                        label: 'Checking Account',\r\n                        description: 'Current balance in checking',\r\n                        required: true,\r\n                        value: 2000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'savings',\r\n                        type: 'number',\r\n                        label: 'Savings Account',\r\n                        description: 'Current savings balance',\r\n                        required: true,\r\n                        value: 5000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'emergencyFund',\r\n                        type: 'number',\r\n                        label: 'Emergency Fund',\r\n                        description: 'Funds specifically for emergencies',\r\n                        required: true,\r\n                        value: 3000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'employer401k',\r\n                        type: 'number',\r\n                        label: '401(k) Balance',\r\n                        description: 'Current 401k balance',\r\n                        required: false,\r\n                        value: 25000,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'traditionalIRA',\r\n                        type: 'number',\r\n                        label: 'Traditional IRA',\r\n                        description: 'Traditional IRA balance',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'rothIRA',\r\n                        type: 'number',\r\n                        label: 'Roth IRA',\r\n                        description: 'Roth IRA balance',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'brokerageAccounts',\r\n                        type: 'number',\r\n                        label: 'Brokerage Accounts',\r\n                        description: 'Taxable investment accounts',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 1000 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'liabilities',\r\n                title: 'Debts & Liabilities',\r\n                description: 'Your current debts and obligations',\r\n                fields: [\r\n                    {\r\n                        id: 'creditCardDebt',\r\n                        type: 'number',\r\n                        label: 'Credit Card Debt',\r\n                        description: 'Total credit card balances',\r\n                        required: true,\r\n                        value: 2000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'studentLoans',\r\n                        type: 'number',\r\n                        label: 'Student Loans',\r\n                        description: 'Total student loan debt',\r\n                        required: false,\r\n                        value: 15000,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'autoLoans',\r\n                        type: 'number',\r\n                        label: 'Auto Loans',\r\n                        description: 'Car loan balances',\r\n                        required: false,\r\n                        value: 8000,\r\n                        validation: { min: 0, step: 500 }\r\n                    },\r\n                    {\r\n                        id: 'mortgageBalance',\r\n                        type: 'number',\r\n                        label: 'Mortgage Balance',\r\n                        description: 'Remaining mortgage debt',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'personalLoans',\r\n                        type: 'number',\r\n                        label: 'Personal Loans',\r\n                        description: 'Other personal debt',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 500 }\r\n                    },\r\n                    {\r\n                        id: 'creditScore',\r\n                        type: 'number',\r\n                        label: 'Credit Score',\r\n                        description: 'Your current credit score',\r\n                        required: true,\r\n                        value: 720,\r\n                        validation: { min: 300, max: 850 }\r\n                    },\r\n                    {\r\n                        id: 'totalCreditLimit',\r\n                        type: 'number',\r\n                        label: 'Total Credit Limit',\r\n                        description: 'Combined credit card limits',\r\n                        required: true,\r\n                        value: 10000,\r\n                        validation: { min: 0, step: 500 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'goals-behavior',\r\n                title: 'Goals & Behavior',\r\n                description: 'Your financial goals and habits',\r\n                fields: [\r\n                    {\r\n                        id: 'retirementAge',\r\n                        type: 'number',\r\n                        label: 'Target Retirement Age',\r\n                        description: 'When do you want to retire?',\r\n                        required: true,\r\n                        value: 65,\r\n                        validation: { min: 50, max: 80 }\r\n                    },\r\n                    {\r\n                        id: 'retirementIncomeNeeded',\r\n                        type: 'number',\r\n                        label: 'Monthly Retirement Income Goal',\r\n                        description: 'How much monthly income do you want in retirement?',\r\n                        required: true,\r\n                        value: 4000,\r\n                        validation: { min: 1000, step: 500 }\r\n                    },\r\n                    {\r\n                        id: 'emergencyFundTarget',\r\n                        type: 'number',\r\n                        label: 'Emergency Fund Target',\r\n                        description: 'Your target emergency fund amount',\r\n                        required: true,\r\n                        value: 10000,\r\n                        validation: { min: 1000, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'monthlyInvestmentContribution',\r\n                        type: 'number',\r\n                        label: 'Monthly Investment Contribution',\r\n                        description: 'How much do you invest monthly?',\r\n                        required: true,\r\n                        value: 300,\r\n                        validation: { min: 0, step: 50 }\r\n                    },\r\n                    {\r\n                        id: 'riskTolerance',\r\n                        type: 'select',\r\n                        label: 'Risk Tolerance',\r\n                        required: true,\r\n                        value: 'moderate',\r\n                        options: [\r\n                            { value: 'conservative', label: 'Conservative - Prefer stability' },\r\n                            { value: 'moderate', label: 'Moderate - Balanced approach' },\r\n                            { value: 'aggressive', label: 'Aggressive - Higher risk for growth' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        id: 'billPaymentReliability',\r\n                        type: 'select',\r\n                        label: 'Bill Payment History',\r\n                        required: true,\r\n                        value: 'usually-on-time',\r\n                        options: [\r\n                            { value: 'always-on-time', label: 'Always pay on time' },\r\n                            { value: 'usually-on-time', label: 'Usually pay on time' },\r\n                            { value: 'sometimes-late', label: 'Sometimes pay late' },\r\n                            { value: 'often-late', label: 'Often pay late' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        id: 'budgetingMethod',\r\n                        type: 'select',\r\n                        label: 'Budgeting Method',\r\n                        required: true,\r\n                        value: 'simple-tracking',\r\n                        options: [\r\n                            { value: 'detailed-budget', label: 'Detailed budget tracking' },\r\n                            { value: 'simple-tracking', label: 'Simple expense tracking' },\r\n                            { value: 'mental-budget', label: 'Mental budget only' },\r\n                            { value: 'no-budget', label: 'No budgeting' }\r\n                        ]\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            }\r\n        ];\r\n    }\r\n\r\n    private initializeFormData(): void {\r\n        // Initialize with default values from form fields\r\n        this.formData = {\r\n            personalInfo: {\r\n                age: 30,\r\n                maritalStatus: 'single',\r\n                dependents: 0,\r\n                state: 'CA',\r\n                employmentStatus: 'employed',\r\n                employmentTenure: 3,\r\n                healthStatus: 'good',\r\n                healthInsurance: true,\r\n                lifeInsurance: false,\r\n                shortTermDisability: false,\r\n                longTermDisability: false\r\n            },\r\n            income: {\r\n                primarySalary: 5000,\r\n                secondaryIncome: 0,\r\n                businessIncome: 0,\r\n                investmentIncome: 0,\r\n                rentalIncome: 0,\r\n                benefitsIncome: 0,\r\n                otherIncome: 0,\r\n                incomeGrowthRate: 3,\r\n                incomeVariability: 'stable',\r\n                effectiveTaxRate: 22\r\n            },\r\n            expenses: {\r\n                housing: 1500,\r\n                utilities: 200,\r\n                insurance: 150,\r\n                loanPayments: 400,\r\n                childcare: 0,\r\n                food: 400,\r\n                transportation: 300,\r\n                healthcare: 150,\r\n                clothing: 100,\r\n                personalCare: 50,\r\n                entertainment: 100,\r\n                diningOut: 150,\r\n                hobbies: 50,\r\n                subscriptions: 50,\r\n                shopping: 100,\r\n                travel: 200,\r\n                creditCardPayments: 100,\r\n                studentLoanPayments: 200,\r\n                otherDebtPayments: 100\r\n            },\r\n            assets: {\r\n                checking: 2000,\r\n                savings: 5000,\r\n                moneyMarket: 0,\r\n                emergencyFund: 3000,\r\n                employer401k: 25000,\r\n                traditionalIRA: 0,\r\n                rothIRA: 0,\r\n                brokerageAccounts: 0,\r\n                stocks: 0,\r\n                bonds: 0,\r\n                mutualFunds: 0,\r\n                primaryResidence: 0,\r\n                investmentProperties: 0,\r\n                cryptocurrency: 0,\r\n                preciousMetals: 0,\r\n                collectibles: 0,\r\n                businessEquity: 0,\r\n                otherAssets: 0\r\n            },\r\n            liabilities: {\r\n                mortgageBalance: 0,\r\n                homeEquityLoan: 0,\r\n                autoLoans: 8000,\r\n                securedCreditLines: 0,\r\n                creditCardDebt: 2000,\r\n                personalLoans: 0,\r\n                studentLoans: 15000,\r\n                medicalDebt: 0,\r\n                businessLoans: 0,\r\n                businessCreditLines: 0,\r\n                taxDebt: 0,\r\n                legalJudgments: 0,\r\n                otherDebt: 0,\r\n                creditScore: 720,\r\n                totalCreditLimit: 10000\r\n            },\r\n            insurance: {\r\n                healthInsurance: true,\r\n                healthDeductible: 2000,\r\n                healthOutOfPocketMax: 6000,\r\n                lifeInsurance: false,\r\n                lifeCoverageAmount: 0,\r\n                shortTermDisability: false,\r\n                longTermDisability: false,\r\n                disabilityCoveragePercent: 0,\r\n                homeInsurance: false,\r\n                autoInsurance: true,\r\n                umbrellaPolicy: false,\r\n                insuranceConfidence: 'somewhat-confident'\r\n            },\r\n            goals: {\r\n                emergencyFundTarget: 10000,\r\n                debtPayoffGoal: true,\r\n                majorPurchaseAmount: 5000,\r\n                homeDownPayment: 0,\r\n                educationFunding: 0,\r\n                careerChangeBuffer: 0,\r\n                retirementAge: 65,\r\n                retirementIncomeNeeded: 4000,\r\n                legacyGoalAmount: 0,\r\n                retirementConfidence: 'somewhat-confident',\r\n                longTermGoalConfidence: 'somewhat-confident',\r\n                riskTolerance: 'moderate',\r\n                investmentExperience: 'intermediate'\r\n            },\r\n            behaviors: {\r\n                billPaymentReliability: 'usually-on-time',\r\n                budgetingMethod: 'simple-tracking',\r\n                financialPlanningEngagement: 'occasionally-plan',\r\n                automaticSavings: true,\r\n                monthlyInvestmentContribution: 300,\r\n                emergencyFundPriority: 'high',\r\n                impulseSpendingFrequency: 'sometimes',\r\n                expenseTrackingMethod: 'casual'\r\n            }\r\n        };\r\n    }\r\n\r\n    private render(): void {\r\n        this.container.innerHTML = `\r\n            <div class=\"multi-step-form\">\r\n                <div class=\"form-progress\">\r\n                    <div class=\"progress-bar\">\r\n                        <div class=\"progress-fill\" style=\"width: ${((this.currentStepIndex + 1) / this.steps.length) * 100}%\"></div>\r\n                    </div>\r\n                    <div class=\"progress-text\">Step ${this.currentStepIndex + 1} of ${this.steps.length}</div>\r\n                </div>\r\n                \r\n                <div class=\"form-step-content\">\r\n                    ${this.renderCurrentStep()}\r\n                </div>\r\n                \r\n                <div class=\"form-navigation\">\r\n                    <button class=\"btn-secondary\" id=\"prevBtn\" ${this.currentStepIndex === 0 ? 'disabled' : ''}>\r\n                        Previous\r\n                    </button>\r\n                    <button class=\"btn-primary\" id=\"nextBtn\">\r\n                        ${this.currentStepIndex === this.steps.length - 1 ? 'Complete Analysis' : 'Next'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        this.attachEventListeners();\r\n    }\r\n\r\n    private renderCurrentStep(): string {\r\n        const step = this.steps[this.currentStepIndex];\r\n        \r\n        return `\r\n            <div class=\"step-header\">\r\n                <h2>${step.title}</h2>\r\n                <p>${step.description}</p>\r\n            </div>\r\n            \r\n            <div class=\"step-fields\">\r\n                ${step.fields.map(field => this.renderField(field)).join('')}\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    private renderField(field: FormField): string {\r\n        const value = this.getFieldValue(field.id);\r\n        \r\n        switch (field.type) {\r\n            case 'number':\r\n                return `\r\n                    <div class=\"form-field\">\r\n                        <label for=\"${field.id}\">\r\n                            ${field.label}\r\n                            ${field.required ? '<span class=\"required\">*</span>' : ''}\r\n                        </label>\r\n                        ${field.description ? `<p class=\"field-description\">${field.description}</p>` : ''}\r\n                        <input \r\n                            type=\"number\" \r\n                            id=\"${field.id}\" \r\n                            name=\"${field.id}\"\r\n                            value=\"${value}\"\r\n                            ${field.required ? 'required' : ''}\r\n                            ${field.validation?.min !== undefined ? `min=\"${field.validation.min}\"` : ''}\r\n                            ${field.validation?.max !== undefined ? `max=\"${field.validation.max}\"` : ''}\r\n                            ${field.validation?.step !== undefined ? `step=\"${field.validation.step}\"` : ''}\r\n                        />\r\n                    </div>\r\n                `;\r\n            \r\n            case 'select':\r\n                return `\r\n                    <div class=\"form-field\">\r\n                        <label for=\"${field.id}\">\r\n                            ${field.label}\r\n                            ${field.required ? '<span class=\"required\">*</span>' : ''}\r\n                        </label>\r\n                        ${field.description ? `<p class=\"field-description\">${field.description}</p>` : ''}\r\n                        <select id=\"${field.id}\" name=\"${field.id}\" ${field.required ? 'required' : ''}>\r\n                            ${field.options?.map(option => \r\n                                `<option value=\"${option.value}\" ${value === option.value ? 'selected' : ''}>${option.label}</option>`\r\n                            ).join('')}\r\n                        </select>\r\n                    </div>\r\n                `;\r\n            \r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n    private getFieldValue(fieldId: string): any {\r\n        // Use type assertion to avoid TS error for dynamic field access\r\n        const value = (this.formData as any)[fieldId];\r\n        if (typeof value === 'number' && (isNaN(value) || value < 0)) return 0;\r\n        return value;\r\n    }\r\n\r\n    private attachEventListeners(): void {\r\n        const prevBtn = this.container.querySelector('#prevBtn') as HTMLButtonElement;\r\n        const nextBtn = this.container.querySelector('#nextBtn') as HTMLButtonElement;\r\n\r\n        prevBtn?.addEventListener('click', () => this.previousStep());\r\n        nextBtn?.addEventListener('click', () => this.nextStep());\r\n\r\n        // Add input event listeners for real-time validation\r\n        const inputs = this.container.querySelectorAll('input, select');\r\n        inputs.forEach(input => {\r\n            input.addEventListener('change', (e) => this.handleFieldChange(e));\r\n        });\r\n    }\r\n\r\n    private handleFieldChange(event: Event): void {\r\n        const input = event.target as HTMLInputElement | HTMLSelectElement;\r\n        const fieldId = input.id;\r\n        const value = input.type === 'number' ? parseFloat(input.value) : input.value;\r\n        \r\n        // Update the field value in the current step\r\n        const currentStep = this.steps[this.currentStepIndex];\r\n        const field = currentStep.fields.find(f => f.id === fieldId);\r\n        if (field) {\r\n            field.value = value;\r\n        }\r\n\r\n        // Update the form data structure\r\n        this.updateFormData(fieldId, value);\r\n        \r\n        // Trigger data change callback\r\n        this.onDataChange?.(this.formData);\r\n    }\r\n\r\n    private updateFormData(fieldId: string, value: any): void {\r\n        // Update the nested form data structure based on field ID\r\n        const currentStepId = this.steps[this.currentStepIndex].id;\r\n        \r\n        switch (currentStepId) {\r\n            case 'personal-info':\r\n                if (!this.formData.personalInfo) this.formData.personalInfo = {} as any;\r\n                (this.formData.personalInfo as any)[fieldId] = value;\r\n                break;\r\n            case 'income':\r\n                if (!this.formData.income) this.formData.income = {} as any;\r\n                (this.formData.income as any)[fieldId] = value;\r\n                break;\r\n            case 'expenses':\r\n                if (!this.formData.expenses) this.formData.expenses = {} as any;\r\n                (this.formData.expenses as any)[fieldId] = value;\r\n                break;\r\n            case 'assets':\r\n                if (!this.formData.assets) this.formData.assets = {} as any;\r\n                (this.formData.assets as any)[fieldId] = value;\r\n                break;\r\n            case 'liabilities':\r\n                if (!this.formData.liabilities) this.formData.liabilities = {} as any;\r\n                (this.formData.liabilities as any)[fieldId] = value;\r\n                break;\r\n            case 'goals-behavior':\r\n                if (fieldId === 'retirementAge' || fieldId === 'retirementIncomeNeeded' || fieldId === 'emergencyFundTarget' || fieldId === 'riskTolerance') {\r\n                    if (!this.formData.goals) this.formData.goals = {} as any;\r\n                    (this.formData.goals as any)[fieldId] = value;\r\n                } else if (fieldId === 'monthlyInvestmentContribution' || fieldId === 'billPaymentReliability' || fieldId === 'budgetingMethod') {\r\n                    if (!this.formData.behaviors) this.formData.behaviors = {} as any;\r\n                    (this.formData.behaviors as any)[fieldId] = value;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    private validateCurrentStep(): boolean {\r\n        const currentStep = this.steps[this.currentStepIndex];\r\n        const errors: string[] = [];\r\n\r\n        for (const field of currentStep.fields) {\r\n            // Allow 0 as a valid value for number fields\r\n            if (field.required && (field.value === undefined || field.value === null || \r\n                (field.value === '' && field.type !== 'number') || \r\n                (field.type === 'number' && isNaN(Number(field.value))))) {\r\n                errors.push(`${field.label} is required`);\r\n            }\r\n            \r\n            if (field.type === 'number' && field.validation && field.value !== undefined && field.value !== null && field.value !== '') {\r\n                const numValue = parseFloat(field.value);\r\n                if (!isNaN(numValue)) {\r\n                    if (field.validation.min !== undefined && numValue < field.validation.min) {\r\n                        errors.push(`${field.label} must be at least ${field.validation.min}`);\r\n                    }\r\n                    if (field.validation.max !== undefined && numValue > field.validation.max) {\r\n                        errors.push(`${field.label} must be at most ${field.validation.max}`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        currentStep.validationErrors = errors;\r\n        currentStep.isComplete = errors.length === 0;\r\n        \r\n        return errors.length === 0;\r\n    }\r\n\r\n    private previousStep(): void {\r\n        if (this.currentStepIndex > 0) {\r\n            this.currentStepIndex--;\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    private nextStep(): void {\r\n        if (this.validateCurrentStep()) {\r\n            if (this.currentStepIndex === this.steps.length - 1) {\r\n                // Complete the form\r\n                this.completeForm();\r\n            } else {\r\n                this.currentStepIndex++;\r\n                this.render();\r\n            }\r\n        } else {\r\n            // Show validation errors\r\n            this.showValidationErrors();\r\n        }\r\n    }\r\n\r\n    private showValidationErrors(): void {\r\n        const currentStep = this.steps[this.currentStepIndex];\r\n        if (currentStep.validationErrors.length > 0) {\r\n            alert('Please fix the following errors:\\n' + currentStep.validationErrors.join('\\n'));\r\n        }\r\n    }\r\n\r\n    private completeForm(): void {\r\n        // Defensive: Build a complete, validated UserFinancialData object\r\n        const userData = this.buildCompleteUserData();\r\n        if (this.onComplete) {\r\n            this.onComplete(userData);\r\n        }\r\n    }\r\n\r\n    private buildCompleteUserData(): UserFinancialData {\r\n        // Normalize and validate all fields, fill missing with defaults\r\n        // ... implement normalization logic here ...\r\n        return this.formData as UserFinancialData;\r\n    }\r\n\r\n    public getCurrentData(): Partial<UserFinancialData> {\r\n        return this.formData;\r\n    }\r\n} ","/**\r\n * Quick Analysis Form Component\r\n * Simplified form requiring only essential financial inputs\r\n */\r\n\r\nimport { UserFinancialData } from '../../interfaces/core-types';\r\n\r\nexport class QuickAnalysisForm {\r\n    private container: HTMLElement;\r\n    private onSubmit: (data: UserFinancialData) => void;\r\n\r\n    constructor(containerId: string, onSubmit: (data: UserFinancialData) => void) {\r\n        const element = document.getElementById(containerId);\r\n        if (!element) {\r\n            throw new Error(`Element with ID ${containerId} not found`);\r\n        }\r\n        this.container = element;\r\n        this.onSubmit = onSubmit;\r\n    }\r\n\r\n    public render(): void {\r\n        this.container.innerHTML = this.generateHTML();\r\n        this.attachEventListeners();\r\n    }\r\n\r\n    private generateHTML(): string {\r\n        return `\r\n            <div class=\"quick-analysis-form\">\r\n                <div class=\"form-header\">\r\n                    <h2>Quick Financial Health Check</h2>\r\n                    <p class=\"form-description\">\r\n                        Get a comprehensive financial analysis with just 6 essential inputs. \r\n                        Takes less than 2 minutes to complete.\r\n                    </p>\r\n                    <div class=\"progress-indicator\">\r\n                        <div class=\"progress-bar\">\r\n                            <div class=\"progress-fill\" id=\"formProgress\"></div>\r\n                        </div>\r\n                        <p class=\"progress-text\">Complete all fields to analyze</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <form id=\"quickAnalysisForm\" class=\"quick-form\">\r\n                    <div class=\"form-grid\">\r\n                        <div class=\"form-field\" data-field=\"income\">\r\n                            <label for=\"monthlyIncome\" class=\"field-label\">\r\n                                <span class=\"label-text\">Monthly Take-Home Income</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Your salary after taxes and deductions\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\" \r\n                                       id=\"monthlyIncome\" \r\n                                       name=\"monthlyIncome\" \r\n                                       placeholder=\"5,000\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Your monthly income after taxes and deductions</p>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"housing\">\r\n                            <label for=\"monthlyHousing\" class=\"field-label\">\r\n                                <span class=\"label-text\">Monthly Housing Cost</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Rent or mortgage payment\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\"\r\n                                       id=\"monthlyHousing\" \r\n                                       name=\"monthlyHousing\" \r\n                                       placeholder=\"1,500\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Rent or mortgage payment (excluding utilities)</p>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"expenses\">\r\n                            <label for=\"monthlyExpenses\" class=\"field-label\">\r\n                                <span class=\"label-text\">Other Monthly Expenses</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Food, transportation, utilities, entertainment, etc.\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\"\r\n                                       id=\"monthlyExpenses\" \r\n                                       name=\"monthlyExpenses\" \r\n                                       placeholder=\"2,000\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Food, transportation, utilities, entertainment, etc.</p>\r\n                            <div class=\"expense-breakdown\">\r\n                                <small>Typical breakdown: Food (30%), Transportation (25%), Utilities (15%), Other (30%)</small>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"savings\">\r\n                            <label for=\"totalSavings\" class=\"field-label\">\r\n                                <span class=\"label-text\">Total Savings & Emergency Fund</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"All liquid savings including emergency fund\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\"\r\n                                       id=\"totalSavings\" \r\n                                       name=\"totalSavings\" \r\n                                       placeholder=\"15,000\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Checking, savings, emergency fund (liquid assets)</p>\r\n                            <div class=\"savings-indicator\">\r\n                                <small>Emergency fund goal: <span id=\"emergencyGoal\">--</span> months of expenses</small>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"debt\">\r\n                            <label for=\"totalDebt\" class=\"field-label\">\r\n                                <span class=\"label-text\">Total Debt</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Credit cards, student loans, car loans (excluding mortgage)\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\"\r\n                                       id=\"totalDebt\" \r\n                                       name=\"totalDebt\" \r\n                                       placeholder=\"25,000\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Credit cards, student loans, car loans (excluding mortgage)</p>\r\n                            <div class=\"debt-ratio-indicator\">\r\n                                <small>Debt-to-income ratio: <span id=\"debtRatio\">--</span></small>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"credit\">\r\n                            <label for=\"creditScore\" class=\"field-label\">\r\n                                <span class=\"label-text\">Credit Score</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Your current credit score (300-850)\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <input type=\"number\" \r\n                                       id=\"creditScore\" \r\n                                       name=\"creditScore\" \r\n                                       placeholder=\"720\"\r\n                                       min=\"300\" \r\n                                       max=\"850\" \r\n                                       required \r\n                                       class=\"field-input\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Your current credit score (300-850)</p>\r\n                            <div class=\"credit-range\">\r\n                                <div class=\"range-indicator\">\r\n                                    <span class=\"range poor\">300-579</span>\r\n                                    <span class=\"range fair\">580-669</span>\r\n                                    <span class=\"range good\">670-739</span>\r\n                                    <span class=\"range excellent\">740-850</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-actions\">\r\n                        <button type=\"submit\" class=\"btn btn-primary btn-large\" id=\"analyzeButton\" disabled>\r\n                            <span class=\"btn-icon\">📊</span>\r\n                            <span class=\"btn-text\">Analyze My Financial Health</span>\r\n                            <div class=\"btn-loader\" style=\"display: none;\">\r\n                                <div class=\"spinner\"></div>\r\n                            </div>\r\n                        </button>\r\n                        <p class=\"analysis-note\">\r\n                            Get instant insights into your financial health with personalized recommendations\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div class=\"validation-errors\" id=\"validationErrors\" style=\"display: none;\">\r\n                        <!-- Error messages will be inserted here -->\r\n                    </div>\r\n                </form>\r\n\r\n                <div class=\"form-benefits\">\r\n                    <h3>What You'll Get:</h3>\r\n                    <ul class=\"benefits-list\">\r\n                        <li>\r\n                            <span class=\"benefit-icon\">📈</span>\r\n                            <span>Overall Financial Health Score based on your actual data</span>\r\n                        </li>\r\n                        <li>\r\n                            <span class=\"benefit-icon\">💡</span>\r\n                            <span>8 Key Health Indicators with clear explanations</span>\r\n                        </li>\r\n                        <li>\r\n                            <span class=\"benefit-icon\">🎯</span>\r\n                            <span>Prioritized action recommendations</span>\r\n                        </li>\r\n                        <li>\r\n                            <span class=\"benefit-icon\">📊</span>\r\n                            <span>Comparison to people in your age and income group</span>\r\n                        </li>\r\n                        <li>\r\n                            <span class=\"benefit-icon\">🔮</span>\r\n                            <span>Projections for your financial future</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    private attachEventListeners(): void {\r\n        const form = this.container.querySelector('#quickAnalysisForm') as HTMLFormElement;\r\n        if (form) {\r\n            form.addEventListener('submit', (event) => {\r\n                event.preventDefault();\r\n                this.handleSubmit();\r\n            });\r\n\r\n            // Add real-time validation and feedback\r\n            const inputs = form.querySelectorAll('input[required]');\r\n            inputs.forEach(input => {\r\n                input.addEventListener('input', (event) => {\r\n                    this.handleInputChange(event.target as HTMLInputElement);\r\n                });\r\n                \r\n                input.addEventListener('blur', (event) => {\r\n                    const target = event.target as HTMLInputElement;\r\n                    // Format currency on blur\r\n                    if (target.dataset.format === 'currency') {\r\n                        this.formatCurrencyInput(target);\r\n                    }\r\n                    this.validateField(target);\r\n                });\r\n            });\r\n\r\n            // Add tooltips\r\n            this.attachTooltips();\r\n        }\r\n    }\r\n\r\n    private handleInputChange(_input: HTMLInputElement): void {\r\n        // DO NOT format currency on every input, as it interferes with typing.\r\n        // Formatting is now handled on the 'blur' event.\r\n\r\n        // Update real-time calculations\r\n        this.updateRealTimeCalculations();\r\n        \r\n        // Update progress\r\n        this.updateProgress();\r\n        \r\n        // Enable/disable submit button\r\n        this.updateSubmitButton();\r\n    }\r\n\r\n    private formatCurrencyInput(input: HTMLInputElement): void {\r\n        // First, strip any non-digit characters except for a decimal point\r\n        const value = input.value.replace(/[^0-9.]/g, '');\r\n        const numericValue = parseFloat(value) || 0;\r\n        // Allow zero as a valid value\r\n        input.value = numericValue > 0 ? numericValue.toLocaleString('en-US', { maximumFractionDigits: 0 }) : '0';\r\n    }\r\n\r\n    private updateRealTimeCalculations(): void {\r\n        const income = this.getNumericValue('monthlyIncome');\r\n        const housing = this.getNumericValue('monthlyHousing');\r\n        const expenses = this.getNumericValue('monthlyExpenses');\r\n        const savings = this.getNumericValue('totalSavings');\r\n        const debt = this.getNumericValue('totalDebt');\r\n\r\n        // Update emergency fund months\r\n        const totalExpenses = housing + expenses;\r\n        const emergencyGoal = document.getElementById('emergencyGoal');\r\n        if (emergencyGoal) {\r\n            if (totalExpenses > 0 && savings >= 0) {\r\n                const emergencyMonths = (savings / totalExpenses);\r\n                emergencyGoal.textContent = isNaN(emergencyMonths) ? 'N/A' : emergencyMonths.toFixed(1);\r\n                emergencyGoal.className = !isNaN(emergencyMonths) && emergencyMonths >= 3 ? 'good' : 'needs-improvement';\r\n            } else {\r\n                emergencyGoal.textContent = 'N/A';\r\n                emergencyGoal.className = '';\r\n            }\r\n        }\r\n\r\n        // Update debt-to-income ratio\r\n        const debtRatioElement = document.getElementById('debtRatio');\r\n        if (income > 0) {\r\n            const annualIncome = income * 12;\r\n            let debtRatio = 0;\r\n            if (debt > 0) {\r\n                debtRatio = ((debt / annualIncome) * 100);\r\n                if (debtRatioElement) {\r\n                    debtRatioElement.textContent = `${debtRatio.toFixed(1)}%`;\r\n                    debtRatioElement.className = debtRatio <= 36 ? 'good' : 'needs-improvement';\r\n                }\r\n            } else if (debt === 0) {\r\n                if (debtRatioElement) {\r\n                    debtRatioElement.textContent = 'No debt! 🎉';\r\n                    debtRatioElement.className = 'good';\r\n                }\r\n            }\r\n        } else if (debtRatioElement) {\r\n            debtRatioElement.textContent = 'N/A';\r\n            debtRatioElement.className = '';\r\n        }\r\n    }\r\n\r\n    private getNumericValue(fieldName: string): number {\r\n        const value = Number((this.container.querySelector(`[name=\"${fieldName}\"]`) as HTMLInputElement)?.value);\r\n        // Allow zero as valid, only block negatives and NaN\r\n        if (typeof value !== 'number' || isNaN(value) || value < 0) return 0;\r\n        return value;\r\n    }\r\n\r\n    private updateProgress(): void {\r\n        const form = this.container.querySelector('#quickAnalysisForm') as HTMLFormElement;\r\n        const inputs = form.querySelectorAll('input[required]');\r\n        let completedFields = 0;\r\n\r\n        inputs.forEach(input => {\r\n            if ((input as HTMLInputElement).value.trim() !== '') {\r\n                completedFields++;\r\n            }\r\n        });\r\n\r\n        const progress = (completedFields / inputs.length) * 100;\r\n        const progressFill = document.getElementById('formProgress');\r\n        const progressText = this.container.querySelector('.progress-text');\r\n        \r\n        if (progressFill) {\r\n            progressFill.style.width = `${progress}%`;\r\n        }\r\n        \r\n        if (progressText) {\r\n            if (progress === 100) {\r\n                progressText.textContent = 'Ready to analyze!';\r\n            } else {\r\n                progressText.textContent = `${completedFields}/${inputs.length} fields completed`;\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateSubmitButton(): void {\r\n        const form = this.container.querySelector('#quickAnalysisForm') as HTMLFormElement;\r\n        const button = document.getElementById('analyzeButton') as HTMLButtonElement;\r\n        const inputs = form.querySelectorAll('input[required]');\r\n        \r\n        let allValid = true;\r\n        inputs.forEach(input => {\r\n            const htmlInput = input as HTMLInputElement;\r\n            if (!htmlInput.value.trim() || !htmlInput.checkValidity()) {\r\n                allValid = false;\r\n            }\r\n        });\r\n\r\n        button.disabled = !allValid;\r\n        button.classList.toggle('ready', allValid);\r\n    }\r\n\r\n    private validateField(input: HTMLInputElement): void {\r\n        const fieldContainer = input.closest('.form-field');\r\n        const feedback = fieldContainer?.querySelector('.input-feedback');\r\n        if (!feedback) return;\r\n        let isValid = true;\r\n        let message = '';\r\n        const value = this.getNumericValue(input.name);\r\n        const fieldName = input.name;\r\n        // Basic validation\r\n        if (input.required && input.value.trim() === '') {\r\n            isValid = false;\r\n            message = 'This field is required';\r\n        } else if (value < 0) {\r\n            isValid = false;\r\n            message = 'Value cannot be negative';\r\n        } else {\r\n            // Field-specific validation\r\n            switch (fieldName) {\r\n                case 'creditScore':\r\n                    if (value < 300 || value > 850) {\r\n                        isValid = false;\r\n                        message = 'Credit score must be between 300 and 850';\r\n                    }\r\n                    break;\r\n                // $0 is valid for all other fields, including debt\r\n            }\r\n        }\r\n        fieldContainer?.classList.toggle('field-valid', isValid);\r\n        fieldContainer?.classList.toggle('field-error', !isValid);\r\n        if (feedback) {\r\n            feedback.textContent = message;\r\n            (feedback as HTMLElement).style.display = message ? 'block' : 'none';\r\n        }\r\n    }\r\n\r\n    private attachTooltips(): void {\r\n        const helpIcons = this.container.querySelectorAll('.help-icon');\r\n        helpIcons.forEach(icon => {\r\n            icon.addEventListener('mouseenter', (event) => {\r\n                const tooltipText = (event.target as HTMLElement).dataset.tooltip;\r\n                if (tooltipText) {\r\n                    this.showTooltip(event.target as HTMLElement, tooltipText);\r\n                }\r\n            });\r\n\r\n            icon.addEventListener('mouseleave', () => {\r\n                this.hideTooltip();\r\n            });\r\n        });\r\n    }\r\n\r\n    private showTooltip(element: HTMLElement, text: string): void {\r\n        // Ensure no old tooltips are lingering\r\n        this.hideTooltip();\r\n\r\n        const tooltip = document.createElement('div');\r\n        tooltip.className = 'tooltip';\r\n        tooltip.textContent = text;\r\n        document.body.appendChild(tooltip);\r\n\r\n        const rect = element.getBoundingClientRect();\r\n        // Position tooltip relative to the document, not the viewport\r\n        const top = rect.top + window.scrollY - 10;\r\n        const left = rect.left + rect.width / 2;\r\n\r\n        tooltip.style.left = `${left}px`;\r\n        tooltip.style.top = `${top}px`;\r\n        tooltip.style.transform = 'translate(-50%, -100%)';\r\n    }\r\n\r\n    private hideTooltip(): void {\r\n        const tooltip = document.querySelector('.tooltip');\r\n        if (tooltip) {\r\n            tooltip.remove();\r\n        }\r\n    }\r\n\r\n    private handleSubmit(): void {\r\n        const form = this.container.querySelector('#quickAnalysisForm') as HTMLFormElement;\r\n        const formData = new FormData(form);\r\n        \r\n        // Show loading state\r\n        const button = document.getElementById('analyzeButton') as HTMLButtonElement;\r\n        const btnText = button.querySelector('.btn-text');\r\n        const btnLoader = button.querySelector('.btn-loader');\r\n        \r\n        if (btnText && btnLoader) {\r\n            (btnText as HTMLElement).style.display = 'none';\r\n            (btnLoader as HTMLElement).style.display = 'block';\r\n        }\r\n        button.disabled = true;\r\n        \r\n        // Validate all fields and collect specific error messages\r\n        const inputs = form.querySelectorAll('input[required]');\r\n        const errors: string[] = [];\r\n        \r\n        inputs.forEach(input => {\r\n            this.validateField(input as HTMLInputElement);\r\n            const fieldContainer = (input as HTMLInputElement).closest('.form-field');\r\n            if (fieldContainer?.classList.contains('field-error')) {\r\n                const feedback = fieldContainer.querySelector('.input-feedback');\r\n                if (feedback && feedback.textContent) {\r\n                    const label = fieldContainer.querySelector('.label-text')?.textContent || 'Field';\r\n                    errors.push(`<strong>${label}:</strong> ${feedback.textContent}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (errors.length > 0) {\r\n            this.showValidationErrors(errors);\r\n            this.resetSubmitButton();\r\n            return;\r\n        }\r\n\r\n        // Hide errors if all are fixed\r\n        const errorContainer = this.container.querySelector('#validationErrors') as HTMLElement;\r\n        if (errorContainer) {\r\n            errorContainer.style.display = 'none';\r\n        }\r\n\r\n        // Build UserFinancialData from user inputs (NO DEFAULT VALUES)\r\n        const userData = this.buildUserDataFromForm(formData);\r\n        \r\n        // Log the actual data being used for analysis\r\n        console.log('🔍 Quick Analysis - Using actual user data:', {\r\n            monthlyIncome: userData.income.primarySalary,\r\n            monthlyHousing: userData.expenses.housing,\r\n            monthlyExpenses: userData.expenses.food + userData.expenses.transportation + userData.expenses.utilities,\r\n            totalSavings: userData.assets.checking + userData.assets.savings + userData.assets.emergencyFund,\r\n            totalDebt: userData.liabilities.creditCardDebt + userData.liabilities.autoLoans + userData.liabilities.studentLoans,\r\n            creditScore: userData.liabilities.creditScore\r\n        });\r\n        \r\n        this.onSubmit(userData);\r\n    }\r\n\r\n    private resetSubmitButton(): void {\r\n        const button = document.getElementById('analyzeButton') as HTMLButtonElement;\r\n        const btnText = button.querySelector('.btn-text');\r\n        const btnLoader = button.querySelector('.btn-loader');\r\n        \r\n        if (btnText && btnLoader) {\r\n            (btnText as HTMLElement).style.display = 'block';\r\n            (btnLoader as HTMLElement).style.display = 'none';\r\n        }\r\n        button.disabled = false;\r\n    }\r\n\r\n    private buildUserDataFromForm(formData: FormData): UserFinancialData {\r\n        // Get actual user inputs (remove any commas from formatted currency)\r\n        const monthlyIncome = parseFloat((formData.get('monthlyIncome') as string).replace(/[,$]/g, '')) || 0;\r\n        const monthlyHousing = parseFloat((formData.get('monthlyHousing') as string).replace(/[,$]/g, '')) || 0;\r\n        const monthlyExpenses = parseFloat((formData.get('monthlyExpenses') as string).replace(/[,$]/g, '')) || 0;\r\n        const totalSavings = parseFloat((formData.get('totalSavings') as string).replace(/[,$]/g, '')) || 0;\r\n        const totalDebt = parseFloat((formData.get('totalDebt') as string).replace(/[,$]/g, '')) || 0;\r\n        const creditScore = parseFloat((formData.get('creditScore') as string)) || 300; // Minimum valid credit score\r\n\r\n        // Validate that we have actual user data\r\n        if (monthlyIncome === 0) {\r\n            throw new Error('Monthly income is required and cannot be zero');\r\n        }\r\n\r\n        // Use only user-entered values for all fields\r\n        return {\r\n            personalInfo: {\r\n                age: 35,\r\n                maritalStatus: 'single',\r\n                dependents: 0,\r\n                state: 'CA',\r\n                employmentStatus: 'employed',\r\n                employmentTenure: 3,\r\n                healthStatus: 'good',\r\n                healthInsurance: true,\r\n                lifeInsurance: false,\r\n                shortTermDisability: false,\r\n                longTermDisability: false\r\n            },\r\n            income: {\r\n                primarySalary: monthlyIncome, // USER INPUT\r\n                secondaryIncome: 0,\r\n                businessIncome: 0,\r\n                investmentIncome: 0,\r\n                rentalIncome: 0,\r\n                benefitsIncome: 0,\r\n                otherIncome: 0,\r\n                incomeGrowthRate: 0.03,\r\n                incomeVariability: 'stable',\r\n                effectiveTaxRate: 0.22\r\n            },\r\n            expenses: {\r\n                housing: monthlyHousing, // USER INPUT\r\n                utilities: 0,\r\n                insurance: 0,\r\n                loanPayments: 0,\r\n                childcare: 0,\r\n                food: 0,\r\n                transportation: 0,\r\n                healthcare: 0,\r\n                clothing: 0,\r\n                personalCare: 0,\r\n                entertainment: 0,\r\n                diningOut: 0,\r\n                hobbies: 0,\r\n                subscriptions: 0,\r\n                shopping: 0,\r\n                travel: 0,\r\n                creditCardPayments: 0,\r\n                studentLoanPayments: 0,\r\n                otherDebtPayments: 0\r\n            },\r\n            assets: {\r\n                checking: totalSavings, // USER INPUT\r\n                savings: 0,\r\n                moneyMarket: 0,\r\n                emergencyFund: 0,\r\n                employer401k: 0,\r\n                traditionalIRA: 0,\r\n                rothIRA: 0,\r\n                brokerageAccounts: 0,\r\n                stocks: 0,\r\n                bonds: 0,\r\n                mutualFunds: 0,\r\n                primaryResidence: 0,\r\n                investmentProperties: 0,\r\n                cryptocurrency: 0,\r\n                preciousMetals: 0,\r\n                collectibles: 0,\r\n                businessEquity: 0,\r\n                otherAssets: 0\r\n            },\r\n            liabilities: {\r\n                mortgageBalance: 0,\r\n                homeEquityLoan: 0,\r\n                autoLoans: 0,\r\n                securedCreditLines: 0,\r\n                creditCardDebt: totalDebt, // USER INPUT\r\n                personalLoans: 0,\r\n                studentLoans: 0,\r\n                medicalDebt: 0,\r\n                businessLoans: 0,\r\n                businessCreditLines: 0,\r\n                taxDebt: 0,\r\n                legalJudgments: 0,\r\n                otherDebt: 0,\r\n                creditScore: creditScore, // USER INPUT\r\n                totalCreditLimit: 0\r\n            },\r\n            insurance: {\r\n                healthInsurance: true,\r\n                healthDeductible: 0,\r\n                healthOutOfPocketMax: 0,\r\n                lifeInsurance: false,\r\n                lifeCoverageAmount: 0,\r\n                shortTermDisability: false,\r\n                longTermDisability: false,\r\n                disabilityCoveragePercent: 0,\r\n                homeInsurance: false,\r\n                autoInsurance: false,\r\n                umbrellaPolicy: false,\r\n                insuranceConfidence: 'somewhat-confident'\r\n            },\r\n            goals: {\r\n                emergencyFundTarget: 0,\r\n                debtPayoffGoal: totalDebt > 0,\r\n                majorPurchaseAmount: 0,\r\n                homeDownPayment: 0,\r\n                educationFunding: 0,\r\n                careerChangeBuffer: 0,\r\n                retirementAge: 65,\r\n                retirementIncomeNeeded: 0,\r\n                legacyGoalAmount: 0,\r\n                retirementConfidence: 'somewhat-confident',\r\n                longTermGoalConfidence: 'somewhat-confident',\r\n                riskTolerance: 'moderate',\r\n                investmentExperience: 'intermediate'\r\n            },\r\n            behaviors: {\r\n                billPaymentReliability: creditScore > 750 ? 'always-on-time' : creditScore > 650 ? 'usually-on-time' : 'sometimes-late',\r\n                budgetingMethod: 'simple-tracking',\r\n                financialPlanningEngagement: 'occasionally-plan',\r\n                automaticSavings: totalSavings > monthlyIncome,\r\n                monthlyInvestmentContribution: 0,\r\n                emergencyFundPriority: totalSavings < (monthlyHousing + monthlyExpenses) * 3 ? 'high' : 'medium',\r\n                impulseSpendingFrequency: 'sometimes',\r\n                expenseTrackingMethod: 'casual'\r\n            }\r\n        };\r\n    }\r\n\r\n    private showValidationErrors(errors: string[]): void {\r\n        const errorContainer = this.container.querySelector('#validationErrors') as HTMLElement;\r\n        if (errorContainer) {\r\n            errorContainer.innerHTML = `\r\n                <div class=\"error-messages\">\r\n                    <h4>Please fix the following errors:</h4>\r\n                    <ul>\r\n                        ${errors.map(error => `<li>${error}</li>`).join('')}\r\n                    </ul>\r\n                </div>\r\n            `;\r\n            errorContainer.style.display = 'block';\r\n        }\r\n    }\r\n}","/**\r\n * Enhanced Results Display Component\r\n * Provides clear, actionable financial analysis results with explanations\r\n */\r\n\r\nimport { ComprehensiveAnalysisResult } from '../../interfaces/analysis-types';\r\n\r\nexport class EnhancedResultsDisplay {\r\n    private container: HTMLElement;\r\n\r\n    constructor(containerId: string) {\r\n        const element = document.getElementById(containerId);\r\n        if (!element) {\r\n            throw new Error(`Element with ID ${containerId} not found`);\r\n        }\r\n        this.container = element;\r\n    }\r\n\r\n    public render(analysisResult: ComprehensiveAnalysisResult): void {\r\n        // Defensive: Validate all numbers before display\r\n        if (!analysisResult || typeof analysisResult !== 'object') {\r\n            this.container.innerHTML = '<div class=\"error-message\">No analysis data available.</div>';\r\n            return;\r\n        }\r\n        this.container.innerHTML = '';\r\n        this.container.className = 'enhanced-results-display';\r\n        this.container.setAttribute('aria-label', 'Financial Health Analysis Results');\r\n        this.container.style.fontFamily = \"'Segoe UI', Arial, sans-serif\";\r\n        this.container.style.maxWidth = '700px';\r\n        this.container.style.margin = '0 auto';\r\n        this.container.style.padding = '16px';\r\n        this.container.style.background = '#fff';\r\n        this.container.style.borderRadius = '12px';\r\n        this.container.style.boxShadow = '0 2px 8px rgba(0,0,0,0.06)';\r\n        this.container.innerHTML = `\r\n          <section class=\"results-section\" aria-labelledby=\"score-heading\">\r\n            ${this.generateOverallScoreSection(analysisResult)}\r\n          </section>\r\n          <section class=\"results-section\" aria-labelledby=\"insights-heading\">\r\n            ${this.generateKeyInsightsSection(analysisResult)}\r\n          </section>\r\n          <section class=\"results-section\" aria-labelledby=\"action-plan-heading\">\r\n            ${this.generateActionPlanSection(analysisResult)}\r\n          </section>\r\n        `;\r\n        this.attachInteractiveElements();\r\n    }\r\n\r\n    private generateOverallScoreSection(analysisResult: ComprehensiveAnalysisResult): string {\r\n        // Defensive: Validate score\r\n        const score = typeof analysisResult.overallHealthScore === 'number' && !isNaN(analysisResult.overallHealthScore) ? analysisResult.overallHealthScore : 'N/A';\r\n        const level = analysisResult.healthLevel;\r\n        const peer = analysisResult.peerBenchmarks;\r\n        let scoreText = '';\r\n        switch (level) {\r\n            case 'excellent': scoreText = 'Excellent: You are in outstanding financial health.'; break;\r\n            case 'good': scoreText = 'Good: You are on track, with a few areas to optimize.'; break;\r\n            case 'fair': scoreText = 'Fair: There are some areas to improve.'; break;\r\n            case 'limited': scoreText = 'Limited: Take action to improve your financial health.'; break;\r\n            case 'critical': scoreText = 'Critical: Immediate action is needed.'; break;\r\n            default: scoreText = '';\r\n        }\r\n        return `\r\n          <div class=\"score-section\" style=\"text-align:center; margin-bottom:24px;\">\r\n            <h2 id=\"score-heading\" style=\"font-size:2rem; margin-bottom:8px;\">Financial Health Score</h2>\r\n            <div class=\"score-circle\" style=\"display:inline-block; width:100px; height:100px; border-radius:50%; background:${this.getScoreColor(level)}; color:#fff; font-size:2.2rem; line-height:100px; font-weight:bold;\">${score}</div>\r\n            <div style=\"margin-top:12px; font-size:1.1rem;\">${scoreText}</div>\r\n            <div style=\"margin-top:8px; color:#555; font-size:0.95rem;\">Score is a weighted average of 8 key indicators. <br>Peer comparison: Net worth percentile: ${peer?.netWorthPercentile ?? 'N/A'} | Savings rate percentile: ${peer?.savingsRatePercentile ?? 'N/A'} | Debt ratio percentile: ${peer?.debtRatioPercentile ?? 'N/A'}</div>\r\n          </div>\r\n        `;\r\n    }\r\n\r\n    private generateKeyInsightsSection(analysisResult: ComprehensiveAnalysisResult): string {\r\n        const km = analysisResult.keyMetrics;\r\n        // Savings Rate Breakdown\r\n        const savingsRateBreakdown = km.savingsRateBreakdown;\r\n        // Defensive: Validate all key metrics\r\n        // Pick 2-4 most important findings\r\n        const insights: Array<{icon:string, headline:string, value:string, explanation:string, positive:boolean, breakdown?:string, breakdownId?:string}> = [];\r\n        // Emergency Fund\r\n        if (typeof km.emergencyFundMonths === 'number') {\r\n            insights.push({\r\n                icon: km.emergencyFundMonths >= 3 ? '\\ud83d\\udcb0' : '\\u26a0\\ufe0f',\r\n                headline: 'Emergency Fund',\r\n                value: km.emergencyFundMonths === 0 ? 'No savings' : `${km.emergencyFundMonths.toFixed(1)} months`,\r\n                explanation: km.emergencyFundMonths >= 3 ? 'You have a solid emergency fund.' : 'Aim for 3-6 months of expenses saved.',\r\n                positive: km.emergencyFundMonths >= 3,\r\n                breakdown: `Liquid assets (checking, savings, money market, emergency fund) divided by total monthly expenses.`,\r\n                breakdownId: 'breakdown-emergency-fund'\r\n            });\r\n        }\r\n        // Debt-to-Income\r\n        if (typeof km.debtToIncomeRatio === 'number' && km.dtiBreakdown) {\r\n            insights.push({\r\n                icon: km.debtToIncomeRatio === 0 ? '\\u2705' : (km.debtToIncomeRatio <= 36 ? '\\ud83d\\udc4d' : '\\u26a0\\ufe0f'),\r\n                headline: 'Debt-to-Income',\r\n                value: `${km.debtToIncomeRatio.toFixed(1)}%`,\r\n                explanation: km.debtToIncomeRatio === 0 ? 'No debt: Great job!' : (km.debtToIncomeRatio <= 36 ? 'Your debt is in a healthy range.' : 'Try to keep debt below 36% of income.'),\r\n                positive: km.debtToIncomeRatio <= 36,\r\n                breakdown: `DTI = Total Debt ($${km.dtiBreakdown.totalDebt.toLocaleString()}) / Gross Monthly Income ($${km.dtiBreakdown.totalIncome.toLocaleString()}) × 100 = <strong>${km.dtiBreakdown.debtToIncomeRatio.toFixed(1)}%</strong>.<br>Industry standard: <a href='https://www.consumerfinance.gov/ask-cfpb/what-is-a-debt-to-income-ratio-en-1791/' target='_blank' rel='noopener'>CFPB</a>`,\r\n                breakdownId: 'breakdown-dti'\r\n            });\r\n        }\r\n        // Net Worth\r\n        if (typeof km.netWorth === 'number' && km.netWorthBreakdown) {\r\n            insights.push({\r\n                icon: km.netWorth > 0 ? '\\ud83d\\udcb8' : '\\u26a0\\ufe0f',\r\n                headline: 'Net Worth',\r\n                value: `$${km.netWorth.toLocaleString()}`,\r\n                explanation: km.netWorth > 0 ? 'Positive net worth: You own more than you owe.' : 'Negative net worth: Focus on reducing liabilities and building assets.',\r\n                positive: km.netWorth > 0,\r\n                breakdown: `Net Worth = Total Assets ($${km.netWorthBreakdown.totalAssets.toLocaleString()}) - Total Liabilities ($${km.netWorthBreakdown.totalLiabilities.toLocaleString()}) = <strong>$${km.netWorthBreakdown.netWorth.toLocaleString()}</strong>.<br>Industry standard: <a href='https://www.nerdwallet.com/article/finance/net-worth-calculator' target='_blank' rel='noopener'>NerdWallet</a>`,\r\n                breakdownId: 'breakdown-net-worth'\r\n            });\r\n        }\r\n        // Savings Rate\r\n        if (typeof km.savingsRate === 'number' && savingsRateBreakdown) {\r\n            insights.push({\r\n                icon: km.savingsRate >= 10 ? '💡' : '⚠️',\r\n                headline: 'Savings Rate',\r\n                value: `${km.savingsRate.toFixed(1)}%`,\r\n                explanation: km.savingsRate >= 10 ? 'Good savings rate.' : 'Aim to save at least 10% of income.',\r\n                positive: km.savingsRate >= 10,\r\n                breakdown: `Savings Rate = Savings ($${savingsRateBreakdown.savings.toLocaleString()}) / Total Income ($${savingsRateBreakdown.totalIncome.toLocaleString()}) × 100 = <strong>${savingsRateBreakdown.savingsRate.toFixed(1)}%</strong>.`,\r\n                breakdownId: 'breakdown-savings-rate'\r\n            });\r\n        }\r\n        return `\r\n        <div class=\"key-insights\" style=\"display:flex;flex-wrap:wrap;gap:1rem;justify-content:center;\">\r\n            ${insights.map((insight) => `\r\n                <div class=\"insight-card\" style=\"flex:1 1 220px;min-width:180px;max-width:260px;background:#fff;border-radius:12px;box-shadow:0 2px 8px rgba(0,0,0,0.06);padding:1rem;display:flex;flex-direction:column;align-items:center;position:relative;\">\r\n                    <span class=\"insight-icon\" aria-label=\"${insight.headline}\" style=\"font-size:2rem;\">${insight.icon}</span>\r\n                    <div class=\"insight-headline\" style=\"font-weight:600;font-size:1.1rem;margin-top:0.5rem;display:flex;align-items:center;gap:0.3rem;\">\r\n                        ${insight.headline}\r\n                        <button class=\"info-toggle\" aria-expanded=\"false\" aria-controls=\"${insight.breakdownId}\" tabindex=\"0\" title=\"How is this calculated?\" style=\"background:none;border:none;cursor:pointer;font-size:1.1rem;color:#2563eb;outline:none;\" data-breakdown-id=\"${insight.breakdownId}\">&#9432;</button>\r\n                    </div>\r\n                    <div class=\"insight-value\" style=\"font-size:1.3rem;font-weight:bold;margin:0.5rem 0;\">${insight.value}</div>\r\n                    <div class=\"insight-explanation\" style=\"font-size:0.98rem;color:${insight.positive ? '#10b981' : '#ef4444'};\">${insight.explanation}</div>\r\n                    <div class=\"insight-breakdown breakdown-collapsible\" id=\"${insight.breakdownId}\" style=\"display:none;margin-top:0.5rem;font-size:0.92rem;background:#f3f4f6;padding:0.7rem 0.8rem;border-radius:8px;\">${insight.breakdown || ''}</div>\r\n                </div>\r\n            `).join('')}\r\n        </div>\r\n        <style>\r\n        @media (max-width: 600px) {\r\n            .key-insights { flex-direction:column; align-items:stretch; }\r\n            .insight-card { min-width:unset; max-width:unset; width:100%; }\r\n        }\r\n        .info-toggle:focus { outline: 2px solid #2563eb; }\r\n        </style>\r\n        `;\r\n    }\r\n\r\n    private generateActionPlanSection(analysisResult: ComprehensiveAnalysisResult): string {\r\n        // Defensive: Only show actionable steps if present\r\n        const recs = analysisResult.prioritizedRecommendations || [];\r\n        if (!recs.length) {\r\n            return `<div class=\"action-plan-section\" aria-labelledby=\"action-plan-heading\" style=\"text-align:center; padding:24px 0;\">\r\n              <h2 id=\"action-plan-heading\" style=\"font-size:1.2rem; margin-bottom:8px;\">Personalized Action Plan</h2>\r\n              <div style=\"color:#10b981; font-size:1.1rem;\">You're on track! No urgent actions needed.</div>\r\n            </div>`;\r\n        }\r\n        return `<div class=\"action-plan-section\" aria-labelledby=\"action-plan-heading\">\r\n          <h2 id=\"action-plan-heading\" style=\"font-size:1.2rem; margin-bottom:8px;\">Personalized Action Plan</h2>\r\n          <ol class=\"action-plan-list\" style=\"list-style:none; padding:0; margin:0;\">\r\n            ${recs.map((rec, idx) => `\r\n              <li class=\"action-step-card\" style=\"margin-bottom:18px; background:#f3f4f6; border-radius:10px; padding:16px; display:flex; align-items:flex-start; gap:1rem;\">\r\n                <span class=\"step-icon\" aria-label=\"Step ${idx+1}\" style=\"font-size:1.5rem; color:#3b82f6; font-weight:bold;\">${idx+1}</span>\r\n                <div style=\"flex:1;\">\r\n                  <div style=\"font-weight:600; color:#2563eb; font-size:1.05rem;\">${rec.title}</div>\r\n                  <div style=\"font-size:0.98rem; color:#444; margin-bottom:4px;\">${rec.description}</div>\r\n                  <ul style=\"margin:0 0 0 16px; padding:0; color:#374151; font-size:0.97rem;\">\r\n                    ${rec.actionSteps.map(step => `<li style=\"margin-bottom:2px;\">${step}</li>`).join('')}\r\n                  </ul>\r\n                  <div style=\"font-size:0.9rem; color:#888; margin-top:4px;\">Timeframe: ${this.formatTimeframe(rec.timeframe)} | Impact: ${this.formatImpact(rec.impactLevel)}</div>\r\n                </div>\r\n              </li>\r\n            `).join('')}\r\n          </ol>\r\n        </div>`;\r\n    }\r\n\r\n    private attachInteractiveElements(): void {\r\n        // Add event listeners for info buttons to toggle breakdowns\r\n        const infoButtons = this.container.querySelectorAll('.info-toggle');\r\n        infoButtons.forEach(btn => {\r\n            btn.addEventListener('click', (e) => {\r\n                const breakdownId = (e.currentTarget as HTMLElement).getAttribute('data-breakdown-id');\r\n                if (!breakdownId) return;\r\n                const breakdown = this.container.querySelector(`#${breakdownId}`) as HTMLElement;\r\n                if (breakdown) {\r\n                    const expanded = breakdown.style.display === 'block';\r\n                    breakdown.style.display = expanded ? 'none' : 'block';\r\n                    (e.currentTarget as HTMLElement).setAttribute('aria-expanded', (!expanded).toString());\r\n                }\r\n            });\r\n            // Keyboard accessibility\r\n            btn.addEventListener('keydown', (e) => {\r\n                const ke = e as KeyboardEvent;\r\n                if (ke.key === 'Enter' || ke.key === ' ') {\r\n                    ke.preventDefault();\r\n                    (btn as HTMLElement).click();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private formatTimeframe(timeframe: string): string {\r\n        const timeframeMap: { [key: string]: string } = {\r\n            'immediate': 'This Week',\r\n            'short-term': '1-3 Months',\r\n            'medium-term': '3-12 Months',\r\n            'long-term': '1+ Years'\r\n        };\r\n        return timeframeMap[timeframe] || timeframe;\r\n    }\r\n\r\n    private formatImpact(impact: string): string {\r\n        const impactMap: { [key: string]: string } = {\r\n            'high': 'High',\r\n            'medium': 'Medium',\r\n            'low': 'Low'\r\n        };\r\n        return impactMap[impact] || impact;\r\n    }\r\n\r\n    private getScoreColor(level: string): string {\r\n        const colorMap: { [key: string]: string } = {\r\n            'excellent': '#10b981',\r\n            'good': '#3b82f6',\r\n            'fair': '#f59e0b',\r\n            'limited': '#ef4444',\r\n            'critical': '#ef4444'\r\n        };\r\n        return colorMap[level] || '#555';\r\n    }\r\n} ","/**\r\n * Improved Financial Health Analyzer Application\r\n * Addresses customer feedback:\r\n * 1. Analysis uses data provided correctly\r\n * 2. Results are clear and actionable\r\n * 3. Reduced input requirements with Quick Analysis option\r\n */\r\n\r\nimport { UserFinancialData } from './interfaces/core-types';\r\nimport { ComprehensiveAnalysisResult } from './interfaces/analysis-types';\r\nimport { FinancialCalculationEngine } from './core/calculations';\r\nimport { MultiStepForm } from './components/forms/MultiStepForm';\r\nimport { QuickAnalysisForm } from './components/forms/QuickAnalysisForm';\r\nimport { EnhancedResultsDisplay } from './components/ui/EnhancedResultsDisplay';\r\n\r\nexport class ImprovedFinancialHealthApp {\r\n    private currentAnalysisType: 'quick' | 'comprehensive' | null = null;\r\n    private multiStepForm?: MultiStepForm; // Used for comprehensive analysis\r\n    private quickForm?: QuickAnalysisForm;\r\n    private resultsDisplay?: EnhancedResultsDisplay;\r\n\r\n    // DOM Elements\r\n    private analysisChoiceContainer?: HTMLElement;\r\n    private formContainer?: HTMLElement;\r\n    private resultsContainer?: HTMLElement;\r\n\r\n    constructor() {\r\n        this.initializeDOMElements();\r\n        this.attachEventListeners();\r\n        this.showAnalysisChoice();\r\n    }\r\n\r\n    private initializeDOMElements(): void {\r\n        this.analysisChoiceContainer = document.getElementById('analysisChoiceContainer') || undefined;\r\n        this.formContainer = document.getElementById('formContainer') || undefined;\r\n        this.resultsContainer = document.getElementById('resultsContainer') || undefined;\r\n\r\n        if (!this.analysisChoiceContainer || !this.formContainer || !this.resultsContainer) {\r\n            throw new Error('Required DOM elements not found');\r\n        }\r\n    }\r\n\r\n    private attachEventListeners(): void {\r\n        // Analysis type choice buttons\r\n        const quickBtn = document.getElementById('chooseQuickAnalysis');\r\n        const comprehensiveBtn = document.getElementById('chooseComprehensiveAnalysis');\r\n\r\n        if (quickBtn) {\r\n            quickBtn.addEventListener('click', () => {\r\n                this.startQuickAnalysis();\r\n            });\r\n        }\r\n\r\n        if (comprehensiveBtn) {\r\n            comprehensiveBtn.addEventListener('click', () => {\r\n                this.startComprehensiveAnalysis();\r\n            });\r\n        }\r\n    }\r\n\r\n    private showAnalysisChoice(): void {\r\n        if (this.analysisChoiceContainer && this.formContainer && this.resultsContainer) {\r\n            this.analysisChoiceContainer.style.display = 'block';\r\n            this.formContainer.style.display = 'none';\r\n            this.resultsContainer.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    private startQuickAnalysis(): void {\r\n        this.currentAnalysisType = 'quick';\r\n        this.showFormContainer();\r\n\r\n        // Initialize Quick Analysis Form\r\n        if (this.formContainer) {\r\n            this.formContainer.innerHTML = '<div id=\"quickFormContainer\"></div>';\r\n            this.quickForm = new QuickAnalysisForm('quickFormContainer', (userData) => {\r\n                this.handleFormSubmission(userData);\r\n            });\r\n            this.quickForm.render();\r\n        }\r\n    }\r\n\r\n    private startComprehensiveAnalysis(): void {\r\n        this.currentAnalysisType = 'comprehensive';\r\n        this.showFormContainer();\r\n\r\n        // Initialize Multi-Step Form\r\n        if (this.formContainer) {\r\n            this.formContainer.innerHTML = '<div id=\"multiStepFormContainer\"></div>';\r\n            const container = document.getElementById('multiStepFormContainer');\r\n            if (container) {\r\n                this.multiStepForm = new MultiStepForm(container, {\r\n                    onComplete: (userData: UserFinancialData) => {\r\n                        this.handleFormSubmission(userData);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private showFormContainer(): void {\r\n        if (this.analysisChoiceContainer && this.formContainer && this.resultsContainer) {\r\n            this.analysisChoiceContainer.style.display = 'none';\r\n            this.formContainer.style.display = 'block';\r\n            this.resultsContainer.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    private async handleFormSubmission(userData: UserFinancialData): Promise<void> {\r\n        try {\r\n            this.showLoadingState();\r\n            \r\n            // Ensure we're using fresh data directly from the form\r\n            console.log('Processing user data:', userData);\r\n            \r\n            // Perform the financial analysis\r\n            const analysisResult = await this.performAnalysis(userData);\r\n            \r\n            // Display the results\r\n            this.displayResults(analysisResult);\r\n            \r\n        } catch (error) {\r\n            console.error('Analysis failed:', error);\r\n            this.showError('Analysis failed. Please try again.');\r\n        }\r\n    }\r\n\r\n    private showLoadingState(): void {\r\n        if (this.formContainer && this.resultsContainer) {\r\n            this.formContainer.style.display = 'none';\r\n            this.resultsContainer.style.display = 'block';\r\n            \r\n            // Show loading indicator\r\n            const loadingIndicator = document.getElementById('loadingIndicator');\r\n            const analysisResults = document.getElementById('analysisResults');\r\n            \r\n            if (loadingIndicator && analysisResults) {\r\n                loadingIndicator.style.display = 'block';\r\n                analysisResults.style.display = 'none';\r\n            }\r\n        }\r\n    }\r\n\r\n    private async performAnalysis(userData: UserFinancialData): Promise<ComprehensiveAnalysisResult> {\r\n        // Simulate processing delay for better UX\r\n        await new Promise(resolve => setTimeout(resolve, 1500));\r\n        \r\n        // Use the FinancialCalculationEngine to perform the analysis\r\n        return FinancialCalculationEngine.analyzeFinancialHealth(userData);\r\n    }\r\n\r\n    private displayResults(analysisResult: ComprehensiveAnalysisResult): void {\r\n        // Hide loading indicator\r\n        const loadingIndicator = document.getElementById('loadingIndicator');\r\n        const analysisResults = document.getElementById('analysisResults');\r\n        \r\n        if (loadingIndicator && analysisResults) {\r\n            loadingIndicator.style.display = 'none';\r\n            analysisResults.style.display = 'block';\r\n        }\r\n\r\n        // Initialize enhanced results display\r\n        if (this.resultsContainer) {\r\n            // Clear existing results and create enhanced display container\r\n            const existingResults = document.getElementById('analysisResults');\r\n            if (existingResults) {\r\n                existingResults.innerHTML = '<div id=\"enhancedResults\"></div>';\r\n                \r\n                this.resultsDisplay = new EnhancedResultsDisplay('enhancedResults');\r\n                this.resultsDisplay.render(analysisResult);\r\n            }\r\n        }\r\n\r\n        // Add navigation options\r\n        this.addResultsNavigation();\r\n    }\r\n\r\n    private addResultsNavigation(): void {\r\n        const resultsContainer = document.getElementById('enhancedResults');\r\n        if (resultsContainer) {\r\n            const navigationHTML = `\r\n                <div class=\"results-navigation\">\r\n                    <div class=\"nav-actions\">\r\n                        <button class=\"btn btn-outline\" id=\"startNewAnalysis\">\r\n                            📊 Start New Analysis\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"analysis-info\">\r\n                        <p class=\"analysis-type\">\r\n                            Analysis Type: <strong>${this.currentAnalysisType === 'quick' ? 'Quick Analysis' : 'Comprehensive Analysis'}</strong>\r\n                        </p>\r\n                        <p class=\"analysis-date\">\r\n                            Generated: <strong>${new Date().toLocaleDateString()}</strong>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            resultsContainer.insertAdjacentHTML('beforeend', navigationHTML);\r\n            const startNewBtn = document.getElementById('startNewAnalysis');\r\n            if (startNewBtn) {\r\n                startNewBtn.addEventListener('click', () => {\r\n                    this.resetApplication();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private resetApplication(): void {\r\n        this.currentAnalysisType = null;\r\n        \r\n        // Reset form instances\r\n        if (this.multiStepForm) {\r\n            this.multiStepForm = undefined;\r\n        }\r\n        if (this.quickForm) {\r\n            this.quickForm = undefined;\r\n        }\r\n        if (this.resultsDisplay) {\r\n            this.resultsDisplay = undefined;\r\n        }\r\n        \r\n        this.showAnalysisChoice();\r\n    }\r\n\r\n    private showError(message: string): void {\r\n        // Show error message to user\r\n        const errorContainer = document.createElement('div');\r\n        errorContainer.className = 'error-toast';\r\n        errorContainer.innerHTML = `\r\n            <div class=\"toast-content\">\r\n                <span class=\"toast-icon\">❌</span>\r\n                <span class=\"toast-message\">${message}</span>\r\n            </div>\r\n        `;\r\n        \r\n        document.body.appendChild(errorContainer);\r\n        \r\n        // Remove after 5 seconds\r\n        setTimeout(() => {\r\n            if (errorContainer.parentNode) {\r\n                errorContainer.parentNode.removeChild(errorContainer);\r\n            }\r\n        }, 5000);\r\n    }\r\n}\r\n\r\n// Initialize the application when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    new ImprovedFinancialHealthApp();\r\n}); "],"names":["formatCurrency","amount","isNaN","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","Math","round","RecommendationEngine","generateRecommendations","analysis","data","recommendations","healthIndicators","keyMetrics","push","this","getEmergencyFundRecommendations","getHighDebtRecommendations","getNegativeCashFlowRecommendations","getSavingsRateRecommendations","getInsuranceRecommendations","getCreditScoreOptimizationRecommendations","liabilities","creditScore","getInvestmentRecommendations","getBudgetingRecommendations","getAutomatedSavingsRecommendations","forEach","indicator","getGenericIndicatorRecommendations","sort","a","b","priorityOrder","high","medium","low","priority","Array","from","Map","map","r","id","values","slice","emergencyFundMonths","totalLiquidAssets","totalMonthlyExpenses","expenses","housing","food","transportation","utilities","targetFund","category","title","description","actionSteps","timeframe","impactLevel","amountNeeded","toFixed","_data","debtToIncomeRatio","creditUtilization","monthlyCashFlow","abs","savingsRate","insurance","insuranceConfidence","behaviors","monthlyInvestmentContribution","budgetingMethod","automaticSavings","status","name","toLowerCase","replace","FinancialCalculationEngine","analyzeFinancialHealth","validateUserData","calculateKeyMetrics","calculateHealthIndicators","overallHealthScore","calculateOverallHealthScore","result","healthLevel","getHealthLevel","liquidityAnalysis","analyzeLiquidity","debtAnalysis","analyzeDebt","investmentAnalysis","analyzeInvestments","insuranceAnalysis","analyzeInsurance","wealthProjections","projectWealth","scenarioAnalysis","analyzeScenarios","prioritizedRecommendations","peerBenchmarks","calculatePeerBenchmarks","detailedInsights","generateDetailedInsights","financialRatios","calculateFinancialRatios","riskAssessment","assessFinancialRisk","goalAnalysis","analyzeFinancialGoals","totalIncome","getTotalMonthlyIncome","income","totalExpenses","getTotalMonthlyExpenses","totalAssets","getTotalAssets","assets","totalLiabilities","getTotalLiabilities","netWorth","checking","savings","moneyMarket","emergencyFund","totalDebt","getTotalDebt","netWorthBreakdown","dtiBreakdown","totalCreditLimit","creditCardDebt","liquidityRatio","assetAllocationScore","calculateAssetAllocationScore","analyzeSpendingVsIncome","analyzeBillPaymentReliability","analyzeEmergencySavings","analyzeDebtManagement","analyzeCreditHealth","analyzeInsuranceConfidence","analyzeLongTermGoalConfidence","analyzeFinancialPlanningEngagement","cashFlowRatio","score","weight","metrics","value","numericValue","benchmark","improvement","undefined","getSpendingRecommendations","explanation","reliability","billPaymentReliability","formatReliabilityText","toString","getCreditScoreStatus","getPaymentReliabilityRecommendations","totalMonthlyIncome","totalMonthlyDebt","getDebtManagementRecommendations","max","primarySalary","secondaryIncome","businessIncome","investmentIncome","rentalIncome","benefitsIncome","otherIncome","loanPayments","childcare","healthcare","clothing","personalCare","entertainment","diningOut","hobbies","subscriptions","shopping","travel","creditCardPayments","studentLoanPayments","otherDebtPayments","employer401k","traditionalIRA","rothIRA","brokerageAccounts","stocks","bonds","mutualFunds","primaryResidence","investmentProperties","cryptocurrency","preciousMetals","collectibles","businessEquity","otherAssets","reduce","sum","key","Number","indicators","totalWeightedScore","totalWeight","getCreditUtilizationStatus","getCreditHealthRecommendations","hasHealthInsurance","healthInsurance","hasLifeInsurance","lifeInsurance","hasDisabilityInsurance","shortTermDisability","longTermDisability","confidence","insuranceCount","formatConfidenceText","retirementConfidence","goals","hasRetirementSavings","monthlyInvestment","getRetirementRecommendations","budgeting","planning","financialPlanningEngagement","budgetScore","planningScore","formatBudgetText","formatPlanningText","getPlanningRecommendations","totalInvestments","investmentRatio","targetStockAllocation","personalInfo","age","allocationScore","_keyMetrics","monthlyExpenses","monthlyIncome","investmentRate","dependents","coverageScore","currentAge","yearsToRetirement","retirementAge","currentInvestments","projections","rate","scenario","monthlyRate","months","totalProjected","pow","projectedValue","monthlyContribution","assumptions","toLocaleString","impact","timeToRecover","probability","_healthIndicators","investments","debtStructure","mortgageBalance","homeEquityLoan","autoLoans","securedCreditLines","personalLoans","studentLoans","medicalDebt","businessLoans","businessCreditLines","taxDebt","legalJudgments","otherDebt","expenseCategories","investmentBreakdown","insuranceAdequacy","liquidityRatios","currentRatio","quickRatio","emergencyFundRatio","leverageRatios","debtToAssetRatio","equityRatio","efficiencyRatios","expenseRatio","risks","level","mitigation","overallRiskLevel","riskFactors","retirementReadiness","currentSavings","calculateRetirementProjection","onTrack","isRetirementOnTrack","emergencyGoal","target","current","progress","timeToGoal","calculateTimeToEmergencyGoal","retirementIncomeNeeded","needed","ceil","ageGroup","floor","incomeGroup","netWorthPercentile","savingsRatePercentile","debtRatioPercentile","ratio","utilization","length","l","toUpperCase","budget","console","log","cashFlow","Error","MultiStepForm","constructor","container","callbacks","currentStepIndex","formData","steps","onDataChange","onComplete","initializeSteps","initializeFormData","render","fields","type","label","required","validation","min","options","isComplete","validationErrors","step","maritalStatus","state","employmentStatus","employmentTenure","healthStatus","incomeGrowthRate","incomeVariability","effectiveTaxRate","healthDeductible","healthOutOfPocketMax","lifeCoverageAmount","disabilityCoveragePercent","homeInsurance","autoInsurance","umbrellaPolicy","emergencyFundTarget","debtPayoffGoal","majorPurchaseAmount","homeDownPayment","educationFunding","careerChangeBuffer","legacyGoalAmount","longTermGoalConfidence","riskTolerance","investmentExperience","emergencyFundPriority","impulseSpendingFrequency","expenseTrackingMethod","innerHTML","renderCurrentStep","attachEventListeners","field","renderField","join","getFieldValue","option","fieldId","prevBtn","querySelector","nextBtn","addEventListener","previousStep","nextStep","querySelectorAll","input","e","handleFieldChange","event","parseFloat","find","f","updateFormData","validateCurrentStep","currentStep","errors","numValue","completeForm","showValidationErrors","alert","userData","buildCompleteUserData","getCurrentData","QuickAnalysisForm","containerId","onSubmit","element","document","getElementById","generateHTML","form","preventDefault","handleSubmit","handleInputChange","dataset","formatCurrencyInput","validateField","attachTooltips","_input","updateRealTimeCalculations","updateProgress","updateSubmitButton","getNumericValue","debt","emergencyMonths","textContent","className","debtRatioElement","debtRatio","fieldName","inputs","completedFields","trim","progressFill","progressText","width","button","allValid","htmlInput","checkValidity","disabled","classList","toggle","fieldContainer","closest","feedback","isValid","message","display","icon","tooltipText","tooltip","showTooltip","hideTooltip","text","createElement","body","appendChild","rect","getBoundingClientRect","top","window","scrollY","left","transform","remove","FormData","btnText","btnLoader","contains","resetSubmitButton","errorContainer","buildUserDataFromForm","monthlyHousing","totalSavings","get","error","EnhancedResultsDisplay","analysisResult","setAttribute","fontFamily","maxWidth","margin","padding","background","borderRadius","boxShadow","generateOverallScoreSection","generateKeyInsightsSection","generateActionPlanSection","attachInteractiveElements","peer","scoreText","getScoreColor","km","savingsRateBreakdown","insights","headline","positive","breakdown","breakdownId","insight","recs","rec","idx","formatTimeframe","formatImpact","btn","currentTarget","getAttribute","expanded","ke","click","ImprovedFinancialHealthApp","currentAnalysisType","initializeDOMElements","showAnalysisChoice","analysisChoiceContainer","formContainer","resultsContainer","quickBtn","comprehensiveBtn","startQuickAnalysis","startComprehensiveAnalysis","showFormContainer","quickForm","handleFormSubmission","multiStepForm","showLoadingState","performAnalysis","displayResults","showError","loadingIndicator","analysisResults","Promise","resolve","setTimeout","existingResults","resultsDisplay","addResultsNavigation","navigationHTML","Date","toLocaleDateString","insertAdjacentHTML","startNewBtn","resetApplication","parentNode","removeChild"],"sourceRoot":""}