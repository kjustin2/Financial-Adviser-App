{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://financial-adviser-app/./src/utils/format-utils.ts","webpack://financial-adviser-app/./src/core/RecommendationEngine.ts","webpack://financial-adviser-app/./src/core/calculations.ts","webpack://financial-adviser-app/./src/components/forms/MultiStepForm.ts","webpack://financial-adviser-app/./src/components/forms/QuickAnalysisForm.ts","webpack://financial-adviser-app/./src/constants/financial-constants.ts","webpack://financial-adviser-app/./src/components/ui/EnhancedResultsDisplay.ts","webpack://financial-adviser-app/./src/ImprovedApp.ts"],"sourcesContent":["/**\r\n * Utility functions for formatting data for display.\r\n */\r\n\r\n/**\r\n * Formats a number as a US currency string.\r\n * @param amount The number to format.\r\n * @returns A string formatted as currency (e.g., \"$1,234.56\").\r\n */\r\nexport function formatCurrency(amount: number): string {\r\n    return new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 0,\r\n    }).format(Math.round(amount));\r\n} ","import { ComprehensiveAnalysisResult, HealthIndicator, Recommendation } from '../interfaces/analysis-types';\r\nimport { UserFinancialData } from '../interfaces/core-types';\r\nimport { formatCurrency } from '../utils/format-utils';\r\n\r\n/**\r\n * Generates actionable, prioritized recommendations based on the financial analysis.\r\n */\r\nexport class RecommendationEngine {\r\n\r\n    /**\r\n     * Main function to generate all recommendations.\r\n     * @param analysis - The full comprehensive analysis result.\r\n     * @param data - The original user financial data.\r\n     * @returns A sorted and deduplicated array of Recommendation objects.\r\n     */\r\n    public static generateRecommendations(analysis: ComprehensiveAnalysisResult, data: UserFinancialData): Recommendation[] {\r\n        let recommendations: Recommendation[] = [];\r\n        const { healthIndicators, keyMetrics } = analysis;\r\n\r\n        // --- HIGH PRIORITY: Critical Issues & Risks ---\r\n        recommendations.push(...this.getEmergencyFundRecommendations(keyMetrics, data));\r\n        recommendations.push(...this.getHighDebtRecommendations(keyMetrics, data));\r\n        recommendations.push(...this.getNegativeCashFlowRecommendations(keyMetrics));\r\n\r\n        // --- MEDIUM PRIORITY: Opportunities & Important Improvements ---\r\n        recommendations.push(...this.getSavingsRateRecommendations(keyMetrics));\r\n        recommendations.push(...this.getInsuranceRecommendations(data));\r\n        recommendations.push(...this.getCreditScoreOptimizationRecommendations(data.liabilities.creditScore));\r\n        recommendations.push(...this.getInvestmentRecommendations(data, keyMetrics));\r\n\r\n        // --- LOW PRIORITY: Fine-Tuning & Best Practices ---\r\n        recommendations.push(...this.getBudgetingRecommendations(data));\r\n        recommendations.push(...this.getAutomatedSavingsRecommendations(data));\r\n        \r\n        // Add recommendations based on overall indicator status (as a fallback)\r\n        healthIndicators.forEach(indicator => {\r\n            recommendations.push(...this.getGenericIndicatorRecommendations(indicator));\r\n        });\r\n\r\n        // Sort recommendations by priority: high -> medium -> low\r\n        recommendations.sort((a, b) => {\r\n            const priorityOrder = { high: 0, medium: 1, low: 2 };\r\n            return priorityOrder[a.priority] - priorityOrder[b.priority];\r\n        });\r\n\r\n        // Deduplicate and return the top recommendations\r\n        const uniqueRecommendations = Array.from(new Map(recommendations.map(r => [r.id, r])).values());\r\n        return uniqueRecommendations.slice(0, 10); // Return up to 10\r\n    }\r\n    \r\n    // ===================================================================\r\n    // HIGH PRIORITY RECOMMENDATION LOGIC\r\n    // ===================================================================\r\n\r\n    private static getEmergencyFundRecommendations(keyMetrics: any, data: UserFinancialData): Recommendation[] {\r\n        const recommendations: Recommendation[] = [];\r\n        const { emergencyFundMonths, totalLiquidAssets } = keyMetrics;\r\n        const totalMonthlyExpenses = data.expenses.housing + data.expenses.food + data.expenses.transportation + data.expenses.utilities; // Simplified for quick analysis\r\n        \r\n        if (totalMonthlyExpenses <= 0) return []; // Cannot calculate if expenses are zero\r\n\r\n        const targetFund = totalMonthlyExpenses * 3; // Target 3 months for high priority\r\n\r\n        if (emergencyFundMonths < 1) {\r\n            recommendations.push({\r\n                id: 'emergency-fund-critical',\r\n                category: 'savings',\r\n                priority: 'high',\r\n                title: 'Critically Low Emergency Fund',\r\n                description: `You have less than one month of expenses saved (${formatCurrency(totalLiquidAssets)}). This puts you at high risk for financial hardship if you face an unexpected event. Building a safety net should be your top priority.`,\r\n                actionSteps: [\r\n                    `Immediately open or fund a dedicated high-yield savings account.`,\r\n                    `Set a goal to save at least one full month of expenses (${formatCurrency(totalMonthlyExpenses)}) as quickly as possible.`,\r\n                    `Pause all non-essential spending and investments until this initial goal is met.`\r\n                ],\r\n                timeframe: 'next-30-days',\r\n                impactLevel: 'high'\r\n            });\r\n        } else if (emergencyFundMonths < 3) {\r\n            const amountNeeded = targetFund - totalLiquidAssets;\r\n            recommendations.push({\r\n                id: 'emergency-fund-low',\r\n                category: 'savings',\r\n                priority: 'high',\r\n                title: 'Build Your 3-Month Emergency Fund',\r\n                description: `You currently have ${emergencyFundMonths.toFixed(1)} months of expenses saved. While this is a good start, aiming for at least 3 months provides a much stronger safety net. You need to save approximately ${formatCurrency(amountNeeded)} more to reach this goal.`,\r\n                actionSteps: [\r\n                    `Calculate your exact total monthly expenses to confirm your target of ${formatCurrency(targetFund)}.`,\r\n                    `Set up an automatic recurring transfer to your savings account each payday.`,\r\n                    `Look for opportunities to reduce spending (e.g., dining out, subscriptions) and redirect that money to savings.`\r\n                ],\r\n                timeframe: '1-3-months',\r\n                impactLevel: 'high'\r\n            });\r\n        }\r\n        return recommendations;\r\n    }\r\n\r\n    private static getHighDebtRecommendations(keyMetrics: any, _data: UserFinancialData): Recommendation[] {\r\n        const recommendations: Recommendation[] = [];\r\n        const { debtToIncomeRatio, creditUtilization } = keyMetrics;\r\n\r\n        if (debtToIncomeRatio > 43) {\r\n             recommendations.push({\r\n                id: 'dti-ratio-high',\r\n                category: 'debt',\r\n                priority: 'high',\r\n                title: 'Aggressively Pay Down High-Interest Debt',\r\n                description: `Your debt-to-income (DTI) ratio is ${debtToIncomeRatio.toFixed(1)}%, which is considered high and may impact your ability to borrow in the future. Creating a focused debt-repayment plan is essential.`,\r\n                actionSteps: [\r\n                    `List all your debts from highest interest rate to lowest (this is the \"Avalanche\" method).`,\r\n                    `Make minimum payments on all debts, but put every extra dollar towards the debt with the highest interest rate.`,\r\n                    `Consider a debt consolidation loan or balance transfer card to lower your interest rates, but be mindful of fees.`\r\n                ],\r\n                timeframe: '3-6-months',\r\n                impactLevel: 'high'\r\n            });\r\n        }\r\n        \r\n        if (creditUtilization > 50) {\r\n             recommendations.push({\r\n                id: 'credit-utilization-high',\r\n                category: 'debt',\r\n                priority: 'high',\r\n                title: 'Lower Your Credit Utilization',\r\n                description: `Your credit utilization is ${creditUtilization.toFixed(1)}%, which is significantly impacting your credit score. Lowering this is one of the fastest ways to improve your financial health.`,\r\n                actionSteps: [\r\n                    `Make paying down your credit card balances your top priority.`,\r\n                    `If possible, make multiple small payments throughout the month instead of one large one.`,\r\n                    `Consider asking for a credit limit increase on your existing cards (if you can trust yourself not to spend more).`\r\n                ],\r\n                timeframe: '1-3-months',\r\n                impactLevel: 'high'\r\n            });\r\n        }\r\n        return recommendations;\r\n    }\r\n    \r\n    private static getNegativeCashFlowRecommendations(keyMetrics: any): Recommendation[] {\r\n        if (keyMetrics.monthlyCashFlow < 0) {\r\n            return [{\r\n                id: 'negative-cash-flow',\r\n                category: 'spending',\r\n                priority: 'high',\r\n                title: 'Address Negative Monthly Cash Flow',\r\n                description: `You are spending ${formatCurrency(Math.abs(keyMetrics.monthlyCashFlow))} more than you earn each month. This is unsustainable and requires immediate attention to create a budget and cut expenses.`,\r\n                actionSteps: [\r\n                    `Track every dollar you spend for the next 30 days using an app or spreadsheet.`,\r\n                    `Identify 3-5 non-essential spending categories where you can cut back immediately (e.g., dining out, subscriptions, shopping).`,\r\n                    `Build a detailed monthly budget based on your findings and stick to it.`\r\n                ],\r\n                timeframe: 'next-30-days',\r\n                impactLevel: 'high'\r\n            }];\r\n        }\r\n        return [];\r\n    }\r\n    \r\n    // ===================================================================\r\n    // MEDIUM PRIORITY RECOMMENDATION LOGIC\r\n    // ===================================================================\r\n\r\n    private static getSavingsRateRecommendations(keyMetrics: any): Recommendation[] {\r\n        const { savingsRate } = keyMetrics;\r\n        if (savingsRate >= 0 && savingsRate < 10) {\r\n            return [{\r\n                id: 'increase-savings-rate',\r\n                category: 'savings',\r\n                priority: 'medium',\r\n                title: 'Increase Your Savings Rate',\r\n                description: `Your current savings rate is ${savingsRate.toFixed(1)}%. While any saving is good, a healthy target is between 10-20% of your income. A higher rate will accelerate your progress towards your financial goals.`,\r\n                actionSteps: [\r\n                    `Try to increase your savings rate by 1% each month.`,\r\n                    `Allocate any future pay raises or bonuses directly to savings or investments.`,\r\n                    `Review your budget for small, recurring expenses that can be cut and redirected to savings.`\r\n                ],\r\n                timeframe: 'ongoing',\r\n                impactLevel: 'medium'\r\n            }];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private static getInsuranceRecommendations(data: UserFinancialData): Recommendation[] {\r\n        if (data.insurance.insuranceConfidence !== 'very-confident') {\r\n            return [{\r\n                id: 'review-insurance-coverage',\r\n                category: 'risk',\r\n                priority: 'medium',\r\n                title: 'Review Your Insurance Coverage',\r\n                description: `You indicated you are not 'very confident' in your insurance coverage. Having the right insurance is crucial for protecting your financial well-being from unexpected events.`,\r\n                actionSteps: [\r\n                    `Schedule a free review with your current insurance agent(s) to discuss your life, disability, home/auto policies.`,\r\n                    `Assess your life insurance needs. A common rule of thumb is 10-12 times your annual income.`,\r\n                    `Ensure you have long-term disability insurance that covers at least 60% of your income.`\r\n                ],\r\n                timeframe: 'next-3-months',\r\n                impactLevel: 'high'\r\n            }];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private static getCreditScoreOptimizationRecommendations(creditScore: number): Recommendation[] {\r\n        if (creditScore > 740) {\r\n            return [{\r\n                id: 'leverage-excellent-credit',\r\n                category: 'credit',\r\n                priority: 'medium',\r\n                title: 'Leverage Your Excellent Credit Score',\r\n                description: `Your credit score of ${creditScore} is excellent! This is a powerful financial tool you can use to your advantage.`,\r\n                actionSteps: [\r\n                    `Consider refinancing any existing loans (mortgage, auto, student) to secure a lower interest rate.`,\r\n                    `Explore premium travel or cashback credit cards that offer significant rewards and benefits.`,\r\n                    `Continue your great habits: always pay your bills on time and keep credit utilization low.`\r\n                ],\r\n                timeframe: 'ongoing',\r\n                impactLevel: 'medium'\r\n            }];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private static getInvestmentRecommendations(data: UserFinancialData, keyMetrics: any): Recommendation[] {\r\n        if (keyMetrics.emergencyFundMonths >= 4 && data.behaviors.monthlyInvestmentContribution === 0) {\r\n             return [{\r\n                id: 'start-investing',\r\n                category: 'investment',\r\n                priority: 'medium',\r\n                title: 'Start Investing for the Future',\r\n                description: `You have a solid emergency fund, which is a great foundation. Now is the perfect time to start investing to grow your wealth for long-term goals like retirement.`,\r\n                actionSteps: [\r\n                    `If your employer offers a 401(k) match, contribute at least enough to get the full match. It's free money!`,\r\n                    `Open a Roth IRA, which offers tax-free growth and withdrawals in retirement.`,\r\n                    `Start with a simple, low-cost target-date index fund or a broad market ETF.`\r\n                ],\r\n                timeframe: 'next-3-months',\r\n                impactLevel: 'high'\r\n            }];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    // ===================================================================\r\n    // LOW PRIORITY RECOMMENDATION LOGIC\r\n    // ===================================================================\r\n\r\n    private static getBudgetingRecommendations(data: UserFinancialData): Recommendation[] {\r\n        if (data.behaviors.budgetingMethod === 'no-budget' || data.behaviors.budgetingMethod === 'simple-tracking') {\r\n             return [{\r\n                id: 'create-a-budget',\r\n                category: 'spending',\r\n                priority: 'low',\r\n                title: 'Adopt a Formal Budgeting Method',\r\n                description: `You've indicated you don't follow a formal budget. A budget is a powerful tool for telling your money where to go, instead of wondering where it went.`,\r\n                actionSteps: [\r\n                    `Try the 50/30/20 rule as a starting point: 50% of income for needs, 30% for wants, and 20% for savings.`,\r\n                    `Use a budgeting app (like YNAB or Mint) or a simple spreadsheet to track your spending against your plan.`,\r\n                    `Review your budget monthly and make adjustments as needed.`\r\n                ],\r\n                timeframe: 'next-month',\r\n                impactLevel: 'medium'\r\n            }];\r\n        }\r\n        return [];\r\n    }\r\n    \r\n    private static getAutomatedSavingsRecommendations(data: UserFinancialData): Recommendation[] {\r\n        if (!data.behaviors.automaticSavings) {\r\n            return [{\r\n                id: 'automate-your-savings',\r\n                category: 'savings',\r\n                priority: 'low',\r\n                title: 'Automate Your Savings and Investments',\r\n                description: `You're not currently automating your savings. Paying yourself first by automating transfers is the easiest and most effective way to build wealth consistently.`,\r\n                actionSteps: [\r\n                    `Set up an automatic recurring transfer from your checking to your savings account for the day after you get paid.`,\r\n                    `Set up automatic contributions to your 401(k), IRA, or other investment accounts.`,\r\n                    `Start small if you need to, even $25 a week, and increase the amount every few months.`\r\n                ],\r\n                timeframe: 'next-paycheck',\r\n                impactLevel: 'high'\r\n            }];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    // ===================================================================\r\n    // GENERIC FALLBACK LOGIC\r\n    // ===================================================================\r\n\r\n    private static getGenericIndicatorRecommendations(indicator: HealthIndicator): Recommendation[] {\r\n        if (indicator.status === 'critical' || indicator.status === 'poor') {\r\n            return [{\r\n                id: `improve-${indicator.name.toLowerCase().replace(/ /g, '-')}`,\r\n                category: 'planning', // Generic category\r\n                priority: 'high',\r\n                title: `Focus on Improving ${indicator.name}`,\r\n                description: `Your score for ${indicator.name} is low. Taking steps to improve this area can have a significant impact on your overall financial health.`,\r\n                actionSteps: [\r\n                    `Review the detailed metrics for the ${indicator.name} indicator to understand the key drivers.`,\r\n                    \"Read educational content about this topic to build your knowledge.\",\r\n                    \"Create a small, achievable goal to start building momentum.\"\r\n                ],\r\n                timeframe: 'immediate',\r\n                impactLevel: 'high'\r\n            }];\r\n        } else if (indicator.status === 'fair') {\r\n             return [{\r\n                id: `optimize-${indicator.name.toLowerCase().replace(/ /g, '-')}`,\r\n                category: 'planning',\r\n                priority: 'low',\r\n                title: `Optimize Your ${indicator.name}`,\r\n                description: `Your score for ${indicator.name} is fair. This is a good foundation, but there are opportunities to make this area even stronger.`,\r\n                actionSteps: [\r\n                    `Compare your metrics for ${indicator.name} to industry benchmarks and best practices.`,\r\n                    `Identify one specific action you can take in the next month to improve your score.`,\r\n                    `Re-evaluate in 3 months to track your progress.`\r\n                ],\r\n                timeframe: 'next-3-months',\r\n                impactLevel: 'medium'\r\n            }];\r\n        }\r\n        \r\n        return [];\r\n    }\r\n} ","/**\r\n * Comprehensive Financial Health Calculation Engine\r\n * Based on Financial Health Network 2024 research and industry best practices\r\n */\r\n\r\nimport { UserFinancialData } from '../interfaces/core-types';\r\nimport { \r\n    HealthIndicator, \r\n    FinancialMetric, \r\n    ComprehensiveAnalysisResult,\r\n    WealthProjection,\r\n    ScenarioAnalysis\r\n} from '../interfaces/analysis-types';\r\nimport { RecommendationEngine } from './RecommendationEngine';\r\n\r\nexport class FinancialCalculationEngine {\r\n    \r\n    /**\r\n     * Perform comprehensive financial health analysis\r\n     */\r\n    public static analyzeFinancialHealth(data: UserFinancialData): ComprehensiveAnalysisResult {\r\n        // Validate that we're using real user data, not defaults\r\n        this.validateUserData(data);\r\n        const keyMetrics = this.calculateKeyMetrics(data);\r\n        const healthIndicators = this.calculateHealthIndicators(data, keyMetrics);\r\n        const overallHealthScore = this.calculateOverallHealthScore(healthIndicators);\r\n        \r\n        const result: ComprehensiveAnalysisResult = {\r\n            overallHealthScore,\r\n            healthLevel: this.getHealthLevel(overallHealthScore),\r\n            healthIndicators,\r\n            keyMetrics,\r\n            liquidityAnalysis: this.analyzeLiquidity(data, keyMetrics),\r\n            debtAnalysis: this.analyzeDebt(data, keyMetrics),\r\n            investmentAnalysis: this.analyzeInvestments(data, keyMetrics),\r\n            insuranceAnalysis: this.analyzeInsurance(data),\r\n            wealthProjections: this.projectWealth(data, keyMetrics),\r\n            scenarioAnalysis: this.analyzeScenarios(data, keyMetrics),\r\n            prioritizedRecommendations: [], // Will be populated next\r\n            peerBenchmarks: this.calculatePeerBenchmarks(data),\r\n            detailedInsights: this.generateDetailedInsights(data, keyMetrics, healthIndicators),\r\n            financialRatios: this.calculateFinancialRatios(data, keyMetrics),\r\n            riskAssessment: this.assessFinancialRisk(data, keyMetrics),\r\n            goalAnalysis: this.analyzeFinancialGoals(data, keyMetrics)\r\n        };\r\n\r\n        result.prioritizedRecommendations = RecommendationEngine.generateRecommendations(result, data);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Calculate key financial metrics\r\n     */\r\n    private static calculateKeyMetrics(data: UserFinancialData) {\r\n        const totalIncome = this.getTotalMonthlyIncome(data.income);\r\n        const totalExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const monthlyCashFlow = totalIncome - totalExpenses;\r\n        \r\n        const totalAssets = this.getTotalAssets(data.assets);\r\n        const totalLiabilities = this.getTotalLiabilities(data.liabilities);\r\n        const netWorth = totalAssets - totalLiabilities;\r\n        \r\n        const totalLiquidAssets = data.assets.checking + data.assets.savings + \r\n                                 data.assets.moneyMarket + data.assets.emergencyFund;\r\n        \r\n        const totalDebt = this.getTotalDebt(data.liabilities);\r\n        \r\n        return {\r\n            monthlyCashFlow,\r\n            emergencyFundMonths: totalExpenses > 0 ? totalLiquidAssets / totalExpenses : 0,\r\n            debtToIncomeRatio: totalIncome > 0 ? (totalDebt / (totalIncome * 12)) * 100 : 0,\r\n            savingsRate: totalIncome > 0 ? ((monthlyCashFlow - data.behaviors.monthlyInvestmentContribution) / totalIncome) * 100 : 0,\r\n            creditUtilization: data.liabilities.totalCreditLimit > 0 ? (data.liabilities.creditCardDebt / data.liabilities.totalCreditLimit) * 100 : 0,\r\n            netWorth,\r\n            liquidityRatio: totalLiabilities > 0 ? totalLiquidAssets / totalLiabilities : totalLiquidAssets > 0 ? 100 : 0,\r\n            assetAllocationScore: this.calculateAssetAllocationScore(data)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Calculate the 8 core health indicators based on Financial Health Network research\r\n     */\r\n    private static calculateHealthIndicators(data: UserFinancialData, keyMetrics: any): HealthIndicator[] {\r\n        return [\r\n            this.analyzeSpendingVsIncome(data, keyMetrics),\r\n            this.analyzeBillPaymentReliability(data),\r\n            this.analyzeEmergencySavings(data, keyMetrics),\r\n            this.analyzeDebtManagement(data, keyMetrics),\r\n            this.analyzeCreditHealth(data, keyMetrics),\r\n            this.analyzeInsuranceConfidence(data),\r\n            this.analyzeLongTermGoalConfidence(data),\r\n            this.analyzeFinancialPlanningEngagement(data)\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 1: Spending vs Income Analysis\r\n     */\r\n    private static analyzeSpendingVsIncome(data: UserFinancialData, keyMetrics: any): HealthIndicator {\r\n        const totalIncome = this.getTotalMonthlyIncome(data.income);\r\n        const cashFlowRatio = totalIncome > 0 ? (keyMetrics.monthlyCashFlow / totalIncome) * 100 : 0;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        if (cashFlowRatio >= 20) {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (cashFlowRatio >= 10) {\r\n            score = 80;\r\n            status = 'good';\r\n        } else if (cashFlowRatio >= 5) {\r\n            score = 60;\r\n            status = 'fair';\r\n        } else if (cashFlowRatio > 0) {\r\n            score = 40;\r\n            status = 'poor';\r\n        } else {\r\n            score = 0;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Spending vs Income',\r\n            score,\r\n            status,\r\n            weight: 15,\r\n            metrics: [\r\n                {\r\n                    title: 'Monthly Cash Flow',\r\n                    value: this.formatCurrency(keyMetrics.monthlyCashFlow),\r\n                    numericValue: keyMetrics.monthlyCashFlow,\r\n                    description: 'Amount left after all expenses',\r\n                    status,\r\n                    benchmark: 'Target: 20% of income',\r\n                    improvement: cashFlowRatio < 20 ? 'Consider reducing expenses or increasing income' : undefined\r\n                },\r\n                {\r\n                    title: 'Cash Flow Ratio',\r\n                    value: `${cashFlowRatio.toFixed(1)}%`,\r\n                    numericValue: cashFlowRatio,\r\n                    description: 'Percentage of income available after expenses',\r\n                    status,\r\n                    benchmark: 'Excellent: 20%+, Good: 10-19%'\r\n                }\r\n            ],\r\n            recommendations: this.getSpendingRecommendations(cashFlowRatio),\r\n            explanation: `This indicator measures if you spend less than you earn. Your cash flow ratio is ${cashFlowRatio.toFixed(1)}%, resulting in a score of ${score}/100. A healthy ratio is typically above 10-20%.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 2: Bill Payment Reliability\r\n     */\r\n    private static analyzeBillPaymentReliability(data: UserFinancialData): HealthIndicator {\r\n        const reliability = data.behaviors.billPaymentReliability;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        switch (reliability) {\r\n            case 'always-on-time':\r\n                score = 100;\r\n                status = 'excellent';\r\n                break;\r\n            case 'usually-on-time':\r\n                score = 75;\r\n                status = 'good';\r\n                break;\r\n            case 'sometimes-late':\r\n                score = 50;\r\n                status = 'fair';\r\n                break;\r\n            case 'often-late':\r\n                score = 25;\r\n                status = 'poor';\r\n                break;\r\n            default:\r\n                score = 0;\r\n                status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Bill Payment Reliability',\r\n            score,\r\n            status,\r\n            weight: 15,\r\n            metrics: [\r\n                {\r\n                    title: 'Payment History',\r\n                    value: this.formatReliabilityText(reliability),\r\n                    description: 'Consistency of bill payments',\r\n                    status,\r\n                    benchmark: 'Target: Always on time'\r\n                },\r\n                {\r\n                    title: 'Credit Score Impact',\r\n                    value: data.liabilities.creditScore.toString(),\r\n                    numericValue: data.liabilities.creditScore,\r\n                    description: 'Current credit score',\r\n                    status: this.getCreditScoreStatus(data.liabilities.creditScore),\r\n                    benchmark: 'Excellent: 800+, Good: 740-799, Fair: 670-739'\r\n                }\r\n            ],\r\n            recommendations: this.getPaymentReliabilityRecommendations(reliability),\r\n            explanation: `This indicator reflects your consistency in paying bills on time. Your self-reported reliability is '${this.formatReliabilityText(reliability)}', leading to a score of ${score}/100. On-time payments are crucial for a good credit score.`\r\n        };\r\n    }\r\n\r\n    // Helper Methods\r\n    private static getTotalMonthlyIncome(income: any): number {\r\n        return income.primarySalary + income.secondaryIncome + income.businessIncome + \r\n               income.investmentIncome + income.rentalIncome + income.benefitsIncome + income.otherIncome;\r\n    }\r\n\r\n    private static getTotalMonthlyExpenses(expenses: any): number {\r\n        return expenses.housing + expenses.utilities + expenses.insurance + expenses.loanPayments +\r\n               expenses.childcare + expenses.food + expenses.transportation + expenses.healthcare +\r\n               expenses.clothing + expenses.personalCare + expenses.entertainment + expenses.diningOut +\r\n               expenses.hobbies + expenses.subscriptions + expenses.shopping + expenses.travel +\r\n               expenses.creditCardPayments + expenses.studentLoanPayments + expenses.otherDebtPayments;\r\n    }\r\n\r\n    private static getTotalAssets(assets: any): number {\r\n        return assets.checking + assets.savings + assets.moneyMarket + assets.emergencyFund +\r\n               assets.employer401k + assets.traditionalIRA + assets.rothIRA + assets.brokerageAccounts +\r\n               assets.stocks + assets.bonds + assets.mutualFunds + assets.primaryResidence +\r\n               assets.investmentProperties + assets.cryptocurrency + assets.preciousMetals +\r\n               assets.collectibles + assets.businessEquity + assets.otherAssets;\r\n    }\r\n\r\n    private static getTotalLiabilities(liabilities: any): number {\r\n        return liabilities.mortgageBalance + liabilities.homeEquityLoan + liabilities.autoLoans +\r\n               liabilities.securedCreditLines + liabilities.creditCardDebt + liabilities.personalLoans +\r\n               liabilities.studentLoans + liabilities.medicalDebt + liabilities.businessLoans +\r\n               liabilities.businessCreditLines + liabilities.taxDebt + liabilities.legalJudgments +\r\n               liabilities.otherDebt;\r\n    }\r\n\r\n    private static getTotalDebt(liabilities: any): number {\r\n        return this.getTotalLiabilities(liabilities);\r\n    }\r\n\r\n    private static formatCurrency(amount: number): string {\r\n        return new Intl.NumberFormat('en-US', {\r\n            style: 'currency',\r\n            currency: 'USD',\r\n            minimumFractionDigits: 0,\r\n            maximumFractionDigits: 0\r\n        }).format(amount);\r\n    }\r\n\r\n    private static formatReliabilityText(reliability: string): string {\r\n        const map: { [key: string]: string } = {\r\n            'always-on-time': 'Always On Time',\r\n            'usually-on-time': 'Usually On Time',\r\n            'sometimes-late': 'Sometimes Late',\r\n            'often-late': 'Often Late'\r\n        };\r\n        return map[reliability] || reliability;\r\n    }\r\n\r\n    private static calculateOverallHealthScore(indicators: HealthIndicator[]): number {\r\n        let totalWeightedScore = 0;\r\n        let totalWeight = 0;\r\n        \r\n        for (const indicator of indicators) {\r\n            totalWeightedScore += indicator.score * indicator.weight;\r\n            totalWeight += indicator.weight;\r\n        }\r\n        \r\n        return totalWeight > 0 ? Math.round(totalWeightedScore / totalWeight) : 0;\r\n    }\r\n\r\n    private static getHealthLevel(score: number): 'excellent' | 'good' | 'fair' | 'limited' | 'critical' {\r\n        if (score >= 80) return 'excellent';\r\n        if (score >= 65) return 'good';\r\n        if (score >= 50) return 'fair';\r\n        if (score >= 35) return 'limited';\r\n        return 'critical';\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 3: Emergency Savings Adequacy\r\n     */\r\n    private static analyzeEmergencySavings(data: UserFinancialData, keyMetrics: any): HealthIndicator {\r\n        const emergencyFundMonths = keyMetrics.emergencyFundMonths;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        if (emergencyFundMonths >= 6) {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (emergencyFundMonths >= 3) {\r\n            score = 80;\r\n            status = 'good';\r\n        } else if (emergencyFundMonths >= 1) {\r\n            score = 60;\r\n            status = 'fair';\r\n        } else if (emergencyFundMonths > 0) {\r\n            score = 30;\r\n            status = 'poor';\r\n        } else {\r\n            score = 0;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Emergency Savings',\r\n            score,\r\n            status,\r\n            weight: 20,\r\n            metrics: [\r\n                {\r\n                    title: 'Emergency Fund Coverage',\r\n                    value: `${emergencyFundMonths.toFixed(1)} months`,\r\n                    numericValue: emergencyFundMonths,\r\n                    description: 'How many months of expenses your liquid savings can cover',\r\n                    status,\r\n                    benchmark: 'Target: 3-6 months'\r\n                },\r\n                {\r\n                    title: 'Total Liquid Assets',\r\n                    value: this.formatCurrency(data.assets.checking + data.assets.savings + \r\n                                              data.assets.moneyMarket + data.assets.emergencyFund),\r\n                    numericValue: data.assets.checking + data.assets.savings + \r\n                                 data.assets.moneyMarket + data.assets.emergencyFund,\r\n                    description: 'Cash and easily accessible funds',\r\n                    status\r\n                }\r\n            ],\r\n            recommendations: this.getEmergencyFundRecommendations(emergencyFundMonths),\r\n            explanation: `This measures your financial cushion for unexpected events. You have ${emergencyFundMonths.toFixed(1)} months of expenses saved, giving you a score of ${score}/100. The standard recommendation is 3-6 months.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 4: Debt Management Effectiveness\r\n     */\r\n    private static analyzeDebtManagement(data: UserFinancialData, keyMetrics: any): HealthIndicator {\r\n        const debtToIncomeRatio = keyMetrics.debtToIncomeRatio;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        if (debtToIncomeRatio <= 20) {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (debtToIncomeRatio <= 36) {\r\n            score = 80;\r\n            status = 'good';\r\n        } else if (debtToIncomeRatio <= 50) {\r\n            score = 60;\r\n            status = 'fair';\r\n        } else if (debtToIncomeRatio <= 70) {\r\n            score = 40;\r\n            status = 'poor';\r\n        } else {\r\n            score = 20;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Debt Management',\r\n            score,\r\n            status,\r\n            weight: 15,\r\n            metrics: [\r\n                {\r\n                    title: 'Debt-to-Income Ratio',\r\n                    value: `${debtToIncomeRatio.toFixed(1)}%`,\r\n                    numericValue: debtToIncomeRatio,\r\n                    description: 'Percentage of your income that goes to debt payments',\r\n                    status,\r\n                    benchmark: 'Target: Below 36%'\r\n                },\r\n                {\r\n                    title: 'Total Debt',\r\n                    value: this.formatCurrency(this.getTotalDebt(data.liabilities)),\r\n                    numericValue: this.getTotalDebt(data.liabilities),\r\n                    description: 'Total amount of outstanding debt',\r\n                    status\r\n                }\r\n            ],\r\n            recommendations: this.getDebtManagementRecommendations(debtToIncomeRatio),\r\n            explanation: `This indicator assesses how manageable your debt is. Your debt-to-income ratio is ${debtToIncomeRatio.toFixed(1)}%, resulting in a score of ${score}/100. A lower ratio is generally better.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 5: Credit Score Health\r\n     */\r\n    private static analyzeCreditHealth(data: UserFinancialData, keyMetrics: any): HealthIndicator {\r\n        const creditScore = data.liabilities.creditScore;\r\n        const creditUtilization = keyMetrics.creditUtilization;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        if (creditScore >= 800 && creditUtilization <= 10) {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (creditScore >= 740 && creditUtilization <= 30) {\r\n            score = 80;\r\n            status = 'good';\r\n        } else if (creditScore >= 670) {\r\n            score = 60;\r\n            status = 'fair';\r\n        } else if (creditScore >= 580) {\r\n            score = 40;\r\n            status = 'poor';\r\n        } else {\r\n            score = 20;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Credit Health',\r\n            score,\r\n            status,\r\n            weight: 10,\r\n            metrics: [\r\n                {\r\n                    title: 'Credit Score',\r\n                    value: creditScore.toString(),\r\n                    numericValue: creditScore,\r\n                    description: 'Your current credit score',\r\n                    status: this.getCreditScoreStatus(creditScore),\r\n                    benchmark: 'Excellent: 800+, Good: 740-799, Fair: 670-739'\r\n                },\r\n                {\r\n                    title: 'Credit Utilization',\r\n                    value: `${creditUtilization.toFixed(1)}%`,\r\n                    numericValue: creditUtilization,\r\n                    description: 'Percentage of available credit you are using',\r\n                    status: this.getCreditUtilizationStatus(keyMetrics.creditUtilization),\r\n                    benchmark: 'Target: Below 30%'\r\n                }\r\n            ],\r\n            recommendations: this.getCreditHealthRecommendations(data.liabilities.creditScore, keyMetrics.creditUtilization),\r\n            explanation: `This reflects your creditworthiness. With a credit score of ${data.liabilities.creditScore} and a utilization of ${keyMetrics.creditUtilization.toFixed(1)}%, your score is ${score}/100. Both are key factors in your financial health.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 6: Insurance Coverage Confidence\r\n     */\r\n    private static analyzeInsuranceConfidence(data: UserFinancialData): HealthIndicator {\r\n        const hasHealthInsurance = data.insurance.healthInsurance;\r\n        const hasLifeInsurance = data.insurance.lifeInsurance;\r\n        const hasDisabilityInsurance = data.insurance.shortTermDisability || data.insurance.longTermDisability;\r\n        const confidence = data.insurance.insuranceConfidence;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        const insuranceCount = (hasHealthInsurance ? 1 : 0) + (hasLifeInsurance ? 1 : 0) + (hasDisabilityInsurance ? 1 : 0);\r\n        \r\n        if (insuranceCount === 3 && confidence === 'very-confident') {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (insuranceCount >= 2 && confidence !== 'not-confident') {\r\n            score = 80;\r\n            status = 'good';\r\n        } else if (insuranceCount >= 1) {\r\n            score = 60;\r\n            status = 'fair';\r\n        } else if (hasHealthInsurance) {\r\n            score = 40;\r\n            status = 'poor';\r\n        } else {\r\n            score = 20;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Insurance Confidence',\r\n            score,\r\n            status,\r\n            weight: 10,\r\n            metrics: [\r\n                {\r\n                    title: 'Self-Reported Confidence',\r\n                    value: this.formatConfidenceText(confidence),\r\n                    description: 'Your confidence in your insurance coverage',\r\n                    status\r\n                }\r\n            ],\r\n            recommendations: this.getInsuranceRecommendations(data.insurance),\r\n            explanation: `This measures your confidence in being protected from financial shocks. Your reported confidence level gives you a score of ${score}/100.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 7: Long-term Financial Goal Confidence\r\n     */\r\n    private static analyzeLongTermGoalConfidence(data: UserFinancialData): HealthIndicator {\r\n        const retirementConfidence = data.goals.retirementConfidence;\r\n        const hasRetirementSavings = (data.assets.employer401k + data.assets.traditionalIRA + data.assets.rothIRA) > 0;\r\n        const monthlyInvestment = data.behaviors.monthlyInvestmentContribution;\r\n        \r\n        let score = 0;\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n        \r\n        if (retirementConfidence === 'very-confident' && hasRetirementSavings && monthlyInvestment > 0) {\r\n            score = 100;\r\n            status = 'excellent';\r\n        } else if (retirementConfidence === 'somewhat-confident' && hasRetirementSavings) {\r\n            score = 75;\r\n            status = 'good';\r\n        } else if (hasRetirementSavings || monthlyInvestment > 0) {\r\n            score = 50;\r\n            status = 'fair';\r\n        } else if (retirementConfidence !== 'not-confident') {\r\n            score = 25;\r\n            status = 'poor';\r\n        } else {\r\n            score = 0;\r\n            status = 'critical';\r\n        }\r\n\r\n        return {\r\n            name: 'Long-term Goal Confidence',\r\n            score,\r\n            status,\r\n            weight: 10,\r\n            metrics: [\r\n                {\r\n                    title: 'Retirement Confidence',\r\n                    value: this.formatConfidenceText(retirementConfidence),\r\n                    description: 'Your confidence in your retirement savings plan',\r\n                    status,\r\n                    benchmark: 'Target: Very confident with active saving'\r\n                },\r\n                {\r\n                    title: 'Monthly Investment',\r\n                    value: this.formatCurrency(monthlyInvestment),\r\n                    numericValue: monthlyInvestment,\r\n                    description: 'Monthly investment contribution',\r\n                    status: monthlyInvestment > 500 ? 'excellent' : monthlyInvestment > 0 ? 'good' : 'poor',\r\n                    benchmark: 'Target: 10-15% of income'\r\n                }\r\n            ],\r\n            recommendations: this.getRetirementRecommendations(data.goals, monthlyInvestment),\r\n            explanation: `This assesses your confidence in reaching long-term financial goals like retirement. Your reported confidence results in a score of ${score}/100.`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Health Indicator 8: Financial Planning Engagement\r\n     */\r\n    private static analyzeFinancialPlanningEngagement(data: UserFinancialData): HealthIndicator {\r\n        const budgeting = data.behaviors.budgetingMethod;\r\n        const planning = data.behaviors.financialPlanningEngagement;\r\n\r\n        let budgetScore = 0;\r\n        switch (budgeting) {\r\n            case 'detailed-budget': budgetScore = 100; break;\r\n            case 'simple-tracking': budgetScore = 75; break;\r\n            case 'mental-budget': budgetScore = 40; break;\r\n            case 'no-budget': budgetScore = 0; break;\r\n        }\r\n\r\n        let planningScore = 0;\r\n        switch (planning) {\r\n            case 'actively-plan': planningScore = 100; break;\r\n            case 'occasionally-plan': planningScore = 70; break;\r\n            case 'rarely-plan': planningScore = 30; break;\r\n            case 'never-plan': planningScore = 0; break;\r\n        }\r\n\r\n        const score = Math.round((budgetScore * 0.5) + (planningScore * 0.5));\r\n        let status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical' = 'critical';\r\n\r\n        if (score >= 90) {\r\n            status = 'excellent';\r\n        } else if (score >= 70) {\r\n            status = 'good';\r\n        } else if (score >= 50) {\r\n            status = 'fair';\r\n        } else if (score >= 20) {\r\n            status = 'poor';\r\n        }\r\n\r\n        return {\r\n            name: 'Financial Planning Engagement',\r\n            score,\r\n            status,\r\n            weight: 10,\r\n            metrics: [\r\n                {\r\n                    title: 'Budgeting Method',\r\n                    value: this.formatBudgetText(budgeting),\r\n                    description: 'How you manage your budget',\r\n                    status: score >= 70 ? 'good' : 'poor'\r\n                },\r\n                {\r\n                    title: 'Planning Engagement',\r\n                    value: this.formatPlanningText(planning),\r\n                    description: 'How actively you plan your finances',\r\n                    status: score >= 70 ? 'good' : 'poor'\r\n                }\r\n            ],\r\n            recommendations: this.getPlanningRecommendations(budgeting, planning),\r\n            explanation: `This measures how actively you are planning and tracking your finances. Your approach gives you a score of ${score}/100.`\r\n        };\r\n    }\r\n\r\n    // Helper calculation methods\r\n    private static calculateAssetAllocationScore(data: UserFinancialData): number {\r\n        const totalInvestments = data.assets.employer401k + data.assets.traditionalIRA + \r\n                               data.assets.rothIRA + data.assets.brokerageAccounts + data.assets.stocks;\r\n        const totalAssets = this.getTotalAssets(data.assets);\r\n        \r\n        if (totalAssets === 0) return 0;\r\n        \r\n        const investmentRatio = totalInvestments / totalAssets;\r\n        const age = data.personalInfo.age;\r\n        const targetStockAllocation = (100 - age) / 100;\r\n        \r\n        const allocationScore = Math.max(0, 100 - Math.abs(investmentRatio - targetStockAllocation) * 200);\r\n        return Math.round(allocationScore);\r\n    }\r\n\r\n    /**\r\n     * Enhanced Liquidity Analysis\r\n     */\r\n    private static analyzeLiquidity(data: UserFinancialData, _keyMetrics: any): FinancialMetric[] {\r\n        const totalLiquidAssets = data.assets.checking + data.assets.savings + \r\n                                 data.assets.moneyMarket + data.assets.emergencyFund;\r\n        const monthlyExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const liquidityRatio = monthlyExpenses > 0 ? totalLiquidAssets / monthlyExpenses : 0;\r\n        \r\n        return [\r\n            {\r\n                title: 'Liquid Assets',\r\n                value: this.formatCurrency(totalLiquidAssets),\r\n                numericValue: totalLiquidAssets,\r\n                description: 'Cash and cash equivalents available immediately',\r\n                status: totalLiquidAssets >= monthlyExpenses * 6 ? 'excellent' : \r\n                       totalLiquidAssets >= monthlyExpenses * 3 ? 'good' : 'poor',\r\n                benchmark: 'Target: 6+ months of expenses'\r\n            },\r\n            {\r\n                title: 'Liquidity Ratio',\r\n                value: `${liquidityRatio.toFixed(1)} months`,\r\n                numericValue: liquidityRatio,\r\n                description: 'Months of expenses covered by liquid assets',\r\n                status: liquidityRatio >= 6 ? 'excellent' : liquidityRatio >= 3 ? 'good' : 'poor',\r\n                benchmark: 'Excellent: 6+ months, Good: 3-6 months'\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Enhanced Debt Analysis\r\n     */\r\n    private static analyzeDebt(data: UserFinancialData, keyMetrics: any): FinancialMetric[] {\r\n        const totalDebt = this.getTotalDebt(data.liabilities);\r\n        const debtToIncomeRatio = keyMetrics.debtToIncomeRatio;\r\n        const creditUtilization = keyMetrics.creditUtilization;\r\n        \r\n        return [\r\n            {\r\n                title: 'Total Debt',\r\n                value: this.formatCurrency(totalDebt),\r\n                numericValue: totalDebt,\r\n                description: 'All outstanding debt obligations',\r\n                status: debtToIncomeRatio <= 20 ? 'excellent' : debtToIncomeRatio <= 36 ? 'good' : 'poor',\r\n                benchmark: 'Target: <20% of annual income'\r\n            },\r\n            {\r\n                title: 'Debt-to-Income Ratio',\r\n                value: `${debtToIncomeRatio.toFixed(1)}%`,\r\n                numericValue: debtToIncomeRatio,\r\n                description: 'Total debt as percentage of annual income',\r\n                status: debtToIncomeRatio <= 20 ? 'excellent' : debtToIncomeRatio <= 36 ? 'good' : 'poor',\r\n                benchmark: 'Excellent: <20%, Good: 20-36%, Poor: >36%'\r\n            },\r\n            {\r\n                title: 'Credit Utilization',\r\n                value: `${creditUtilization.toFixed(1)}%`,\r\n                numericValue: creditUtilization,\r\n                description: 'Credit card balances vs available credit',\r\n                status: creditUtilization <= 10 ? 'excellent' : creditUtilization <= 30 ? 'good' : 'poor',\r\n                benchmark: 'Excellent: <10%, Good: 10-30%, Poor: >30%'\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Enhanced Investment Analysis\r\n     */\r\n    private static analyzeInvestments(data: UserFinancialData, keyMetrics: any): FinancialMetric[] {\r\n        const totalInvestments = data.assets.employer401k + data.assets.traditionalIRA + \r\n                               data.assets.rothIRA + data.assets.brokerageAccounts + \r\n                               data.assets.stocks + data.assets.bonds + data.assets.mutualFunds;\r\n        const monthlyIncome = this.getTotalMonthlyIncome(data.income);\r\n        const investmentRate = monthlyIncome > 0 ? (data.behaviors.monthlyInvestmentContribution / monthlyIncome) * 100 : 0;\r\n        const age = data.personalInfo.age;\r\n        const targetStockAllocation = 110 - age; // Rule of thumb: 110 - age = stock %\r\n        \r\n        return [\r\n            {\r\n                title: 'Total Investments',\r\n                value: this.formatCurrency(totalInvestments),\r\n                numericValue: totalInvestments,\r\n                description: 'All investment accounts and securities',\r\n                status: investmentRate >= 15 ? 'excellent' : investmentRate >= 10 ? 'good' : 'poor',\r\n                benchmark: 'Target: 15%+ of income invested monthly'\r\n            },\r\n            {\r\n                title: 'Investment Rate',\r\n                value: `${investmentRate.toFixed(1)}%`,\r\n                numericValue: investmentRate,\r\n                description: 'Monthly investment as percentage of income',\r\n                status: investmentRate >= 15 ? 'excellent' : investmentRate >= 10 ? 'good' : 'poor',\r\n                benchmark: 'Excellent: 15%+, Good: 10-15%, Poor: <10%'\r\n            },\r\n            {\r\n                title: 'Asset Allocation Score',\r\n                value: `${keyMetrics.assetAllocationScore}/100`,\r\n                numericValue: keyMetrics.assetAllocationScore,\r\n                description: 'How well diversified your investments are',\r\n                status: keyMetrics.assetAllocationScore >= 80 ? 'excellent' : \r\n                       keyMetrics.assetAllocationScore >= 60 ? 'good' : 'poor',\r\n                benchmark: `Target stock allocation for age ${age}: ~${targetStockAllocation}%`\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Enhanced Insurance Analysis\r\n     */\r\n    private static analyzeInsurance(data: UserFinancialData): FinancialMetric[] {\r\n        const hasHealthInsurance = data.personalInfo.healthInsurance;\r\n        const hasLifeInsurance = data.personalInfo.lifeInsurance;\r\n        const hasDisabilityInsurance = data.personalInfo.shortTermDisability || data.personalInfo.longTermDisability;\r\n        const dependents = data.personalInfo.dependents;\r\n        \r\n        const coverageScore = (hasHealthInsurance ? 40 : 0) + \r\n                            (hasLifeInsurance && dependents > 0 ? 30 : dependents === 0 ? 30 : 0) + \r\n                            (hasDisabilityInsurance ? 30 : 0);\r\n        \r\n        return [\r\n            {\r\n                title: 'Insurance Coverage Score',\r\n                value: `${coverageScore}/100`,\r\n                numericValue: coverageScore,\r\n                description: 'Overall adequacy of insurance protection',\r\n                status: coverageScore >= 90 ? 'excellent' : coverageScore >= 70 ? 'good' : 'poor',\r\n                benchmark: 'Target: 90+ (Health + Life + Disability)'\r\n            },\r\n            {\r\n                title: 'Essential Coverage',\r\n                value: hasHealthInsurance ? 'Health ✓' : 'Health ✗',\r\n                description: 'Health insurance status',\r\n                status: hasHealthInsurance ? 'excellent' : 'critical',\r\n                benchmark: 'Required: Health insurance is essential'\r\n            },\r\n            {\r\n                title: 'Income Protection',\r\n                value: hasDisabilityInsurance ? 'Disability ✓' : 'Disability ✗',\r\n                description: 'Disability insurance status',\r\n                status: hasDisabilityInsurance ? 'good' : 'poor',\r\n                benchmark: 'Recommended: Protect 60-70% of income'\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Enhanced Wealth Projections\r\n     */\r\n    private static projectWealth(data: UserFinancialData, _keyMetrics: any): WealthProjection[] {\r\n        const currentAge = data.personalInfo.age;\r\n        const retirementAge = data.goals.retirementAge;\r\n        const yearsToRetirement = retirementAge - currentAge;\r\n        const monthlyInvestment = data.behaviors.monthlyInvestmentContribution;\r\n        const currentInvestments = data.assets.employer401k + data.assets.traditionalIRA + \r\n                                 data.assets.rothIRA + data.assets.brokerageAccounts;\r\n        \r\n        // Conservative projection at 6% annual return\r\n        const conservativeReturn = 0.06;\r\n        const moderateReturn = 0.08;\r\n        const aggressiveReturn = 0.10;\r\n        \r\n        const projections: WealthProjection[] = [];\r\n        const scenarios = [\r\n            { name: 'Conservative (6%)', rate: conservativeReturn },\r\n            { name: 'Moderate (8%)', rate: moderateReturn },\r\n            { name: 'Aggressive (10%)', rate: aggressiveReturn }\r\n        ];\r\n        \r\n        scenarios.forEach(scenario => {\r\n            const monthlyRate = scenario.rate / 12;\r\n            const months = yearsToRetirement * 12;\r\n            \r\n            // Future value of current investments\r\n            const futureValueCurrent = currentInvestments * Math.pow(1 + scenario.rate, yearsToRetirement);\r\n            \r\n            // Future value of monthly contributions (annuity)\r\n            const futureValueContributions = monthlyInvestment * \r\n                ((Math.pow(1 + monthlyRate, months) - 1) / monthlyRate);\r\n            \r\n            const totalProjected = futureValueCurrent + futureValueContributions;\r\n            \r\n            projections.push({\r\n                scenario: scenario.name,\r\n                timeframe: `${yearsToRetirement} years`,\r\n                projectedValue: totalProjected,\r\n                monthlyContribution: monthlyInvestment,\r\n                assumptions: `${(scenario.rate * 100).toFixed(0)}% annual return, ${monthlyInvestment > 0 ? '$' + monthlyInvestment.toLocaleString() : '$0'} monthly`\r\n            });\r\n        });\r\n        \r\n        return projections;\r\n    }\r\n\r\n    /**\r\n     * Enhanced Scenario Analysis\r\n     */\r\n    private static analyzeScenarios(data: UserFinancialData, _keyMetrics: any): ScenarioAnalysis[] {\r\n        const monthlyExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const emergencyFund = data.assets.emergencyFund + data.assets.savings;\r\n        \r\n        return [\r\n            {\r\n                scenario: 'Job Loss',\r\n                impact: 'High',\r\n                description: 'Complete loss of primary income',\r\n                timeToRecover: emergencyFund > 0 ? `${(emergencyFund / monthlyExpenses).toFixed(1)} months` : '0 months',\r\n                recommendations: [\r\n                    'Build emergency fund to 6 months of expenses',\r\n                    'Consider disability insurance',\r\n                    'Diversify income sources'\r\n                ],\r\n                probability: 'Medium'\r\n            },\r\n            {\r\n                scenario: 'Market Downturn (-30%)',\r\n                impact: 'Medium',\r\n                description: '30% decline in investment portfolio',\r\n                timeToRecover: '2-3 years historically',\r\n                recommendations: [\r\n                    'Maintain diversified portfolio',\r\n                    'Continue regular investing (dollar-cost averaging)',\r\n                    'Avoid panic selling'\r\n                ],\r\n                probability: 'High (occurs every 5-10 years)'\r\n            },\r\n            {\r\n                scenario: 'Major Medical Emergency',\r\n                impact: 'High',\r\n                description: 'Unexpected medical expenses',\r\n                timeToRecover: 'Depends on insurance coverage',\r\n                recommendations: [\r\n                    'Ensure adequate health insurance',\r\n                    'Build separate medical emergency fund',\r\n                    'Consider HSA contributions'\r\n                ],\r\n                probability: 'Medium'\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Generate Detailed Financial Insights\r\n     */\r\n    private static generateDetailedInsights(data: UserFinancialData, keyMetrics: any, healthIndicators: HealthIndicator[]): any {\r\n        const monthlyIncome = this.getTotalMonthlyIncome(data.income);\r\n        const monthlyExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const netWorth = keyMetrics.netWorth;\r\n        \r\n        return {\r\n            cashFlowAnalysis: {\r\n                monthlyIncome,\r\n                monthlyExpenses,\r\n                surplus: keyMetrics.monthlyCashFlow,\r\n                surplusPercentage: monthlyIncome > 0 ? (keyMetrics.monthlyCashFlow / monthlyIncome) * 100 : 0,\r\n                insight: keyMetrics.monthlyCashFlow > 0 ? \r\n                    'Positive cash flow provides opportunities for wealth building' :\r\n                    'Negative cash flow requires immediate attention to avoid debt accumulation'\r\n            },\r\n            netWorthAnalysis: {\r\n                currentNetWorth: netWorth,\r\n                netWorthPerAge: data.personalInfo.age > 0 ? netWorth / data.personalInfo.age : 0,\r\n                projectedGrowth: this.calculateNetWorthGrowth(data, keyMetrics),\r\n                insight: netWorth > 0 ? \r\n                    'Positive net worth indicates good financial foundation' :\r\n                    'Negative net worth requires debt reduction focus'\r\n            },\r\n            riskFactors: this.identifyRiskFactors(data, keyMetrics),\r\n            opportunities: this.identifyOpportunities(data, keyMetrics, healthIndicators)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Calculate Financial Ratios\r\n     */\r\n    private static calculateFinancialRatios(data: UserFinancialData, keyMetrics: any): any {\r\n        const monthlyIncome = this.getTotalMonthlyIncome(data.income);\r\n        const monthlyExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const totalAssets = this.getTotalAssets(data.assets);\r\n        const totalLiabilities = this.getTotalLiabilities(data.liabilities);\r\n        \r\n        return {\r\n            liquidityRatios: {\r\n                currentRatio: totalLiabilities > 0 ? (data.assets.checking + data.assets.savings) / totalLiabilities : 0,\r\n                quickRatio: totalLiabilities > 0 ? data.assets.checking / totalLiabilities : 0,\r\n                emergencyFundRatio: keyMetrics.emergencyFundMonths\r\n            },\r\n            leverageRatios: {\r\n                debtToAssetRatio: totalAssets > 0 ? (totalLiabilities / totalAssets) * 100 : 0,\r\n                debtToIncomeRatio: keyMetrics.debtToIncomeRatio,\r\n                equityRatio: totalAssets > 0 ? ((totalAssets - totalLiabilities) / totalAssets) * 100 : 0\r\n            },\r\n            efficiencyRatios: {\r\n                savingsRate: keyMetrics.savingsRate,\r\n                expenseRatio: monthlyIncome > 0 ? (monthlyExpenses / monthlyIncome) * 100 : 0,\r\n                investmentRate: monthlyIncome > 0 ? (data.behaviors.monthlyInvestmentContribution / monthlyIncome) * 100 : 0\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Assess Financial Risk\r\n     */\r\n    private static assessFinancialRisk(data: UserFinancialData, keyMetrics: any): any {\r\n        const risks: { category: string; level: string; description: string; mitigation: string }[] = [];\r\n        \r\n        // Income risk\r\n        if (data.income.secondaryIncome === 0 && data.income.businessIncome === 0) {\r\n            risks.push({\r\n                category: 'Income Concentration',\r\n                level: 'High',\r\n                description: 'Dependent on single income source',\r\n                mitigation: 'Develop multiple income streams or enhance job security'\r\n            });\r\n        }\r\n        \r\n        // Liquidity risk\r\n        if (keyMetrics.emergencyFundMonths < 3) {\r\n            risks.push({\r\n                category: 'Liquidity Risk',\r\n                level: 'High',\r\n                description: 'Insufficient emergency funds',\r\n                mitigation: 'Build emergency fund to 6 months of expenses'\r\n            });\r\n        }\r\n        \r\n        // Credit risk\r\n        if (keyMetrics.creditUtilization > 30) {\r\n            risks.push({\r\n                category: 'Credit Risk',\r\n                level: 'Medium',\r\n                description: 'High credit utilization',\r\n                mitigation: 'Pay down credit card balances or increase credit limits'\r\n            });\r\n        }\r\n        \r\n        return {\r\n            overallRiskLevel: this.calculateOverallRisk(risks),\r\n            riskFactors: risks,\r\n            riskScore: this.calculateRiskScore(data, keyMetrics)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Analyze Financial Goals\r\n     */\r\n    private static analyzeFinancialGoals(data: UserFinancialData, keyMetrics: any): any {\r\n        const currentAge = data.personalInfo.age;\r\n        const retirementAge = data.goals.retirementAge;\r\n        const yearsToRetirement = retirementAge - currentAge;\r\n        const monthlyInvestment = data.behaviors.monthlyInvestmentContribution;\r\n        \r\n        return {\r\n            retirementReadiness: {\r\n                yearsToRetirement,\r\n                currentSavings: data.assets.employer401k + data.assets.traditionalIRA + data.assets.rothIRA,\r\n                monthlyContribution: monthlyInvestment,\r\n                projectedValue: this.calculateRetirementProjection(data, keyMetrics),\r\n                onTrack: this.isRetirementOnTrack(data, keyMetrics)\r\n            },\r\n            emergencyGoal: {\r\n                target: this.getTotalMonthlyExpenses(data.expenses) * 6,\r\n                current: data.assets.emergencyFund + data.assets.savings,\r\n                progress: keyMetrics.emergencyFundMonths / 6 * 100,\r\n                timeToGoal: this.calculateTimeToEmergencyGoal(data, keyMetrics)\r\n            }\r\n        };\r\n    }\r\n\r\n    // Helper methods for the new analysis functions\r\n    private static calculateNetWorthGrowth(_data: UserFinancialData, keyMetrics: any): number {\r\n        return keyMetrics.monthlyCashFlow * 12; // Annual net worth growth potential\r\n    }\r\n\r\n    private static identifyRiskFactors(data: UserFinancialData, keyMetrics: any): string[] {\r\n        const risks: string[] = [];\r\n        \r\n        if (keyMetrics.emergencyFundMonths < 3) risks.push('Insufficient emergency fund');\r\n        if (keyMetrics.debtToIncomeRatio > 36) risks.push('High debt-to-income ratio');\r\n        if (keyMetrics.creditUtilization > 30) risks.push('High credit utilization');\r\n        if (data.behaviors.monthlyInvestmentContribution < data.income.primarySalary * 0.1) {\r\n            risks.push('Low retirement savings rate');\r\n        }\r\n        \r\n        return risks;\r\n    }\r\n\r\n    private static identifyOpportunities(data: UserFinancialData, keyMetrics: any, _healthIndicators: HealthIndicator[]): string[] {\r\n        const opportunities: string[] = [];\r\n        \r\n        if (keyMetrics.monthlyCashFlow > 500) opportunities.push('Increase investment contributions');\r\n        if (keyMetrics.creditUtilization < 10) opportunities.push('Consider rewards credit cards');\r\n        if (data.assets.checking > data.expenses.housing * 2) opportunities.push('Move excess cash to high-yield savings');\r\n        \r\n        return opportunities;\r\n    }\r\n\r\n    private static calculateOverallRisk(risks: any[]): string {\r\n        const highRisks = risks.filter(r => r.level === 'High').length;\r\n        if (highRisks >= 2) return 'High';\r\n        if (highRisks === 1) return 'Medium';\r\n        return 'Low';\r\n    }\r\n\r\n    private static calculateRiskScore(data: UserFinancialData, keyMetrics: any): number {\r\n        let score = 100;\r\n        \r\n        if (keyMetrics.emergencyFundMonths < 3) score -= 20;\r\n        if (keyMetrics.debtToIncomeRatio > 36) score -= 15;\r\n        if (keyMetrics.creditUtilization > 30) score -= 10;\r\n        if (data.behaviors.monthlyInvestmentContribution === 0) score -= 15;\r\n        \r\n        return Math.max(0, score);\r\n    }\r\n\r\n    private static calculateRetirementProjection(data: UserFinancialData, _keyMetrics: any): number {\r\n        const currentAge = data.personalInfo.age;\r\n        const retirementAge = data.goals.retirementAge;\r\n        const yearsToRetirement = retirementAge - currentAge;\r\n        const monthlyInvestment = data.behaviors.monthlyInvestmentContribution;\r\n        const currentSavings = data.assets.employer401k + data.assets.traditionalIRA + data.assets.rothIRA;\r\n        \r\n        // Assuming 7% annual return\r\n        const annualReturn = 0.07;\r\n        const futureValue = currentSavings * Math.pow(1 + annualReturn, yearsToRetirement);\r\n        const annuityValue = monthlyInvestment * 12 * (Math.pow(1 + annualReturn, yearsToRetirement) - 1) / annualReturn;\r\n        \r\n        return futureValue + annuityValue;\r\n    }\r\n\r\n    private static isRetirementOnTrack(data: UserFinancialData, keyMetrics: any): boolean {\r\n        const projectedValue = this.calculateRetirementProjection(data, keyMetrics);\r\n        const targetValue = data.goals.retirementIncomeNeeded * 25; // 4% rule\r\n        \r\n        return projectedValue >= targetValue;\r\n    }\r\n\r\n    private static calculateTimeToEmergencyGoal(data: UserFinancialData, keyMetrics: any): string {\r\n        const target = this.getTotalMonthlyExpenses(data.expenses) * 6;\r\n        const current = data.assets.emergencyFund + data.assets.savings;\r\n        const needed = target - current;\r\n        \r\n        if (needed <= 0) return 'Goal achieved';\r\n        if (keyMetrics.monthlyCashFlow <= 0) return 'Cannot achieve with current cash flow';\r\n        \r\n        const months = Math.ceil(needed / keyMetrics.monthlyCashFlow);\r\n        return `${months} months at current savings rate`;\r\n    }\r\n\r\n    private static calculatePeerBenchmarks(data: UserFinancialData): any { \r\n        return {\r\n            ageGroup: `${Math.floor(data.personalInfo.age / 10) * 10}s`,\r\n            incomeGroup: 'Middle Income',\r\n            netWorthPercentile: 50,\r\n            savingsRatePercentile: 45,\r\n            debtRatioPercentile: 55\r\n        };\r\n    }\r\n    \r\n    // Status helper methods\r\n    private static getCreditScoreStatus(score: number): 'excellent' | 'good' | 'fair' | 'poor' | 'critical' {\r\n        if (score >= 800) return 'excellent';\r\n        if (score >= 740) return 'good';\r\n        if (score >= 670) return 'fair';\r\n        if (score >= 580) return 'poor';\r\n        return 'critical';\r\n    }\r\n    \r\n    // Recommendation methods\r\n    private static getSpendingRecommendations(ratio: number): string[] { \r\n        if (ratio < 5) {\r\n            return [\r\n                'Immediate action needed: Create a strict budget to reduce expenses',\r\n                'Consider increasing income through side work or skills development',\r\n                'Review all subscriptions and discretionary spending'\r\n            ];\r\n        } else if (ratio < 10) {\r\n            return [\r\n                'Look for areas to cut unnecessary expenses',\r\n                'Consider ways to increase your income',\r\n                'Build an emergency fund as a priority'\r\n            ];\r\n        }\r\n        return ['Great job maintaining positive cash flow!'];\r\n    }\r\n    \r\n    private static getPaymentReliabilityRecommendations(reliability: string): string[] { \r\n        if (reliability === 'often-late' || reliability === 'sometimes-late') {\r\n            return [\r\n                'Set up automatic bill payments to improve payment history',\r\n                'Create a bill payment calendar with due dates',\r\n                'Consider consolidating due dates to simplify management'\r\n            ];\r\n        }\r\n        return ['Keep up the excellent payment history!'];\r\n    }\r\n\r\n    private static getEmergencyFundRecommendations(months: number): string[] {\r\n        if (months < 1) {\r\n            return [\r\n                'Start building emergency fund immediately - even $500 helps',\r\n                'Set up automatic transfers to savings account',\r\n                'Cut discretionary spending to build emergency buffer'\r\n            ];\r\n        } else if (months < 3) {\r\n            return [\r\n                'Good start! Continue building to reach 3-month target',\r\n                'Consider increasing your monthly emergency fund contributions',\r\n                'Keep emergency funds in high-yield savings account'\r\n            ];\r\n        } else if (months < 6) {\r\n            return [\r\n                'Great progress! Work toward 6-month emergency fund',\r\n                'Your emergency fund provides good financial security'\r\n            ];\r\n        }\r\n        return ['Excellent emergency fund! You have strong financial security.'];\r\n    }\r\n\r\n    private static getDebtManagementRecommendations(ratio: number): string[] {\r\n        if (ratio > 50) {\r\n            return [\r\n                'Urgent: Debt ratio is too high - consider debt consolidation',\r\n                'Focus on paying off highest interest rate debts first',\r\n                'Consider credit counseling services',\r\n                'Avoid taking on any new debt'\r\n            ];\r\n        } else if (ratio > 36) {\r\n            return [\r\n                'Work on reducing debt load - focus on high-interest debt',\r\n                'Consider debt avalanche or snowball method',\r\n                'Avoid new debt until ratios improve'\r\n            ];\r\n        } else if (ratio > 20) {\r\n            return [\r\n                'Debt levels are manageable but could be improved',\r\n                'Continue making regular payments and avoid new debt'\r\n            ];\r\n        }\r\n        return ['Excellent debt management! Keep up the good work.'];\r\n    }\r\n\r\n    private static getCreditHealthRecommendations(creditScore: number, utilization: number): string[] {\r\n        const recommendations: string[] = [];\r\n        \r\n        if (creditScore < 670) {\r\n            recommendations.push('Focus on improving credit score through on-time payments');\r\n            recommendations.push('Consider becoming an authorized user on a family member\\'s account');\r\n        }\r\n        \r\n        if (utilization > 30) {\r\n            recommendations.push('Reduce credit card balances to improve utilization ratio');\r\n            recommendations.push('Consider paying down cards or requesting credit limit increases');\r\n        }\r\n        \r\n        if (recommendations.length === 0) {\r\n            recommendations.push('Great credit health! Maintain current habits.');\r\n        }\r\n        \r\n        return recommendations;\r\n    }\r\n\r\n    private static getInsuranceRecommendations(insurance: any): string[] {\r\n        const recommendations: string[] = [];\r\n        \r\n        if (!insurance.healthInsurance) {\r\n            recommendations.push('Get health insurance immediately - essential protection');\r\n        }\r\n        if (!insurance.lifeInsurance) {\r\n            recommendations.push('Consider life insurance to protect dependents');\r\n        }\r\n        if (!insurance.shortTermDisability && !insurance.longTermDisability) {\r\n            recommendations.push('Consider disability insurance to protect your income');\r\n        }\r\n        \r\n        if (recommendations.length === 0) {\r\n            recommendations.push('Good insurance coverage! Review annually to ensure adequacy.');\r\n        }\r\n        \r\n        return recommendations;\r\n    }\r\n\r\n    private static getRetirementRecommendations(goals: any, monthlyInvestment: number): string[] {\r\n        const recommendations: string[] = [];\r\n        \r\n        if (monthlyInvestment === 0) {\r\n            recommendations.push('Start investing for retirement immediately, even small amounts help');\r\n            recommendations.push('Take advantage of employer 401(k) match if available');\r\n        } else if (monthlyInvestment < 500) {\r\n            recommendations.push('Consider increasing retirement contributions');\r\n            recommendations.push('Target 10-15% of income for retirement savings');\r\n        }\r\n        \r\n        if (goals.retirementConfidence !== 'very-confident') {\r\n            recommendations.push('Meet with financial advisor to create retirement plan');\r\n            recommendations.push('Use retirement calculators to estimate needs');\r\n        }\r\n        \r\n        if (recommendations.length === 0) {\r\n            recommendations.push('Excellent retirement planning! Stay on track.');\r\n        }\r\n        \r\n        return recommendations;\r\n    }\r\n\r\n    private static getPlanningRecommendations(budgeting: string, planning: string): string[] {\r\n        const recommendations: string[] = [];\r\n        \r\n        if (budgeting === 'no-budget') {\r\n            recommendations.push('Start with basic expense tracking using apps or spreadsheets');\r\n            recommendations.push('Create a simple budget to understand spending patterns');\r\n        } else if (budgeting === 'mental-budget') {\r\n            recommendations.push('Move to written budget for better accuracy');\r\n        }\r\n        \r\n        if (planning === 'never-plan' || planning === 'rarely-plan') {\r\n            recommendations.push('Set aside time monthly for financial planning');\r\n            recommendations.push('Start with simple goal-setting and progress tracking');\r\n        }\r\n        \r\n        if (recommendations.length === 0) {\r\n            recommendations.push('Great financial planning habits! Keep it up.');\r\n        }\r\n        \r\n        return recommendations;\r\n    }\r\n\r\n    private static getCreditUtilizationStatus(utilization: number): 'excellent' | 'good' | 'fair' | 'poor' | 'critical' {\r\n        if (utilization <= 10) return 'excellent';\r\n        if (utilization <= 30) return 'good';\r\n        if (utilization <= 50) return 'fair';\r\n        if (utilization <= 80) return 'poor';\r\n        return 'critical';\r\n    }\r\n\r\n    private static formatConfidenceText(confidence: string): string {\r\n        return confidence.replace(/-/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\r\n    }\r\n\r\n    private static formatBudgetText(budget: string): string {\r\n        const map: { [key: string]: string } = {\r\n            'detailed-budget': 'Detailed Budget',\r\n            'simple-tracking': 'Simple Tracking',\r\n            'mental-budget': 'Mental Budget',\r\n            'no-budget': 'No Budget'\r\n        };\r\n        return map[budget] || budget;\r\n    }\r\n\r\n    private static formatPlanningText(planning: string): string {\r\n        const map: { [key: string]: string } = {\r\n            'actively-plan': 'Actively Plan',\r\n            'occasionally-plan': 'Occasionally Plan',\r\n            'rarely-plan': 'Rarely Plan',\r\n            'never-plan': 'Never Plan'\r\n        };\r\n        return map[planning] || planning;\r\n    }\r\n\r\n    /**\r\n     * Validate that we're using actual user data, not mock/default values\r\n     */\r\n    private static validateUserData(data: UserFinancialData): void {\r\n        console.log('🔍 Data Validation - Verifying actual user inputs:', {\r\n            primarySalary: data.income.primarySalary,\r\n            housing: data.expenses.housing,\r\n            totalAssets: this.getTotalAssets(data.assets),\r\n            totalLiabilities: this.getTotalLiabilities(data.liabilities),\r\n            creditScore: data.liabilities.creditScore\r\n        });\r\n\r\n        // Log key calculations to ensure we're using real data\r\n        const totalIncome = this.getTotalMonthlyIncome(data.income);\r\n        const totalExpenses = this.getTotalMonthlyExpenses(data.expenses);\r\n        const cashFlow = totalIncome - totalExpenses;\r\n        \r\n        console.log('🔍 Calculated Metrics from User Data:', {\r\n            totalMonthlyIncome: totalIncome,\r\n            totalMonthlyExpenses: totalExpenses,\r\n            monthlyCashFlow: cashFlow,\r\n            emergencyFundMonths: totalExpenses > 0 ? (data.assets.checking + data.assets.savings + data.assets.emergencyFund) / totalExpenses : 0\r\n        });\r\n\r\n        // Validate critical inputs are not zero/default\r\n        if (data.income.primarySalary <= 0) {\r\n            throw new Error('Invalid data: Primary salary cannot be zero or negative');\r\n        }\r\n\r\n        if (data.liabilities.creditScore < 300 || data.liabilities.creditScore > 850) {\r\n            throw new Error('Invalid data: Credit score must be between 300 and 850');\r\n        }\r\n\r\n        console.log('✅ Data validation passed - using actual user inputs');\r\n    }\r\n} ","/**\r\n * Multi-Step Financial Data Collection Form\r\n * Comprehensive form based on 8 financial health indicators research\r\n */\r\n\r\nimport { FormStep, FormField, UserFinancialData } from '../../types';\r\n\r\nexport class MultiStepForm {\r\n    private currentStepIndex: number = 0;\r\n    private formData: Partial<UserFinancialData> = {};\r\n    private steps: FormStep[] = [];\r\n    private onDataChange?: (data: Partial<UserFinancialData>) => void;\r\n    private onComplete?: (data: UserFinancialData) => void;\r\n\r\n    constructor(\r\n        private container: HTMLElement,\r\n        callbacks?: {\r\n            onDataChange?: (data: Partial<UserFinancialData>) => void;\r\n            onComplete?: (data: UserFinancialData) => void;\r\n        }\r\n    ) {\r\n        this.onDataChange = callbacks?.onDataChange;\r\n        this.onComplete = callbacks?.onComplete;\r\n        this.initializeSteps();\r\n        this.initializeFormData();\r\n        this.render();\r\n    }\r\n\r\n    private initializeSteps(): void {\r\n        this.steps = [\r\n            {\r\n                id: 'personal-info',\r\n                title: 'Personal Information',\r\n                description: 'Tell us about yourself to personalize your analysis',\r\n                fields: [\r\n                    {\r\n                        id: 'age',\r\n                        type: 'number',\r\n                        label: 'Age',\r\n                        description: 'Your current age',\r\n                        required: true,\r\n                        value: 30,\r\n                        validation: { min: 18, max: 100 }\r\n                    },\r\n                    {\r\n                        id: 'maritalStatus',\r\n                        type: 'select',\r\n                        label: 'Marital Status',\r\n                        required: true,\r\n                        value: 'single',\r\n                        options: [\r\n                            { value: 'single', label: 'Single' },\r\n                            { value: 'married', label: 'Married' },\r\n                            { value: 'divorced', label: 'Divorced' },\r\n                            { value: 'widowed', label: 'Widowed' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        id: 'dependents',\r\n                        type: 'number',\r\n                        label: 'Number of Dependents',\r\n                        description: 'Children or others who depend on you financially',\r\n                        required: true,\r\n                        value: 0,\r\n                        validation: { min: 0, max: 10 }\r\n                    },\r\n                    {\r\n                        id: 'employmentStatus',\r\n                        type: 'select',\r\n                        label: 'Employment Status',\r\n                        required: true,\r\n                        value: 'employed',\r\n                        options: [\r\n                            { value: 'employed', label: 'Employed' },\r\n                            { value: 'self-employed', label: 'Self-Employed' },\r\n                            { value: 'unemployed', label: 'Unemployed' },\r\n                            { value: 'retired', label: 'Retired' },\r\n                            { value: 'student', label: 'Student' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        id: 'employmentTenure',\r\n                        type: 'number',\r\n                        label: 'Years at Current Job',\r\n                        description: 'How long have you been in your current position?',\r\n                        required: true,\r\n                        value: 3,\r\n                        validation: { min: 0, max: 50 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'income',\r\n                title: 'Income Sources',\r\n                description: 'All sources of monthly income',\r\n                fields: [\r\n                    {\r\n                        id: 'primarySalary',\r\n                        type: 'number',\r\n                        label: 'Primary Salary (Monthly)',\r\n                        description: 'Your main job salary after taxes',\r\n                        required: true,\r\n                        value: 5000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'secondaryIncome',\r\n                        type: 'number',\r\n                        label: 'Secondary Income (Monthly)',\r\n                        description: 'Part-time work, freelancing, side hustles',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 50 }\r\n                    },\r\n                    {\r\n                        id: 'businessIncome',\r\n                        type: 'number',\r\n                        label: 'Business Income (Monthly)',\r\n                        description: 'Net income from business ownership',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'investmentIncome',\r\n                        type: 'number',\r\n                        label: 'Investment Income (Monthly)',\r\n                        description: 'Dividends, interest, capital gains',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'rentalIncome',\r\n                        type: 'number',\r\n                        label: 'Rental Income (Monthly)',\r\n                        description: 'Net rental income from properties',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'benefitsIncome',\r\n                        type: 'number',\r\n                        label: 'Benefits Income (Monthly)',\r\n                        description: 'Social Security, disability, unemployment',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 50 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'expenses',\r\n                title: 'Monthly Expenses',\r\n                description: 'Break down your monthly spending',\r\n                fields: [\r\n                    {\r\n                        id: 'housing',\r\n                        type: 'number',\r\n                        label: 'Housing (Rent/Mortgage)',\r\n                        description: 'Monthly housing payment',\r\n                        required: true,\r\n                        value: 1500,\r\n                        validation: { min: 0, step: 50 }\r\n                    },\r\n                    {\r\n                        id: 'utilities',\r\n                        type: 'number',\r\n                        label: 'Utilities',\r\n                        description: 'Electric, gas, water, internet, phone',\r\n                        required: true,\r\n                        value: 200,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'food',\r\n                        type: 'number',\r\n                        label: 'Food & Groceries',\r\n                        description: 'Monthly food spending',\r\n                        required: true,\r\n                        value: 400,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'transportation',\r\n                        type: 'number',\r\n                        label: 'Transportation',\r\n                        description: 'Car payment, gas, insurance, public transit',\r\n                        required: true,\r\n                        value: 300,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'healthcare',\r\n                        type: 'number',\r\n                        label: 'Healthcare',\r\n                        description: 'Insurance premiums, copays, medications',\r\n                        required: true,\r\n                        value: 150,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'entertainment',\r\n                        type: 'number',\r\n                        label: 'Entertainment',\r\n                        description: 'Movies, subscriptions, hobbies',\r\n                        required: false,\r\n                        value: 100,\r\n                        validation: { min: 0, step: 25 }\r\n                    },\r\n                    {\r\n                        id: 'diningOut',\r\n                        type: 'number',\r\n                        label: 'Dining Out',\r\n                        description: 'Restaurants, takeout, coffee',\r\n                        required: false,\r\n                        value: 150,\r\n                        validation: { min: 0, step: 25 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'assets',\r\n                title: 'Assets & Savings',\r\n                description: 'Your current assets and investments',\r\n                fields: [\r\n                    {\r\n                        id: 'checking',\r\n                        type: 'number',\r\n                        label: 'Checking Account',\r\n                        description: 'Current balance in checking',\r\n                        required: true,\r\n                        value: 2000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'savings',\r\n                        type: 'number',\r\n                        label: 'Savings Account',\r\n                        description: 'Current savings balance',\r\n                        required: true,\r\n                        value: 5000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'emergencyFund',\r\n                        type: 'number',\r\n                        label: 'Emergency Fund',\r\n                        description: 'Funds specifically for emergencies',\r\n                        required: true,\r\n                        value: 3000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'employer401k',\r\n                        type: 'number',\r\n                        label: '401(k) Balance',\r\n                        description: 'Current 401k balance',\r\n                        required: false,\r\n                        value: 25000,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'traditionalIRA',\r\n                        type: 'number',\r\n                        label: 'Traditional IRA',\r\n                        description: 'Traditional IRA balance',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'rothIRA',\r\n                        type: 'number',\r\n                        label: 'Roth IRA',\r\n                        description: 'Roth IRA balance',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'brokerageAccounts',\r\n                        type: 'number',\r\n                        label: 'Brokerage Accounts',\r\n                        description: 'Taxable investment accounts',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 1000 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'liabilities',\r\n                title: 'Debts & Liabilities',\r\n                description: 'Your current debts and obligations',\r\n                fields: [\r\n                    {\r\n                        id: 'creditCardDebt',\r\n                        type: 'number',\r\n                        label: 'Credit Card Debt',\r\n                        description: 'Total credit card balances',\r\n                        required: true,\r\n                        value: 2000,\r\n                        validation: { min: 0, step: 100 }\r\n                    },\r\n                    {\r\n                        id: 'studentLoans',\r\n                        type: 'number',\r\n                        label: 'Student Loans',\r\n                        description: 'Total student loan debt',\r\n                        required: false,\r\n                        value: 15000,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'autoLoans',\r\n                        type: 'number',\r\n                        label: 'Auto Loans',\r\n                        description: 'Car loan balances',\r\n                        required: false,\r\n                        value: 8000,\r\n                        validation: { min: 0, step: 500 }\r\n                    },\r\n                    {\r\n                        id: 'mortgageBalance',\r\n                        type: 'number',\r\n                        label: 'Mortgage Balance',\r\n                        description: 'Remaining mortgage debt',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'personalLoans',\r\n                        type: 'number',\r\n                        label: 'Personal Loans',\r\n                        description: 'Other personal debt',\r\n                        required: false,\r\n                        value: 0,\r\n                        validation: { min: 0, step: 500 }\r\n                    },\r\n                    {\r\n                        id: 'creditScore',\r\n                        type: 'number',\r\n                        label: 'Credit Score',\r\n                        description: 'Your current credit score',\r\n                        required: true,\r\n                        value: 720,\r\n                        validation: { min: 300, max: 850 }\r\n                    },\r\n                    {\r\n                        id: 'totalCreditLimit',\r\n                        type: 'number',\r\n                        label: 'Total Credit Limit',\r\n                        description: 'Combined credit card limits',\r\n                        required: true,\r\n                        value: 10000,\r\n                        validation: { min: 0, step: 500 }\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            },\r\n            {\r\n                id: 'goals-behavior',\r\n                title: 'Goals & Behavior',\r\n                description: 'Your financial goals and habits',\r\n                fields: [\r\n                    {\r\n                        id: 'retirementAge',\r\n                        type: 'number',\r\n                        label: 'Target Retirement Age',\r\n                        description: 'When do you want to retire?',\r\n                        required: true,\r\n                        value: 65,\r\n                        validation: { min: 50, max: 80 }\r\n                    },\r\n                    {\r\n                        id: 'retirementIncomeNeeded',\r\n                        type: 'number',\r\n                        label: 'Monthly Retirement Income Goal',\r\n                        description: 'How much monthly income do you want in retirement?',\r\n                        required: true,\r\n                        value: 4000,\r\n                        validation: { min: 1000, step: 500 }\r\n                    },\r\n                    {\r\n                        id: 'emergencyFundTarget',\r\n                        type: 'number',\r\n                        label: 'Emergency Fund Target',\r\n                        description: 'Your target emergency fund amount',\r\n                        required: true,\r\n                        value: 10000,\r\n                        validation: { min: 1000, step: 1000 }\r\n                    },\r\n                    {\r\n                        id: 'monthlyInvestmentContribution',\r\n                        type: 'number',\r\n                        label: 'Monthly Investment Contribution',\r\n                        description: 'How much do you invest monthly?',\r\n                        required: true,\r\n                        value: 300,\r\n                        validation: { min: 0, step: 50 }\r\n                    },\r\n                    {\r\n                        id: 'riskTolerance',\r\n                        type: 'select',\r\n                        label: 'Risk Tolerance',\r\n                        required: true,\r\n                        value: 'moderate',\r\n                        options: [\r\n                            { value: 'conservative', label: 'Conservative - Prefer stability' },\r\n                            { value: 'moderate', label: 'Moderate - Balanced approach' },\r\n                            { value: 'aggressive', label: 'Aggressive - Higher risk for growth' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        id: 'billPaymentReliability',\r\n                        type: 'select',\r\n                        label: 'Bill Payment History',\r\n                        required: true,\r\n                        value: 'usually-on-time',\r\n                        options: [\r\n                            { value: 'always-on-time', label: 'Always pay on time' },\r\n                            { value: 'usually-on-time', label: 'Usually pay on time' },\r\n                            { value: 'sometimes-late', label: 'Sometimes pay late' },\r\n                            { value: 'often-late', label: 'Often pay late' }\r\n                        ]\r\n                    },\r\n                    {\r\n                        id: 'budgetingMethod',\r\n                        type: 'select',\r\n                        label: 'Budgeting Method',\r\n                        required: true,\r\n                        value: 'simple-tracking',\r\n                        options: [\r\n                            { value: 'detailed-budget', label: 'Detailed budget tracking' },\r\n                            { value: 'simple-tracking', label: 'Simple expense tracking' },\r\n                            { value: 'mental-budget', label: 'Mental budget only' },\r\n                            { value: 'no-budget', label: 'No budgeting' }\r\n                        ]\r\n                    }\r\n                ],\r\n                isComplete: false,\r\n                validationErrors: []\r\n            }\r\n        ];\r\n    }\r\n\r\n    private initializeFormData(): void {\r\n        // Initialize with default values from form fields\r\n        this.formData = {\r\n            personalInfo: {\r\n                age: 30,\r\n                maritalStatus: 'single',\r\n                dependents: 0,\r\n                state: 'CA',\r\n                employmentStatus: 'employed',\r\n                employmentTenure: 3,\r\n                healthStatus: 'good',\r\n                healthInsurance: true,\r\n                lifeInsurance: false,\r\n                shortTermDisability: false,\r\n                longTermDisability: false\r\n            },\r\n            income: {\r\n                primarySalary: 5000,\r\n                secondaryIncome: 0,\r\n                businessIncome: 0,\r\n                investmentIncome: 0,\r\n                rentalIncome: 0,\r\n                benefitsIncome: 0,\r\n                otherIncome: 0,\r\n                incomeGrowthRate: 3,\r\n                incomeVariability: 'stable',\r\n                effectiveTaxRate: 22\r\n            },\r\n            expenses: {\r\n                housing: 1500,\r\n                utilities: 200,\r\n                insurance: 150,\r\n                loanPayments: 400,\r\n                childcare: 0,\r\n                food: 400,\r\n                transportation: 300,\r\n                healthcare: 150,\r\n                clothing: 100,\r\n                personalCare: 50,\r\n                entertainment: 100,\r\n                diningOut: 150,\r\n                hobbies: 50,\r\n                subscriptions: 50,\r\n                shopping: 100,\r\n                travel: 200,\r\n                creditCardPayments: 100,\r\n                studentLoanPayments: 200,\r\n                otherDebtPayments: 100\r\n            },\r\n            assets: {\r\n                checking: 2000,\r\n                savings: 5000,\r\n                moneyMarket: 0,\r\n                emergencyFund: 3000,\r\n                employer401k: 25000,\r\n                traditionalIRA: 0,\r\n                rothIRA: 0,\r\n                brokerageAccounts: 0,\r\n                stocks: 0,\r\n                bonds: 0,\r\n                mutualFunds: 0,\r\n                primaryResidence: 0,\r\n                investmentProperties: 0,\r\n                cryptocurrency: 0,\r\n                preciousMetals: 0,\r\n                collectibles: 0,\r\n                businessEquity: 0,\r\n                otherAssets: 0\r\n            },\r\n            liabilities: {\r\n                mortgageBalance: 0,\r\n                homeEquityLoan: 0,\r\n                autoLoans: 8000,\r\n                securedCreditLines: 0,\r\n                creditCardDebt: 2000,\r\n                personalLoans: 0,\r\n                studentLoans: 15000,\r\n                medicalDebt: 0,\r\n                businessLoans: 0,\r\n                businessCreditLines: 0,\r\n                taxDebt: 0,\r\n                legalJudgments: 0,\r\n                otherDebt: 0,\r\n                creditScore: 720,\r\n                totalCreditLimit: 10000\r\n            },\r\n            insurance: {\r\n                healthInsurance: true,\r\n                healthDeductible: 2000,\r\n                healthOutOfPocketMax: 6000,\r\n                lifeInsurance: false,\r\n                lifeCoverageAmount: 0,\r\n                shortTermDisability: false,\r\n                longTermDisability: false,\r\n                disabilityCoveragePercent: 0,\r\n                homeInsurance: false,\r\n                autoInsurance: true,\r\n                umbrellaPolicy: false,\r\n                insuranceConfidence: 'somewhat-confident'\r\n            },\r\n            goals: {\r\n                emergencyFundTarget: 10000,\r\n                debtPayoffGoal: true,\r\n                majorPurchaseAmount: 5000,\r\n                homeDownPayment: 0,\r\n                educationFunding: 0,\r\n                careerChangeBuffer: 0,\r\n                retirementAge: 65,\r\n                retirementIncomeNeeded: 4000,\r\n                legacyGoalAmount: 0,\r\n                retirementConfidence: 'somewhat-confident',\r\n                longTermGoalConfidence: 'somewhat-confident',\r\n                riskTolerance: 'moderate',\r\n                investmentExperience: 'intermediate'\r\n            },\r\n            behaviors: {\r\n                billPaymentReliability: 'usually-on-time',\r\n                budgetingMethod: 'simple-tracking',\r\n                financialPlanningEngagement: 'occasionally-plan',\r\n                automaticSavings: true,\r\n                monthlyInvestmentContribution: 300,\r\n                emergencyFundPriority: 'high',\r\n                impulseSpendingFrequency: 'sometimes',\r\n                expenseTrackingMethod: 'casual'\r\n            }\r\n        };\r\n    }\r\n\r\n    private render(): void {\r\n        this.container.innerHTML = `\r\n            <div class=\"multi-step-form\">\r\n                <div class=\"form-progress\">\r\n                    <div class=\"progress-bar\">\r\n                        <div class=\"progress-fill\" style=\"width: ${((this.currentStepIndex + 1) / this.steps.length) * 100}%\"></div>\r\n                    </div>\r\n                    <div class=\"progress-text\">Step ${this.currentStepIndex + 1} of ${this.steps.length}</div>\r\n                </div>\r\n                \r\n                <div class=\"form-step-content\">\r\n                    ${this.renderCurrentStep()}\r\n                </div>\r\n                \r\n                <div class=\"form-navigation\">\r\n                    <button class=\"btn-secondary\" id=\"prevBtn\" ${this.currentStepIndex === 0 ? 'disabled' : ''}>\r\n                        Previous\r\n                    </button>\r\n                    <button class=\"btn-primary\" id=\"nextBtn\">\r\n                        ${this.currentStepIndex === this.steps.length - 1 ? 'Complete Analysis' : 'Next'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        this.attachEventListeners();\r\n    }\r\n\r\n    private renderCurrentStep(): string {\r\n        const step = this.steps[this.currentStepIndex];\r\n        \r\n        return `\r\n            <div class=\"step-header\">\r\n                <h2>${step.title}</h2>\r\n                <p>${step.description}</p>\r\n            </div>\r\n            \r\n            <div class=\"step-fields\">\r\n                ${step.fields.map(field => this.renderField(field)).join('')}\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    private renderField(field: FormField): string {\r\n        const value = this.getFieldValue(field.id);\r\n        \r\n        switch (field.type) {\r\n            case 'number':\r\n                return `\r\n                    <div class=\"form-field\">\r\n                        <label for=\"${field.id}\">\r\n                            ${field.label}\r\n                            ${field.required ? '<span class=\"required\">*</span>' : ''}\r\n                        </label>\r\n                        ${field.description ? `<p class=\"field-description\">${field.description}</p>` : ''}\r\n                        <input \r\n                            type=\"number\" \r\n                            id=\"${field.id}\" \r\n                            name=\"${field.id}\"\r\n                            value=\"${value}\"\r\n                            ${field.required ? 'required' : ''}\r\n                            ${field.validation?.min !== undefined ? `min=\"${field.validation.min}\"` : ''}\r\n                            ${field.validation?.max !== undefined ? `max=\"${field.validation.max}\"` : ''}\r\n                            ${field.validation?.step !== undefined ? `step=\"${field.validation.step}\"` : ''}\r\n                        />\r\n                    </div>\r\n                `;\r\n            \r\n            case 'select':\r\n                return `\r\n                    <div class=\"form-field\">\r\n                        <label for=\"${field.id}\">\r\n                            ${field.label}\r\n                            ${field.required ? '<span class=\"required\">*</span>' : ''}\r\n                        </label>\r\n                        ${field.description ? `<p class=\"field-description\">${field.description}</p>` : ''}\r\n                        <select id=\"${field.id}\" name=\"${field.id}\" ${field.required ? 'required' : ''}>\r\n                            ${field.options?.map(option => \r\n                                `<option value=\"${option.value}\" ${value === option.value ? 'selected' : ''}>${option.label}</option>`\r\n                            ).join('')}\r\n                        </select>\r\n                    </div>\r\n                `;\r\n            \r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n    private getFieldValue(fieldId: string): any {\r\n        // Get value from form data based on field ID\r\n        const currentStep = this.steps[this.currentStepIndex];\r\n        const field = currentStep.fields.find(f => f.id === fieldId);\r\n        return field?.value || '';\r\n    }\r\n\r\n    private attachEventListeners(): void {\r\n        const prevBtn = this.container.querySelector('#prevBtn') as HTMLButtonElement;\r\n        const nextBtn = this.container.querySelector('#nextBtn') as HTMLButtonElement;\r\n\r\n        prevBtn?.addEventListener('click', () => this.previousStep());\r\n        nextBtn?.addEventListener('click', () => this.nextStep());\r\n\r\n        // Add input event listeners for real-time validation\r\n        const inputs = this.container.querySelectorAll('input, select');\r\n        inputs.forEach(input => {\r\n            input.addEventListener('change', (e) => this.handleFieldChange(e));\r\n        });\r\n    }\r\n\r\n    private handleFieldChange(event: Event): void {\r\n        const input = event.target as HTMLInputElement | HTMLSelectElement;\r\n        const fieldId = input.id;\r\n        const value = input.type === 'number' ? parseFloat(input.value) : input.value;\r\n        \r\n        // Update the field value in the current step\r\n        const currentStep = this.steps[this.currentStepIndex];\r\n        const field = currentStep.fields.find(f => f.id === fieldId);\r\n        if (field) {\r\n            field.value = value;\r\n        }\r\n\r\n        // Update the form data structure\r\n        this.updateFormData(fieldId, value);\r\n        \r\n        // Trigger data change callback\r\n        this.onDataChange?.(this.formData);\r\n    }\r\n\r\n    private updateFormData(fieldId: string, value: any): void {\r\n        // Update the nested form data structure based on field ID\r\n        const currentStepId = this.steps[this.currentStepIndex].id;\r\n        \r\n        switch (currentStepId) {\r\n            case 'personal-info':\r\n                if (!this.formData.personalInfo) this.formData.personalInfo = {} as any;\r\n                (this.formData.personalInfo as any)[fieldId] = value;\r\n                break;\r\n            case 'income':\r\n                if (!this.formData.income) this.formData.income = {} as any;\r\n                (this.formData.income as any)[fieldId] = value;\r\n                break;\r\n            case 'expenses':\r\n                if (!this.formData.expenses) this.formData.expenses = {} as any;\r\n                (this.formData.expenses as any)[fieldId] = value;\r\n                break;\r\n            case 'assets':\r\n                if (!this.formData.assets) this.formData.assets = {} as any;\r\n                (this.formData.assets as any)[fieldId] = value;\r\n                break;\r\n            case 'liabilities':\r\n                if (!this.formData.liabilities) this.formData.liabilities = {} as any;\r\n                (this.formData.liabilities as any)[fieldId] = value;\r\n                break;\r\n            case 'goals-behavior':\r\n                if (fieldId === 'retirementAge' || fieldId === 'retirementIncomeNeeded' || fieldId === 'emergencyFundTarget' || fieldId === 'riskTolerance') {\r\n                    if (!this.formData.goals) this.formData.goals = {} as any;\r\n                    (this.formData.goals as any)[fieldId] = value;\r\n                } else if (fieldId === 'monthlyInvestmentContribution' || fieldId === 'billPaymentReliability' || fieldId === 'budgetingMethod') {\r\n                    if (!this.formData.behaviors) this.formData.behaviors = {} as any;\r\n                    (this.formData.behaviors as any)[fieldId] = value;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    private validateCurrentStep(): boolean {\r\n        const currentStep = this.steps[this.currentStepIndex];\r\n        const errors: string[] = [];\r\n\r\n        for (const field of currentStep.fields) {\r\n            // Allow 0 as a valid value for number fields\r\n            if (field.required && (field.value === undefined || field.value === null || \r\n                (field.value === '' && field.type !== 'number') || \r\n                (field.type === 'number' && isNaN(Number(field.value))))) {\r\n                errors.push(`${field.label} is required`);\r\n            }\r\n            \r\n            if (field.type === 'number' && field.validation && field.value !== undefined && field.value !== null && field.value !== '') {\r\n                const numValue = parseFloat(field.value);\r\n                if (!isNaN(numValue)) {\r\n                    if (field.validation.min !== undefined && numValue < field.validation.min) {\r\n                        errors.push(`${field.label} must be at least ${field.validation.min}`);\r\n                    }\r\n                    if (field.validation.max !== undefined && numValue > field.validation.max) {\r\n                        errors.push(`${field.label} must be at most ${field.validation.max}`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        currentStep.validationErrors = errors;\r\n        currentStep.isComplete = errors.length === 0;\r\n        \r\n        return errors.length === 0;\r\n    }\r\n\r\n    private previousStep(): void {\r\n        if (this.currentStepIndex > 0) {\r\n            this.currentStepIndex--;\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    private nextStep(): void {\r\n        if (this.validateCurrentStep()) {\r\n            if (this.currentStepIndex === this.steps.length - 1) {\r\n                // Complete the form\r\n                this.completeForm();\r\n            } else {\r\n                this.currentStepIndex++;\r\n                this.render();\r\n            }\r\n        } else {\r\n            // Show validation errors\r\n            this.showValidationErrors();\r\n        }\r\n    }\r\n\r\n    private showValidationErrors(): void {\r\n        const currentStep = this.steps[this.currentStepIndex];\r\n        if (currentStep.validationErrors.length > 0) {\r\n            alert('Please fix the following errors:\\n' + currentStep.validationErrors.join('\\n'));\r\n        }\r\n    }\r\n\r\n    private completeForm(): void {\r\n        if (this.isFormComplete()) {\r\n            this.onComplete?.(this.formData as UserFinancialData);\r\n        }\r\n    }\r\n\r\n    private isFormComplete(): boolean {\r\n        return this.steps.every(step => step.isComplete);\r\n    }\r\n\r\n    public getCurrentData(): Partial<UserFinancialData> {\r\n        return this.formData;\r\n    }\r\n} ","/**\r\n * Quick Analysis Form Component\r\n * Simplified form requiring only essential financial inputs\r\n */\r\n\r\nimport { UserFinancialData } from '../../interfaces/core-types';\r\n\r\nexport class QuickAnalysisForm {\r\n    private container: HTMLElement;\r\n    private onSubmit: (data: UserFinancialData) => void;\r\n\r\n    constructor(containerId: string, onSubmit: (data: UserFinancialData) => void) {\r\n        const element = document.getElementById(containerId);\r\n        if (!element) {\r\n            throw new Error(`Element with ID ${containerId} not found`);\r\n        }\r\n        this.container = element;\r\n        this.onSubmit = onSubmit;\r\n    }\r\n\r\n    public render(): void {\r\n        this.container.innerHTML = this.generateHTML();\r\n        this.attachEventListeners();\r\n    }\r\n\r\n    private generateHTML(): string {\r\n        return `\r\n            <div class=\"quick-analysis-form\">\r\n                <div class=\"form-header\">\r\n                    <h2>Quick Financial Health Check</h2>\r\n                    <p class=\"form-description\">\r\n                        Get a comprehensive financial analysis with just 6 essential inputs. \r\n                        Takes less than 2 minutes to complete.\r\n                    </p>\r\n                    <div class=\"progress-indicator\">\r\n                        <div class=\"progress-bar\">\r\n                            <div class=\"progress-fill\" id=\"formProgress\"></div>\r\n                        </div>\r\n                        <p class=\"progress-text\">Complete all fields to analyze</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <form id=\"quickAnalysisForm\" class=\"quick-form\">\r\n                    <div class=\"form-grid\">\r\n                        <div class=\"form-field\" data-field=\"income\">\r\n                            <label for=\"monthlyIncome\" class=\"field-label\">\r\n                                <span class=\"label-text\">Monthly Take-Home Income</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Your salary after taxes and deductions\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\" \r\n                                       id=\"monthlyIncome\" \r\n                                       name=\"monthlyIncome\" \r\n                                       placeholder=\"5,000\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Your monthly income after taxes and deductions</p>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"housing\">\r\n                            <label for=\"monthlyHousing\" class=\"field-label\">\r\n                                <span class=\"label-text\">Monthly Housing Cost</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Rent or mortgage payment\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\"\r\n                                       id=\"monthlyHousing\" \r\n                                       name=\"monthlyHousing\" \r\n                                       placeholder=\"1,500\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Rent or mortgage payment (excluding utilities)</p>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"expenses\">\r\n                            <label for=\"monthlyExpenses\" class=\"field-label\">\r\n                                <span class=\"label-text\">Other Monthly Expenses</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Food, transportation, utilities, entertainment, etc.\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\"\r\n                                       id=\"monthlyExpenses\" \r\n                                       name=\"monthlyExpenses\" \r\n                                       placeholder=\"2,000\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Food, transportation, utilities, entertainment, etc.</p>\r\n                            <div class=\"expense-breakdown\">\r\n                                <small>Typical breakdown: Food (30%), Transportation (25%), Utilities (15%), Other (30%)</small>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"savings\">\r\n                            <label for=\"totalSavings\" class=\"field-label\">\r\n                                <span class=\"label-text\">Total Savings & Emergency Fund</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"All liquid savings including emergency fund\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\"\r\n                                       id=\"totalSavings\" \r\n                                       name=\"totalSavings\" \r\n                                       placeholder=\"15,000\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Checking, savings, emergency fund (liquid assets)</p>\r\n                            <div class=\"savings-indicator\">\r\n                                <small>Emergency fund goal: <span id=\"emergencyGoal\">--</span> months of expenses</small>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"debt\">\r\n                            <label for=\"totalDebt\" class=\"field-label\">\r\n                                <span class=\"label-text\">Total Debt</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Credit cards, student loans, car loans (excluding mortgage)\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <span class=\"currency-symbol\">$</span>\r\n                                <input type=\"text\"\r\n                                       inputmode=\"decimal\"\r\n                                       id=\"totalDebt\" \r\n                                       name=\"totalDebt\" \r\n                                       placeholder=\"25,000\"\r\n                                       min=\"0\" \r\n                                       required \r\n                                       class=\"field-input currency-input\"\r\n                                       data-format=\"currency\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Credit cards, student loans, car loans (excluding mortgage)</p>\r\n                            <div class=\"debt-ratio-indicator\">\r\n                                <small>Debt-to-income ratio: <span id=\"debtRatio\">--</span></small>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-field\" data-field=\"credit\">\r\n                            <label for=\"creditScore\" class=\"field-label\">\r\n                                <span class=\"label-text\">Credit Score</span>\r\n                                <span class=\"required\">*</span>\r\n                                <span class=\"help-icon\" data-tooltip=\"Your current credit score (300-850)\">?</span>\r\n                            </label>\r\n                            <div class=\"input-wrapper\">\r\n                                <input type=\"number\" \r\n                                       id=\"creditScore\" \r\n                                       name=\"creditScore\" \r\n                                       placeholder=\"720\"\r\n                                       min=\"300\" \r\n                                       max=\"850\" \r\n                                       required \r\n                                       class=\"field-input\">\r\n                                <div class=\"input-feedback\"></div>\r\n                            </div>\r\n                            <p class=\"field-help\">Your current credit score (300-850)</p>\r\n                            <div class=\"credit-range\">\r\n                                <div class=\"range-indicator\">\r\n                                    <span class=\"range poor\">300-579</span>\r\n                                    <span class=\"range fair\">580-669</span>\r\n                                    <span class=\"range good\">670-739</span>\r\n                                    <span class=\"range excellent\">740-850</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-actions\">\r\n                        <button type=\"submit\" class=\"btn btn-primary btn-large\" id=\"analyzeButton\" disabled>\r\n                            <span class=\"btn-icon\">📊</span>\r\n                            <span class=\"btn-text\">Analyze My Financial Health</span>\r\n                            <div class=\"btn-loader\" style=\"display: none;\">\r\n                                <div class=\"spinner\"></div>\r\n                            </div>\r\n                        </button>\r\n                        <p class=\"analysis-note\">\r\n                            Get instant insights into your financial health with personalized recommendations\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div class=\"validation-errors\" id=\"validationErrors\" style=\"display: none;\">\r\n                        <!-- Error messages will be inserted here -->\r\n                    </div>\r\n                </form>\r\n\r\n                <div class=\"form-benefits\">\r\n                    <h3>What You'll Get:</h3>\r\n                    <ul class=\"benefits-list\">\r\n                        <li>\r\n                            <span class=\"benefit-icon\">📈</span>\r\n                            <span>Overall Financial Health Score based on your actual data</span>\r\n                        </li>\r\n                        <li>\r\n                            <span class=\"benefit-icon\">💡</span>\r\n                            <span>8 Key Health Indicators with clear explanations</span>\r\n                        </li>\r\n                        <li>\r\n                            <span class=\"benefit-icon\">🎯</span>\r\n                            <span>Prioritized action recommendations</span>\r\n                        </li>\r\n                        <li>\r\n                            <span class=\"benefit-icon\">📊</span>\r\n                            <span>Comparison to people in your age and income group</span>\r\n                        </li>\r\n                        <li>\r\n                            <span class=\"benefit-icon\">🔮</span>\r\n                            <span>Projections for your financial future</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    private attachEventListeners(): void {\r\n        const form = this.container.querySelector('#quickAnalysisForm') as HTMLFormElement;\r\n        if (form) {\r\n            form.addEventListener('submit', (event) => {\r\n                event.preventDefault();\r\n                this.handleSubmit();\r\n            });\r\n\r\n            // Add real-time validation and feedback\r\n            const inputs = form.querySelectorAll('input[required]');\r\n            inputs.forEach(input => {\r\n                input.addEventListener('input', (event) => {\r\n                    this.handleInputChange(event.target as HTMLInputElement);\r\n                });\r\n                \r\n                input.addEventListener('blur', (event) => {\r\n                    const target = event.target as HTMLInputElement;\r\n                    // Format currency on blur\r\n                    if (target.dataset.format === 'currency') {\r\n                        this.formatCurrencyInput(target);\r\n                    }\r\n                    this.validateField(target);\r\n                });\r\n            });\r\n\r\n            // Add tooltips\r\n            this.attachTooltips();\r\n        }\r\n    }\r\n\r\n    private handleInputChange(_input: HTMLInputElement): void {\r\n        // DO NOT format currency on every input, as it interferes with typing.\r\n        // Formatting is now handled on the 'blur' event.\r\n\r\n        // Update real-time calculations\r\n        this.updateRealTimeCalculations();\r\n        \r\n        // Update progress\r\n        this.updateProgress();\r\n        \r\n        // Enable/disable submit button\r\n        this.updateSubmitButton();\r\n    }\r\n\r\n    private formatCurrencyInput(input: HTMLInputElement): void {\r\n        // First, strip any non-digit characters except for a decimal point\r\n        const value = input.value.replace(/[^0-9.]/g, '');\r\n        const numericValue = parseFloat(value) || 0;\r\n\r\n        if (numericValue > 0) {\r\n            // Format to a string with commas, but no fractional digits for simplicity\r\n            input.value = numericValue.toLocaleString('en-US', {\r\n                maximumFractionDigits: 0,\r\n            });\r\n        } else {\r\n            // Clear the input if it's zero or invalid\r\n            input.value = '';\r\n        }\r\n    }\r\n\r\n    private updateRealTimeCalculations(): void {\r\n        const income = this.getNumericValue('monthlyIncome');\r\n        const housing = this.getNumericValue('monthlyHousing');\r\n        const expenses = this.getNumericValue('monthlyExpenses');\r\n        const savings = this.getNumericValue('totalSavings');\r\n        const debt = this.getNumericValue('totalDebt');\r\n\r\n        // Update emergency fund months\r\n        const totalExpenses = housing + expenses;\r\n        if (totalExpenses > 0 && savings > 0) {\r\n            const emergencyMonths = (savings / totalExpenses).toFixed(1);\r\n            const emergencyGoal = document.getElementById('emergencyGoal');\r\n            if (emergencyGoal) {\r\n                emergencyGoal.textContent = emergencyMonths;\r\n                emergencyGoal.className = parseFloat(emergencyMonths) >= 3 ? 'good' : 'needs-improvement';\r\n            }\r\n        }\r\n\r\n        // Update debt-to-income ratio\r\n        if (income > 0 && debt > 0) {\r\n            const annualIncome = income * 12;\r\n            const debtRatio = ((debt / annualIncome) * 100).toFixed(1);\r\n            const debtRatioElement = document.getElementById('debtRatio');\r\n            if (debtRatioElement) {\r\n                debtRatioElement.textContent = `${debtRatio}%`;\r\n                debtRatioElement.className = parseFloat(debtRatio) <= 36 ? 'good' : 'needs-improvement';\r\n            }\r\n        }\r\n    }\r\n\r\n    private getNumericValue(fieldName: string): number {\r\n        const input = document.getElementById(fieldName) as HTMLInputElement;\r\n        // Strip commas and currency symbols for accurate parsing\r\n        return input ? parseFloat(input.value.replace(/[^0-9.-]/g, '')) || 0 : 0;\r\n    }\r\n\r\n    private updateProgress(): void {\r\n        const form = this.container.querySelector('#quickAnalysisForm') as HTMLFormElement;\r\n        const inputs = form.querySelectorAll('input[required]');\r\n        let completedFields = 0;\r\n\r\n        inputs.forEach(input => {\r\n            if ((input as HTMLInputElement).value.trim() !== '') {\r\n                completedFields++;\r\n            }\r\n        });\r\n\r\n        const progress = (completedFields / inputs.length) * 100;\r\n        const progressFill = document.getElementById('formProgress');\r\n        const progressText = this.container.querySelector('.progress-text');\r\n        \r\n        if (progressFill) {\r\n            progressFill.style.width = `${progress}%`;\r\n        }\r\n        \r\n        if (progressText) {\r\n            if (progress === 100) {\r\n                progressText.textContent = 'Ready to analyze!';\r\n            } else {\r\n                progressText.textContent = `${completedFields}/${inputs.length} fields completed`;\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateSubmitButton(): void {\r\n        const form = this.container.querySelector('#quickAnalysisForm') as HTMLFormElement;\r\n        const button = document.getElementById('analyzeButton') as HTMLButtonElement;\r\n        const inputs = form.querySelectorAll('input[required]');\r\n        \r\n        let allValid = true;\r\n        inputs.forEach(input => {\r\n            const htmlInput = input as HTMLInputElement;\r\n            if (!htmlInput.value.trim() || !htmlInput.checkValidity()) {\r\n                allValid = false;\r\n            }\r\n        });\r\n\r\n        button.disabled = !allValid;\r\n        button.classList.toggle('ready', allValid);\r\n    }\r\n\r\n    private validateField(input: HTMLInputElement): void {\r\n        const fieldContainer = input.closest('.form-field');\r\n        const feedback = fieldContainer?.querySelector('.input-feedback');\r\n        \r\n        if (!feedback) return;\r\n\r\n        let isValid = true;\r\n        let message = '';\r\n\r\n        const value = this.getNumericValue(input.name);\r\n        const fieldName = input.name;\r\n\r\n        // Basic validation\r\n        if (input.required && !input.value.trim()) {\r\n            isValid = false;\r\n            message = 'This field is required';\r\n        } else if (value < 0) {\r\n            isValid = false;\r\n            message = 'Value cannot be negative';\r\n        } else {\r\n            // Field-specific validation (only for hard rules)\r\n            switch (fieldName) {\r\n                case 'creditScore':\r\n                    if (value < 300 || value > 850) {\r\n                        isValid = false;\r\n                        message = 'Credit score must be between 300 and 850';\r\n                    }\r\n                    break;\r\n                // REMOVED: Subjective validation for income and housing to prevent incorrect limits.\r\n                // The user should be able to input any realistic value without warnings\r\n                // that could be misinterpreted as errors.\r\n            }\r\n        }\r\n\r\n        // Update field appearance\r\n        fieldContainer?.classList.toggle('field-valid', isValid);\r\n        fieldContainer?.classList.toggle('field-error', !isValid);\r\n        \r\n        if (feedback) {\r\n            feedback.textContent = message;\r\n            (feedback as HTMLElement).style.display = message ? 'block' : 'none';\r\n        }\r\n    }\r\n\r\n    private attachTooltips(): void {\r\n        const helpIcons = this.container.querySelectorAll('.help-icon');\r\n        helpIcons.forEach(icon => {\r\n            icon.addEventListener('mouseenter', (event) => {\r\n                const tooltipText = (event.target as HTMLElement).dataset.tooltip;\r\n                if (tooltipText) {\r\n                    this.showTooltip(event.target as HTMLElement, tooltipText);\r\n                }\r\n            });\r\n\r\n            icon.addEventListener('mouseleave', () => {\r\n                this.hideTooltip();\r\n            });\r\n        });\r\n    }\r\n\r\n    private showTooltip(element: HTMLElement, text: string): void {\r\n        // Ensure no old tooltips are lingering\r\n        this.hideTooltip();\r\n\r\n        const tooltip = document.createElement('div');\r\n        tooltip.className = 'tooltip';\r\n        tooltip.textContent = text;\r\n        document.body.appendChild(tooltip);\r\n\r\n        const rect = element.getBoundingClientRect();\r\n        // Position tooltip relative to the document, not the viewport\r\n        const top = rect.top + window.scrollY - 10;\r\n        const left = rect.left + rect.width / 2;\r\n\r\n        tooltip.style.left = `${left}px`;\r\n        tooltip.style.top = `${top}px`;\r\n        tooltip.style.transform = 'translate(-50%, -100%)';\r\n    }\r\n\r\n    private hideTooltip(): void {\r\n        const tooltip = document.querySelector('.tooltip');\r\n        if (tooltip) {\r\n            tooltip.remove();\r\n        }\r\n    }\r\n\r\n    private handleSubmit(): void {\r\n        const form = this.container.querySelector('#quickAnalysisForm') as HTMLFormElement;\r\n        const formData = new FormData(form);\r\n        \r\n        // Show loading state\r\n        const button = document.getElementById('analyzeButton') as HTMLButtonElement;\r\n        const btnText = button.querySelector('.btn-text');\r\n        const btnLoader = button.querySelector('.btn-loader');\r\n        \r\n        if (btnText && btnLoader) {\r\n            (btnText as HTMLElement).style.display = 'none';\r\n            (btnLoader as HTMLElement).style.display = 'block';\r\n        }\r\n        button.disabled = true;\r\n        \r\n        // Validate all fields and collect specific error messages\r\n        const inputs = form.querySelectorAll('input[required]');\r\n        const errors: string[] = [];\r\n        \r\n        inputs.forEach(input => {\r\n            this.validateField(input as HTMLInputElement);\r\n            const fieldContainer = (input as HTMLInputElement).closest('.form-field');\r\n            if (fieldContainer?.classList.contains('field-error')) {\r\n                const feedback = fieldContainer.querySelector('.input-feedback');\r\n                if (feedback && feedback.textContent) {\r\n                    const label = fieldContainer.querySelector('.label-text')?.textContent || 'Field';\r\n                    errors.push(`<strong>${label}:</strong> ${feedback.textContent}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (errors.length > 0) {\r\n            this.showValidationErrors(errors);\r\n            this.resetSubmitButton();\r\n            return;\r\n        }\r\n\r\n        // Hide errors if all are fixed\r\n        const errorContainer = this.container.querySelector('#validationErrors') as HTMLElement;\r\n        if (errorContainer) {\r\n            errorContainer.style.display = 'none';\r\n        }\r\n\r\n        // Build UserFinancialData from user inputs (NO DEFAULT VALUES)\r\n        const userData = this.buildUserDataFromForm(formData);\r\n        \r\n        // Log the actual data being used for analysis\r\n        console.log('🔍 Quick Analysis - Using actual user data:', {\r\n            monthlyIncome: userData.income.primarySalary,\r\n            monthlyHousing: userData.expenses.housing,\r\n            monthlyExpenses: userData.expenses.food + userData.expenses.transportation + userData.expenses.utilities,\r\n            totalSavings: userData.assets.checking + userData.assets.savings + userData.assets.emergencyFund,\r\n            totalDebt: userData.liabilities.creditCardDebt + userData.liabilities.autoLoans + userData.liabilities.studentLoans,\r\n            creditScore: userData.liabilities.creditScore\r\n        });\r\n        \r\n        this.onSubmit(userData);\r\n    }\r\n\r\n    private resetSubmitButton(): void {\r\n        const button = document.getElementById('analyzeButton') as HTMLButtonElement;\r\n        const btnText = button.querySelector('.btn-text');\r\n        const btnLoader = button.querySelector('.btn-loader');\r\n        \r\n        if (btnText && btnLoader) {\r\n            (btnText as HTMLElement).style.display = 'block';\r\n            (btnLoader as HTMLElement).style.display = 'none';\r\n        }\r\n        button.disabled = false;\r\n    }\r\n\r\n    private buildUserDataFromForm(formData: FormData): UserFinancialData {\r\n        // Get actual user inputs (remove any commas from formatted currency)\r\n        const monthlyIncome = parseFloat((formData.get('monthlyIncome') as string).replace(/[,$]/g, '')) || 0;\r\n        const monthlyHousing = parseFloat((formData.get('monthlyHousing') as string).replace(/[,$]/g, '')) || 0;\r\n        const monthlyExpenses = parseFloat((formData.get('monthlyExpenses') as string).replace(/[,$]/g, '')) || 0;\r\n        const totalSavings = parseFloat((formData.get('totalSavings') as string).replace(/[,$]/g, '')) || 0;\r\n        const totalDebt = parseFloat((formData.get('totalDebt') as string).replace(/[,$]/g, '')) || 0;\r\n        const creditScore = parseFloat((formData.get('creditScore') as string)) || 300; // Minimum valid credit score\r\n\r\n        // Validate that we have actual user data\r\n        if (monthlyIncome === 0) {\r\n            throw new Error('Monthly income is required and cannot be zero');\r\n        }\r\n\r\n        // Build comprehensive data structure using ONLY user inputs with intelligent allocation\r\n        return {\r\n            personalInfo: {\r\n                age: 35, // Reasonable default for calculations\r\n                maritalStatus: 'single',\r\n                dependents: 0,\r\n                state: 'CA',\r\n                employmentStatus: 'employed',\r\n                employmentTenure: 3,\r\n                healthStatus: 'good',\r\n                healthInsurance: true,\r\n                lifeInsurance: false,\r\n                shortTermDisability: false,\r\n                longTermDisability: false\r\n            },\r\n            income: {\r\n                primarySalary: monthlyIncome, // USER INPUT\r\n                secondaryIncome: 0,\r\n                businessIncome: 0,\r\n                investmentIncome: 0,\r\n                rentalIncome: 0,\r\n                benefitsIncome: 0,\r\n                otherIncome: 0,\r\n                incomeGrowthRate: 0.03,\r\n                incomeVariability: 'stable',\r\n                effectiveTaxRate: 0.22\r\n            },\r\n            expenses: {\r\n                housing: monthlyHousing, // USER INPUT\r\n                utilities: Math.round(monthlyExpenses * 0.15), // Based on user's total expenses\r\n                insurance: Math.round(monthlyExpenses * 0.10),\r\n                loanPayments: Math.round(totalDebt * 0.02), // Based on user's debt\r\n                childcare: 0,\r\n                food: Math.round(monthlyExpenses * 0.30), // Based on user's total expenses\r\n                transportation: Math.round(monthlyExpenses * 0.25),\r\n                healthcare: Math.round(monthlyExpenses * 0.08),\r\n                clothing: Math.round(monthlyExpenses * 0.05),\r\n                personalCare: Math.round(monthlyExpenses * 0.03),\r\n                entertainment: Math.round(monthlyExpenses * 0.10),\r\n                diningOut: Math.round(monthlyExpenses * 0.08),\r\n                hobbies: Math.round(monthlyExpenses * 0.04),\r\n                subscriptions: Math.round(monthlyExpenses * 0.02),\r\n                shopping: Math.round(monthlyExpenses * 0.06),\r\n                travel: Math.round(monthlyExpenses * 0.08),\r\n                creditCardPayments: Math.round(totalDebt * 0.015), // Based on user's debt\r\n                studentLoanPayments: Math.round(totalDebt * 0.005),\r\n                otherDebtPayments: 0\r\n            },\r\n            assets: {\r\n                checking: Math.round(totalSavings * 0.20), // Based on user's savings\r\n                savings: Math.round(totalSavings * 0.50),\r\n                moneyMarket: 0,\r\n                emergencyFund: Math.round(totalSavings * 0.30),\r\n                employer401k: Math.round(monthlyIncome * 12 * 2), // Based on user's income\r\n                traditionalIRA: 0,\r\n                rothIRA: 0,\r\n                brokerageAccounts: Math.round(totalSavings * 0.10),\r\n                stocks: 0,\r\n                bonds: 0,\r\n                mutualFunds: 0,\r\n                primaryResidence: monthlyHousing * 200, // Based on user's housing cost\r\n                investmentProperties: 0,\r\n                cryptocurrency: 0,\r\n                preciousMetals: 0,\r\n                collectibles: 0,\r\n                businessEquity: 0,\r\n                otherAssets: 0\r\n            },\r\n            liabilities: {\r\n                mortgageBalance: monthlyHousing > 1000 ? monthlyHousing * 150 : 0, // Based on user's housing\r\n                homeEquityLoan: 0,\r\n                autoLoans: Math.round(totalDebt * 0.30), // Based on user's debt\r\n                securedCreditLines: 0,\r\n                creditCardDebt: Math.round(totalDebt * 0.40),\r\n                personalLoans: Math.round(totalDebt * 0.10),\r\n                studentLoans: Math.round(totalDebt * 0.20),\r\n                medicalDebt: 0,\r\n                businessLoans: 0,\r\n                businessCreditLines: 0,\r\n                taxDebt: 0,\r\n                legalJudgments: 0,\r\n                otherDebt: 0,\r\n                creditScore: creditScore, // USER INPUT\r\n                totalCreditLimit: Math.round(totalDebt * 2.5) // Based on user's debt\r\n            },\r\n            insurance: {\r\n                healthInsurance: true,\r\n                healthDeductible: 2000,\r\n                healthOutOfPocketMax: 8000,\r\n                lifeInsurance: false,\r\n                lifeCoverageAmount: 0,\r\n                shortTermDisability: false,\r\n                longTermDisability: false,\r\n                disabilityCoveragePercent: 0,\r\n                homeInsurance: true,\r\n                autoInsurance: true,\r\n                umbrellaPolicy: false,\r\n                insuranceConfidence: 'somewhat-confident'\r\n            },\r\n            goals: {\r\n                emergencyFundTarget: (monthlyHousing + monthlyExpenses) * 6, // Based on user's expenses\r\n                debtPayoffGoal: totalDebt > 0,\r\n                majorPurchaseAmount: 0,\r\n                homeDownPayment: 0,\r\n                educationFunding: 0,\r\n                careerChangeBuffer: 0,\r\n                retirementAge: 65,\r\n                retirementIncomeNeeded: monthlyIncome * 0.80, // Based on user's income\r\n                legacyGoalAmount: 0,\r\n                retirementConfidence: 'somewhat-confident',\r\n                longTermGoalConfidence: 'somewhat-confident',\r\n                riskTolerance: 'moderate',\r\n                investmentExperience: 'intermediate'\r\n            },\r\n            behaviors: {\r\n                billPaymentReliability: creditScore > 750 ? 'always-on-time' : creditScore > 650 ? 'usually-on-time' : 'sometimes-late', // Based on user's credit score\r\n                budgetingMethod: 'simple-tracking',\r\n                financialPlanningEngagement: 'occasionally-plan',\r\n                automaticSavings: totalSavings > monthlyIncome,\r\n                monthlyInvestmentContribution: Math.round(monthlyIncome * 0.10), // Based on user's income\r\n                emergencyFundPriority: totalSavings < (monthlyHousing + monthlyExpenses) * 3 ? 'high' : 'medium', // Based on user's data\r\n                impulseSpendingFrequency: 'sometimes',\r\n                expenseTrackingMethod: 'casual'\r\n            }\r\n        };\r\n    }\r\n\r\n    private showValidationErrors(errors: string[]): void {\r\n        const errorContainer = this.container.querySelector('#validationErrors') as HTMLElement;\r\n        if (errorContainer) {\r\n            errorContainer.innerHTML = `\r\n                <div class=\"error-messages\">\r\n                    <h4>Please fix the following errors:</h4>\r\n                    <ul>\r\n                        ${errors.map(error => `<li>${error}</li>`).join('')}\r\n                    </ul>\r\n                </div>\r\n            `;\r\n            (errorContainer as HTMLElement).style.display = 'block';\r\n            errorContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n    }\r\n} ","/**\r\n * Financial Constants and Thresholds\r\n * Based on Financial Health Network 2024 research standards\r\n */\r\n\r\n// Health Score Thresholds\r\nexport const HEALTH_SCORE_THRESHOLDS = {\r\n    EXCELLENT: 80,\r\n    GOOD: 65,\r\n    FAIR: 50,\r\n    LIMITED: 35,\r\n    CRITICAL: 0\r\n} as const;\r\n\r\n// Financial Ratio Benchmarks\r\nexport const FINANCIAL_BENCHMARKS = {\r\n    EMERGENCY_FUND_MONTHS: {\r\n        EXCELLENT: 6,\r\n        GOOD: 4,\r\n        FAIR: 2,\r\n        POOR: 1\r\n    },\r\n    DEBT_TO_INCOME: {\r\n        EXCELLENT: 0.20,\r\n        GOOD: 0.28,\r\n        FAIR: 0.36,\r\n        POOR: 0.50\r\n    },\r\n    SAVINGS_RATE: {\r\n        EXCELLENT: 0.20,\r\n        GOOD: 0.15,\r\n        FAIR: 0.10,\r\n        POOR: 0.05\r\n    },\r\n    CREDIT_UTILIZATION: {\r\n        EXCELLENT: 0.10,\r\n        GOOD: 0.20,\r\n        FAIR: 0.30,\r\n        POOR: 0.50\r\n    }\r\n} as const;\r\n\r\n// Default Form Values\r\nexport const DEFAULT_FORM_VALUES = {\r\n    PERSONAL_INFO: {\r\n        age: 30,\r\n        maritalStatus: 'single' as const,\r\n        dependents: 0,\r\n        employmentStatus: 'employed' as const,\r\n        employmentTenure: 3\r\n    },\r\n    INCOME: {\r\n        primarySalary: 5000,\r\n        secondaryIncome: 0,\r\n        businessIncome: 0,\r\n        investmentIncome: 0,\r\n        rentalIncome: 0,\r\n        benefitsIncome: 0,\r\n        otherIncome: 0,\r\n        incomeGrowthRate: 0.03,\r\n        incomeVariability: 'stable' as const,\r\n        effectiveTaxRate: 0.22\r\n    },\r\n    EXPENSES: {\r\n        housing: 1500,\r\n        utilities: 200,\r\n        food: 600,\r\n        transportation: 400,\r\n        healthcare: 200,\r\n        insurance: 300,\r\n        entertainment: 200,\r\n        shopping: 150,\r\n        creditCardPayments: 200\r\n    },\r\n    ASSETS: {\r\n        checking: 2000,\r\n        savings: 5000,\r\n        emergencyFund: 10000,\r\n        employer401k: 25000,\r\n        brokerageAccounts: 15000\r\n    },\r\n    LIABILITIES: {\r\n        creditCardDebt: 5000,\r\n        studentLoans: 20000,\r\n        autoLoans: 15000,\r\n        mortgageBalance: 200000,\r\n        creditScore: 720,\r\n        totalCreditLimit: 25000\r\n    }\r\n} as const;\r\n\r\n// Health Indicator Weights (sum to 1.0)\r\nexport const INDICATOR_WEIGHTS = {\r\n    SPENDING_VS_INCOME: 0.15,\r\n    BILL_PAYMENT: 0.12,\r\n    EMERGENCY_SAVINGS: 0.15,\r\n    DEBT_MANAGEMENT: 0.15,\r\n    CREDIT_HEALTH: 0.13,\r\n    INSURANCE_COVERAGE: 0.10,\r\n    RETIREMENT_PLANNING: 0.12,\r\n    FINANCIAL_PLANNING: 0.08\r\n} as const;\r\n\r\n// Status Color Mappings\r\nexport const STATUS_COLORS = {\r\n    excellent: '#10b981',\r\n    good: '#3b82f6',\r\n    fair: '#f59e0b',\r\n    poor: '#ef4444',\r\n    critical: '#dc2626'\r\n} as const;\r\n\r\n// Currency Formatting Options\r\nexport const CURRENCY_FORMAT_OPTIONS = {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0\r\n} as const; ","/**\r\n * Enhanced Results Display Component\r\n * Provides clear, actionable financial analysis results with explanations\r\n */\r\n\r\nimport { ComprehensiveAnalysisResult } from '../../interfaces/analysis-types';\r\nimport { STATUS_COLORS } from '../../constants/financial-constants';\r\n\r\nexport class EnhancedResultsDisplay {\r\n    private container: HTMLElement;\r\n\r\n    constructor(containerId: string) {\r\n        const element = document.getElementById(containerId);\r\n        if (!element) {\r\n            throw new Error(`Element with ID ${containerId} not found`);\r\n        }\r\n        this.container = element;\r\n    }\r\n\r\n    public render(analysisResult: ComprehensiveAnalysisResult): void {\r\n        this.container.innerHTML = this.generateHTML(analysisResult);\r\n        this.attachInteractiveElements();\r\n    }\r\n\r\n    private generateHTML(analysisResult: ComprehensiveAnalysisResult): string {\r\n        return `\r\n            <div class=\"enhanced-results\">\r\n                ${this.generateOverallScoreSection(analysisResult)}\r\n                ${this.generateKeyInsightsSection(analysisResult)}\r\n                ${this.generateHealthIndicatorsSection(analysisResult)}\r\n                ${this.generateActionPlanSection(analysisResult)}\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    private generateOverallScoreSection(analysisResult: ComprehensiveAnalysisResult): string {\r\n        const { overallHealthScore, healthLevel } = analysisResult;\r\n        const scoreColor = STATUS_COLORS[healthLevel as keyof typeof STATUS_COLORS] || STATUS_COLORS.fair;\r\n        \r\n        return `\r\n            <div class=\"overall-score-section\">\r\n                <div class=\"score-container\">\r\n                    <div class=\"score-circle\" style=\"border-color: ${scoreColor}\">\r\n                        <div class=\"score-value\">${overallHealthScore}</div>\r\n                        <div class=\"score-label\">Financial Health Score</div>\r\n                    </div>\r\n                    <div class=\"score-details\">\r\n                        <h1 class=\"health-level\" style=\"color: ${scoreColor}\">\r\n                            ${this.getHealthLevelText(healthLevel)}\r\n                        </h1>\r\n                        <p class=\"score-explanation\">\r\n                            ${this.getScoreExplanation(overallHealthScore, healthLevel)}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    private generateKeyInsightsSection(analysisResult: ComprehensiveAnalysisResult): string {\r\n        const insights = this.generateKeyInsights(analysisResult);\r\n        \r\n        return `\r\n            <div class=\"key-insights-section\">\r\n                <h2>🎯 Key Insights About Your Finances</h2>\r\n                <div class=\"insights-grid\">\r\n                    ${insights.map(insight => `\r\n                        <div class=\"insight-card ${insight.type}\">\r\n                            <div class=\"insight-icon\">${insight.icon}</div>\r\n                            <div class=\"insight-content\">\r\n                                <h3>${insight.title}</h3>\r\n                                <p>${insight.description}</p>\r\n                                <div class=\"insight-metric\">\r\n                                    <span class=\"metric-value\">${insight.value}</span>\r\n                                    <span class=\"metric-label\">${insight.label}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    private generateHealthIndicatorsSection(analysisResult: ComprehensiveAnalysisResult): string {\r\n        const { healthIndicators } = analysisResult;\r\n        \r\n        return `\r\n            <div class=\"health-indicators-section\">\r\n                <h2>📊 Your Financial Health Breakdown</h2>\r\n                <p class=\"section-description\">\r\n                    Based on 8 key indicators from financial health research. Click on any indicator to learn more.\r\n                </p>\r\n                <div class=\"indicators-grid\">\r\n                    ${healthIndicators.map((indicator, index) => `\r\n                        <div class=\"indicator-card expandable\" data-indicator=\"${index}\">\r\n                            <div class=\"indicator-header\">\r\n                                <div class=\"indicator-title\">\r\n                                    <h3>${indicator.name}</h3>\r\n                                    <span class=\"status-badge status-${indicator.status}\">${this.formatStatus(indicator.status)}</span>\r\n                                </div>\r\n                                <div class=\"indicator-score\">\r\n                                    <span class=\"score\">${Math.round(indicator.score)}</span>\r\n                                    <span class=\"max\">/100</span>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div class=\"indicator-progress\">\r\n                                <div class=\"progress-bar\">\r\n                                    <div class=\"progress-fill\" \r\n                                         style=\"width: ${indicator.score}%; background-color: ${STATUS_COLORS[indicator.status as keyof typeof STATUS_COLORS] || STATUS_COLORS.fair}\">\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div class=\"indicator-explanation\">\r\n                                <p>${indicator.explanation}</p>\r\n                            </div>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    private generateActionPlanSection(analysisResult: ComprehensiveAnalysisResult): string {\r\n        const { prioritizedRecommendations } = analysisResult;\r\n        const highPriorityRecs = prioritizedRecommendations.filter(rec => rec.priority === 'high').slice(0, 3);\r\n        \r\n        return `\r\n            <div class=\"action-plan-section\">\r\n                <h2>🚀 Your Personalized Action Plan</h2>\r\n                <p class=\"section-description\">\r\n                    Based on your specific financial situation, here are the most impactful steps you can take:\r\n                </p>\r\n                \r\n                <div class=\"priority-actions\">\r\n                    <h3>🔥 High Priority Actions (Start Here)</h3>\r\n                    <div class=\"actions-list\">\r\n                        ${highPriorityRecs.map((rec, index) => `\r\n                            <div class=\"action-item priority-high\">\r\n                                <div class=\"action-number\">${index + 1}</div>\r\n                                <div class=\"action-content\">\r\n                                    <h4>${rec.title}</h4>\r\n                                    <p>${rec.description}</p>\r\n                                    <div class=\"action-details\">\r\n                                        <div class=\"action-steps\">\r\n                                            <strong>Action Steps:</strong>\r\n                                            <ul>\r\n                                                ${rec.actionSteps.map(step => `<li>${step}</li>`).join('')}\r\n                                            </ul>\r\n                                        </div>\r\n                                        <div class=\"action-meta\">\r\n                                            <span class=\"timeframe\">⏱️ ${this.formatTimeframe(rec.timeframe)}</span>\r\n                                            <span class=\"impact\">📈 ${this.formatImpact(rec.impactLevel)} Impact</span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        `).join('')}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    private generateKeyInsights(analysisResult: ComprehensiveAnalysisResult): any[] {\r\n        const { keyMetrics } = analysisResult;\r\n        \r\n        return [\r\n            {\r\n                type: 'cash-flow',\r\n                icon: '💰',\r\n                title: 'Monthly Cash Flow',\r\n                description: keyMetrics.monthlyCashFlow >= 0 ? 'You have positive cash flow' : 'You\\'re spending more than you earn',\r\n                value: this.formatCurrency(keyMetrics.monthlyCashFlow),\r\n                label: 'per month'\r\n            },\r\n            {\r\n                type: 'emergency-fund',\r\n                icon: '🛡️',\r\n                title: 'Emergency Preparedness',\r\n                description: keyMetrics.emergencyFundMonths >= 3 ? 'Good emergency coverage' : 'Build your emergency fund',\r\n                value: keyMetrics.emergencyFundMonths.toFixed(1),\r\n                label: 'months covered'\r\n            },\r\n            {\r\n                type: 'debt-ratio',\r\n                icon: '📉',\r\n                title: 'Debt Management',\r\n                description: keyMetrics.debtToIncomeRatio <= 0.36 ? 'Healthy debt levels' : 'Consider debt reduction',\r\n                value: `${(keyMetrics.debtToIncomeRatio * 100).toFixed(1)}%`,\r\n                label: 'of income'\r\n            },\r\n            {\r\n                type: 'savings-rate',\r\n                icon: '📈',\r\n                title: 'Savings Rate',\r\n                description: keyMetrics.savingsRate >= 0.15 ? 'Excellent saving habits' : 'Increase your savings',\r\n                value: `${(keyMetrics.savingsRate * 100).toFixed(1)}%`,\r\n                label: 'of income'\r\n            }\r\n        ];\r\n    }\r\n\r\n    private attachInteractiveElements(): void {\r\n        // Add any interactive functionality here\r\n    }\r\n\r\n    private getHealthLevelText(healthLevel: string): string {\r\n        const levelMap: { [key: string]: string } = {\r\n            'excellent': 'Excellent Financial Health',\r\n            'good': 'Good Financial Health',\r\n            'fair': 'Fair Financial Health',\r\n            'limited': 'Limited Financial Health',\r\n            'critical': 'Critical Financial Health'\r\n        };\r\n        return levelMap[healthLevel] || 'Unknown Health Level';\r\n    }\r\n\r\n    private getScoreExplanation(score: number, _level: string): string {\r\n        if (score >= 80) {\r\n            return 'Outstanding! You have excellent financial habits and are well-positioned for the future.';\r\n        } else if (score >= 65) {\r\n            return 'Good work! You have solid financial fundamentals with room for some improvements.';\r\n        } else if (score >= 50) {\r\n            return 'You\\'re on the right track, but there are several areas where focused improvements could make a big difference.';\r\n        } else if (score >= 35) {\r\n            return 'Your financial health needs attention. The good news is that targeted actions can lead to significant improvements.';\r\n        } else {\r\n            return 'Your financial situation requires immediate attention. Focus on the high-priority recommendations to get back on track.';\r\n        }\r\n    }\r\n\r\n    private formatStatus(status: string): string {\r\n        const statusMap: { [key: string]: string } = {\r\n            'excellent': 'Excellent',\r\n            'good': 'Good',\r\n            'fair': 'Fair',\r\n            'poor': 'Poor',\r\n            'critical': 'Critical'\r\n        };\r\n        return statusMap[status] || status;\r\n    }\r\n\r\n    private formatTimeframe(timeframe: string): string {\r\n        const timeframeMap: { [key: string]: string } = {\r\n            'immediate': 'This Week',\r\n            'short-term': '1-3 Months',\r\n            'medium-term': '3-12 Months',\r\n            'long-term': '1+ Years'\r\n        };\r\n        return timeframeMap[timeframe] || timeframe;\r\n    }\r\n\r\n    private formatImpact(impact: string): string {\r\n        const impactMap: { [key: string]: string } = {\r\n            'high': 'High',\r\n            'medium': 'Medium',\r\n            'low': 'Low'\r\n        };\r\n        return impactMap[impact] || impact;\r\n    }\r\n\r\n    private formatCurrency(amount: number): string {\r\n        return new Intl.NumberFormat('en-US', {\r\n            style: 'currency',\r\n            currency: 'USD',\r\n            minimumFractionDigits: 0,\r\n            maximumFractionDigits: 0\r\n        }).format(amount);\r\n    }\r\n} ","/**\r\n * Improved Financial Health Analyzer Application\r\n * Addresses customer feedback:\r\n * 1. Analysis uses data provided correctly\r\n * 2. Results are clear and actionable\r\n * 3. Reduced input requirements with Quick Analysis option\r\n */\r\n\r\nimport { UserFinancialData } from './interfaces/core-types';\r\nimport { ComprehensiveAnalysisResult } from './interfaces/analysis-types';\r\nimport { FinancialCalculationEngine } from './core/calculations';\r\nimport { MultiStepForm } from './components/forms/MultiStepForm';\r\nimport { QuickAnalysisForm } from './components/forms/QuickAnalysisForm';\r\nimport { EnhancedResultsDisplay } from './components/ui/EnhancedResultsDisplay';\r\n\r\nexport class ImprovedFinancialHealthApp {\r\n    private currentAnalysisType: 'quick' | 'comprehensive' | null = null;\r\n    private multiStepForm?: MultiStepForm; // Used for comprehensive analysis\r\n    private quickForm?: QuickAnalysisForm;\r\n    private resultsDisplay?: EnhancedResultsDisplay;\r\n    private analysisResult?: ComprehensiveAnalysisResult;\r\n\r\n    // DOM Elements\r\n    private analysisChoiceContainer?: HTMLElement;\r\n    private formContainer?: HTMLElement;\r\n    private resultsContainer?: HTMLElement;\r\n\r\n    constructor() {\r\n        this.initializeDOMElements();\r\n        this.attachEventListeners();\r\n        this.showAnalysisChoice();\r\n    }\r\n\r\n    private initializeDOMElements(): void {\r\n        this.analysisChoiceContainer = document.getElementById('analysisChoiceContainer') || undefined;\r\n        this.formContainer = document.getElementById('formContainer') || undefined;\r\n        this.resultsContainer = document.getElementById('resultsContainer') || undefined;\r\n\r\n        if (!this.analysisChoiceContainer || !this.formContainer || !this.resultsContainer) {\r\n            throw new Error('Required DOM elements not found');\r\n        }\r\n    }\r\n\r\n    private attachEventListeners(): void {\r\n        // Analysis type choice buttons\r\n        const quickBtn = document.getElementById('chooseQuickAnalysis');\r\n        const comprehensiveBtn = document.getElementById('chooseComprehensiveAnalysis');\r\n\r\n        if (quickBtn) {\r\n            quickBtn.addEventListener('click', () => {\r\n                this.startQuickAnalysis();\r\n            });\r\n        }\r\n\r\n        if (comprehensiveBtn) {\r\n            comprehensiveBtn.addEventListener('click', () => {\r\n                this.startComprehensiveAnalysis();\r\n            });\r\n        }\r\n    }\r\n\r\n    private showAnalysisChoice(): void {\r\n        if (this.analysisChoiceContainer && this.formContainer && this.resultsContainer) {\r\n            this.analysisChoiceContainer.style.display = 'block';\r\n            this.formContainer.style.display = 'none';\r\n            this.resultsContainer.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    private startQuickAnalysis(): void {\r\n        this.currentAnalysisType = 'quick';\r\n        this.showFormContainer();\r\n\r\n        // Initialize Quick Analysis Form\r\n        if (this.formContainer) {\r\n            this.formContainer.innerHTML = '<div id=\"quickFormContainer\"></div>';\r\n            this.quickForm = new QuickAnalysisForm('quickFormContainer', (userData) => {\r\n                this.handleFormSubmission(userData);\r\n            });\r\n            this.quickForm.render();\r\n        }\r\n    }\r\n\r\n    private startComprehensiveAnalysis(): void {\r\n        this.currentAnalysisType = 'comprehensive';\r\n        this.showFormContainer();\r\n\r\n        // Initialize Multi-Step Form\r\n        if (this.formContainer) {\r\n            this.formContainer.innerHTML = '<div id=\"multiStepFormContainer\"></div>';\r\n            const container = document.getElementById('multiStepFormContainer');\r\n            if (container) {\r\n                this.multiStepForm = new MultiStepForm(container, {\r\n                    onComplete: (userData: UserFinancialData) => {\r\n                        this.handleFormSubmission(userData);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private showFormContainer(): void {\r\n        if (this.analysisChoiceContainer && this.formContainer && this.resultsContainer) {\r\n            this.analysisChoiceContainer.style.display = 'none';\r\n            this.formContainer.style.display = 'block';\r\n            this.resultsContainer.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    private async handleFormSubmission(userData: UserFinancialData): Promise<void> {\r\n        try {\r\n            this.showLoadingState();\r\n            \r\n            // Ensure we're using fresh data directly from the form\r\n            console.log('Processing user data:', userData);\r\n            \r\n            // Perform the financial analysis\r\n            const analysisResult = await this.performAnalysis(userData);\r\n            \r\n            // Display the results\r\n            this.displayResults(analysisResult);\r\n            \r\n        } catch (error) {\r\n            console.error('Analysis failed:', error);\r\n            this.showError('Analysis failed. Please try again.');\r\n        }\r\n    }\r\n\r\n    private showLoadingState(): void {\r\n        if (this.formContainer && this.resultsContainer) {\r\n            this.formContainer.style.display = 'none';\r\n            this.resultsContainer.style.display = 'block';\r\n            \r\n            // Show loading indicator\r\n            const loadingIndicator = document.getElementById('loadingIndicator');\r\n            const analysisResults = document.getElementById('analysisResults');\r\n            \r\n            if (loadingIndicator && analysisResults) {\r\n                loadingIndicator.style.display = 'block';\r\n                analysisResults.style.display = 'none';\r\n            }\r\n        }\r\n    }\r\n\r\n    private async performAnalysis(userData: UserFinancialData): Promise<ComprehensiveAnalysisResult> {\r\n        // Simulate processing delay for better UX\r\n        await new Promise(resolve => setTimeout(resolve, 1500));\r\n        \r\n        // Use the FinancialCalculationEngine to perform the analysis\r\n        return FinancialCalculationEngine.analyzeFinancialHealth(userData);\r\n    }\r\n\r\n    private displayResults(analysisResult: ComprehensiveAnalysisResult): void {\r\n        this.analysisResult = analysisResult;\r\n        \r\n        // Hide loading indicator\r\n        const loadingIndicator = document.getElementById('loadingIndicator');\r\n        const analysisResults = document.getElementById('analysisResults');\r\n        \r\n        if (loadingIndicator && analysisResults) {\r\n            loadingIndicator.style.display = 'none';\r\n            analysisResults.style.display = 'block';\r\n        }\r\n\r\n        // Initialize enhanced results display\r\n        if (this.resultsContainer) {\r\n            // Clear existing results and create enhanced display container\r\n            const existingResults = document.getElementById('analysisResults');\r\n            if (existingResults) {\r\n                existingResults.innerHTML = '<div id=\"enhancedResults\"></div>';\r\n                \r\n                this.resultsDisplay = new EnhancedResultsDisplay('enhancedResults');\r\n                this.resultsDisplay.render(analysisResult);\r\n            }\r\n        }\r\n\r\n        // Add navigation options\r\n        this.addResultsNavigation();\r\n    }\r\n\r\n    private addResultsNavigation(): void {\r\n        const resultsContainer = document.getElementById('enhancedResults');\r\n        if (resultsContainer) {\r\n            const navigationHTML = `\r\n                <div class=\"results-navigation\">\r\n                    <div class=\"nav-actions\">\r\n                        <button class=\"btn btn-outline\" id=\"startNewAnalysis\">\r\n                            📊 Start New Analysis\r\n                        </button>\r\n                        <button class=\"btn btn-secondary\" id=\"exportResults\">\r\n                            📄 Export Results\r\n                        </button>\r\n                        <button class=\"btn btn-primary\" id=\"saveProgress\">\r\n                            💾 Save Progress\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"analysis-info\">\r\n                        <p class=\"analysis-type\">\r\n                            Analysis Type: <strong>${this.currentAnalysisType === 'quick' ? 'Quick Analysis' : 'Comprehensive Analysis'}</strong>\r\n                        </p>\r\n                        <p class=\"analysis-date\">\r\n                            Generated: <strong>${new Date().toLocaleDateString()}</strong>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            \r\n            resultsContainer.insertAdjacentHTML('beforeend', navigationHTML);\r\n            \r\n            // Attach navigation event listeners\r\n            const startNewBtn = document.getElementById('startNewAnalysis');\r\n            const exportBtn = document.getElementById('exportResults');\r\n            const saveBtn = document.getElementById('saveProgress');\r\n            \r\n            if (startNewBtn) {\r\n                startNewBtn.addEventListener('click', () => {\r\n                    this.resetApplication();\r\n                });\r\n            }\r\n            \r\n            if (exportBtn) {\r\n                exportBtn.addEventListener('click', () => {\r\n                    this.exportResults();\r\n                });\r\n            }\r\n            \r\n            if (saveBtn) {\r\n                saveBtn.addEventListener('click', () => {\r\n                    this.saveProgress();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private resetApplication(): void {\r\n        this.currentAnalysisType = null;\r\n        this.analysisResult = undefined;\r\n        \r\n        // Reset form instances\r\n        if (this.multiStepForm) {\r\n            this.multiStepForm = undefined;\r\n        }\r\n        if (this.quickForm) {\r\n            this.quickForm = undefined;\r\n        }\r\n        if (this.resultsDisplay) {\r\n            this.resultsDisplay = undefined;\r\n        }\r\n        \r\n        this.showAnalysisChoice();\r\n    }\r\n\r\n    private exportResults(): void {\r\n        if (!this.analysisResult) return;\r\n        \r\n        // Create a simplified export of the results\r\n        const exportData = {\r\n            analysisDate: new Date().toISOString(),\r\n            analysisType: this.currentAnalysisType,\r\n            overallScore: this.analysisResult.overallHealthScore,\r\n            healthLevel: this.analysisResult.healthLevel,\r\n            keyMetrics: this.analysisResult.keyMetrics,\r\n            healthIndicators: this.analysisResult.healthIndicators.map(indicator => ({\r\n                name: indicator.name,\r\n                score: indicator.score,\r\n                status: indicator.status,\r\n                explanation: indicator.explanation\r\n            })),\r\n            topRecommendations: this.analysisResult.prioritizedRecommendations\r\n                .filter(rec => rec.priority === 'high')\r\n                .slice(0, 5)\r\n                .map(rec => ({\r\n                    title: rec.title,\r\n                    description: rec.description,\r\n                    actionSteps: rec.actionSteps,\r\n                    timeframe: rec.timeframe\r\n                }))\r\n        };\r\n        \r\n        // Create and download JSON file\r\n        const dataStr = JSON.stringify(exportData, null, 2);\r\n        const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n        const url = URL.createObjectURL(dataBlob);\r\n        \r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = `financial-health-analysis-${new Date().toISOString().split('T')[0]}.json`;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        \r\n        URL.revokeObjectURL(url);\r\n        \r\n        // Show success message\r\n        this.showSuccessMessage('Results exported successfully!');\r\n    }\r\n\r\n    private saveProgress(): void {\r\n        if (!this.analysisResult) return;\r\n        \r\n        // Save to localStorage for demonstration\r\n        const saveData = {\r\n            timestamp: new Date().toISOString(),\r\n            analysisType: this.currentAnalysisType,\r\n            results: this.analysisResult\r\n        };\r\n        \r\n        try {\r\n            localStorage.setItem('financialHealthAnalysis', JSON.stringify(saveData));\r\n            this.showSuccessMessage('Progress saved successfully!');\r\n        } catch (error) {\r\n            console.error('Failed to save progress:', error);\r\n            this.showError('Failed to save progress. Please try again.');\r\n        }\r\n    }\r\n\r\n    private showError(message: string): void {\r\n        // Show error message to user\r\n        const errorContainer = document.createElement('div');\r\n        errorContainer.className = 'error-toast';\r\n        errorContainer.innerHTML = `\r\n            <div class=\"toast-content\">\r\n                <span class=\"toast-icon\">❌</span>\r\n                <span class=\"toast-message\">${message}</span>\r\n            </div>\r\n        `;\r\n        \r\n        document.body.appendChild(errorContainer);\r\n        \r\n        // Remove after 5 seconds\r\n        setTimeout(() => {\r\n            if (errorContainer.parentNode) {\r\n                errorContainer.parentNode.removeChild(errorContainer);\r\n            }\r\n        }, 5000);\r\n    }\r\n\r\n    private showSuccessMessage(message: string): void {\r\n        // Show success message to user\r\n        const successContainer = document.createElement('div');\r\n        successContainer.className = 'success-toast';\r\n        successContainer.innerHTML = `\r\n            <div class=\"toast-content\">\r\n                <span class=\"toast-icon\">✅</span>\r\n                <span class=\"toast-message\">${message}</span>\r\n            </div>\r\n        `;\r\n        \r\n        document.body.appendChild(successContainer);\r\n        \r\n        // Remove after 3 seconds\r\n        setTimeout(() => {\r\n            if (successContainer.parentNode) {\r\n                successContainer.parentNode.removeChild(successContainer);\r\n            }\r\n        }, 3000);\r\n    }\r\n}\r\n\r\n// Initialize the application when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    new ImprovedFinancialHealthApp();\r\n}); "],"names":["formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","Math","round","RecommendationEngine","generateRecommendations","analysis","data","recommendations","healthIndicators","keyMetrics","push","this","getEmergencyFundRecommendations","getHighDebtRecommendations","getNegativeCashFlowRecommendations","getSavingsRateRecommendations","getInsuranceRecommendations","getCreditScoreOptimizationRecommendations","liabilities","creditScore","getInvestmentRecommendations","getBudgetingRecommendations","getAutomatedSavingsRecommendations","forEach","indicator","getGenericIndicatorRecommendations","sort","a","b","priorityOrder","high","medium","low","priority","Array","from","Map","map","r","id","values","slice","emergencyFundMonths","totalLiquidAssets","totalMonthlyExpenses","expenses","housing","food","transportation","utilities","targetFund","category","title","description","actionSteps","timeframe","impactLevel","amountNeeded","toFixed","_data","debtToIncomeRatio","creditUtilization","monthlyCashFlow","abs","savingsRate","insurance","insuranceConfidence","behaviors","monthlyInvestmentContribution","budgetingMethod","automaticSavings","status","name","toLowerCase","replace","FinancialCalculationEngine","analyzeFinancialHealth","validateUserData","calculateKeyMetrics","calculateHealthIndicators","overallHealthScore","calculateOverallHealthScore","result","healthLevel","getHealthLevel","liquidityAnalysis","analyzeLiquidity","debtAnalysis","analyzeDebt","investmentAnalysis","analyzeInvestments","insuranceAnalysis","analyzeInsurance","wealthProjections","projectWealth","scenarioAnalysis","analyzeScenarios","prioritizedRecommendations","peerBenchmarks","calculatePeerBenchmarks","detailedInsights","generateDetailedInsights","financialRatios","calculateFinancialRatios","riskAssessment","assessFinancialRisk","goalAnalysis","analyzeFinancialGoals","totalIncome","getTotalMonthlyIncome","income","totalExpenses","getTotalMonthlyExpenses","totalAssets","getTotalAssets","assets","totalLiabilities","getTotalLiabilities","netWorth","checking","savings","moneyMarket","emergencyFund","totalDebt","getTotalDebt","totalCreditLimit","creditCardDebt","liquidityRatio","assetAllocationScore","calculateAssetAllocationScore","analyzeSpendingVsIncome","analyzeBillPaymentReliability","analyzeEmergencySavings","analyzeDebtManagement","analyzeCreditHealth","analyzeInsuranceConfidence","analyzeLongTermGoalConfidence","analyzeFinancialPlanningEngagement","cashFlowRatio","score","weight","metrics","value","numericValue","benchmark","improvement","undefined","getSpendingRecommendations","explanation","reliability","billPaymentReliability","formatReliabilityText","toString","getCreditScoreStatus","getPaymentReliabilityRecommendations","primarySalary","secondaryIncome","businessIncome","investmentIncome","rentalIncome","benefitsIncome","otherIncome","loanPayments","childcare","healthcare","clothing","personalCare","entertainment","diningOut","hobbies","subscriptions","shopping","travel","creditCardPayments","studentLoanPayments","otherDebtPayments","employer401k","traditionalIRA","rothIRA","brokerageAccounts","stocks","bonds","mutualFunds","primaryResidence","investmentProperties","cryptocurrency","preciousMetals","collectibles","businessEquity","otherAssets","mortgageBalance","homeEquityLoan","autoLoans","securedCreditLines","personalLoans","studentLoans","medicalDebt","businessLoans","businessCreditLines","taxDebt","legalJudgments","otherDebt","indicators","totalWeightedScore","totalWeight","getDebtManagementRecommendations","getCreditUtilizationStatus","getCreditHealthRecommendations","hasHealthInsurance","healthInsurance","hasLifeInsurance","lifeInsurance","hasDisabilityInsurance","shortTermDisability","longTermDisability","confidence","insuranceCount","formatConfidenceText","retirementConfidence","goals","hasRetirementSavings","monthlyInvestment","getRetirementRecommendations","budgeting","planning","financialPlanningEngagement","budgetScore","planningScore","formatBudgetText","formatPlanningText","getPlanningRecommendations","totalInvestments","investmentRatio","targetStockAllocation","personalInfo","age","allocationScore","max","_keyMetrics","monthlyExpenses","monthlyIncome","investmentRate","dependents","coverageScore","currentAge","yearsToRetirement","retirementAge","currentInvestments","projections","rate","scenario","monthlyRate","months","totalProjected","pow","projectedValue","monthlyContribution","assumptions","toLocaleString","impact","timeToRecover","probability","cashFlowAnalysis","surplus","surplusPercentage","insight","netWorthAnalysis","currentNetWorth","netWorthPerAge","projectedGrowth","calculateNetWorthGrowth","riskFactors","identifyRiskFactors","opportunities","identifyOpportunities","liquidityRatios","currentRatio","quickRatio","emergencyFundRatio","leverageRatios","debtToAssetRatio","equityRatio","efficiencyRatios","expenseRatio","risks","level","mitigation","overallRiskLevel","calculateOverallRisk","riskScore","calculateRiskScore","retirementReadiness","currentSavings","calculateRetirementProjection","onTrack","isRetirementOnTrack","emergencyGoal","target","current","progress","timeToGoal","calculateTimeToEmergencyGoal","_healthIndicators","highRisks","filter","length","retirementIncomeNeeded","needed","ceil","ageGroup","floor","incomeGroup","netWorthPercentile","savingsRatePercentile","debtRatioPercentile","ratio","utilization","l","toUpperCase","budget","console","log","cashFlow","totalMonthlyIncome","Error","MultiStepForm","constructor","container","callbacks","currentStepIndex","formData","steps","onDataChange","onComplete","initializeSteps","initializeFormData","render","fields","type","label","required","validation","min","options","isComplete","validationErrors","step","maritalStatus","state","employmentStatus","employmentTenure","healthStatus","incomeGrowthRate","incomeVariability","effectiveTaxRate","healthDeductible","healthOutOfPocketMax","lifeCoverageAmount","disabilityCoveragePercent","homeInsurance","autoInsurance","umbrellaPolicy","emergencyFundTarget","debtPayoffGoal","majorPurchaseAmount","homeDownPayment","educationFunding","careerChangeBuffer","legacyGoalAmount","longTermGoalConfidence","riskTolerance","investmentExperience","emergencyFundPriority","impulseSpendingFrequency","expenseTrackingMethod","innerHTML","renderCurrentStep","attachEventListeners","field","renderField","join","getFieldValue","option","fieldId","find","f","prevBtn","querySelector","nextBtn","addEventListener","previousStep","nextStep","querySelectorAll","input","e","handleFieldChange","event","parseFloat","updateFormData","validateCurrentStep","currentStep","errors","isNaN","Number","numValue","completeForm","showValidationErrors","alert","isFormComplete","every","getCurrentData","QuickAnalysisForm","containerId","onSubmit","element","document","getElementById","generateHTML","form","preventDefault","handleSubmit","handleInputChange","dataset","formatCurrencyInput","validateField","attachTooltips","_input","updateRealTimeCalculations","updateProgress","updateSubmitButton","getNumericValue","debt","emergencyMonths","textContent","className","debtRatio","debtRatioElement","fieldName","inputs","completedFields","trim","progressFill","progressText","width","button","allValid","htmlInput","checkValidity","disabled","classList","toggle","fieldContainer","closest","feedback","isValid","message","display","icon","tooltipText","tooltip","showTooltip","hideTooltip","text","createElement","body","appendChild","rect","getBoundingClientRect","top","window","scrollY","left","transform","remove","FormData","btnText","btnLoader","contains","resetSubmitButton","errorContainer","userData","buildUserDataFromForm","monthlyHousing","totalSavings","get","error","scrollIntoView","behavior","block","STATUS_COLORS","excellent","good","fair","poor","critical","EnhancedResultsDisplay","analysisResult","attachInteractiveElements","generateOverallScoreSection","generateKeyInsightsSection","generateHealthIndicatorsSection","generateActionPlanSection","scoreColor","getHealthLevelText","getScoreExplanation","generateKeyInsights","index","formatStatus","rec","formatTimeframe","formatImpact","_level","ImprovedFinancialHealthApp","currentAnalysisType","initializeDOMElements","showAnalysisChoice","analysisChoiceContainer","formContainer","resultsContainer","quickBtn","comprehensiveBtn","startQuickAnalysis","startComprehensiveAnalysis","showFormContainer","quickForm","handleFormSubmission","multiStepForm","showLoadingState","performAnalysis","displayResults","showError","loadingIndicator","analysisResults","Promise","resolve","setTimeout","existingResults","resultsDisplay","addResultsNavigation","navigationHTML","Date","toLocaleDateString","insertAdjacentHTML","startNewBtn","exportBtn","saveBtn","resetApplication","exportResults","saveProgress","exportData","analysisDate","toISOString","analysisType","overallScore","topRecommendations","dataStr","JSON","stringify","dataBlob","Blob","url","URL","createObjectURL","link","href","download","split","click","removeChild","revokeObjectURL","showSuccessMessage","saveData","timestamp","results","localStorage","setItem","parentNode","successContainer"],"sourceRoot":""}