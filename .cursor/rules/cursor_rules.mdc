---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---
---
description: Enforce accurate, meaningful numbers, cohesive design, and detailed planning for all UI and analysis work
globs: src/components/**/*.ts, src/index.html, src/core/**/*.ts, src/services/**/*.ts
alwaysApply: true
---

- **Accurate, Meaningful Numbers**
  - **DO:** Ensure all user-facing numbers are calculated from actual user input and validated.
    ```typescript
    // ✅ DO
    const netWorth = assetsTotal - liabilitiesTotal;
    if (typeof netWorth !== 'number' || isNaN(netWorth)) return 'N/A';
    ```
  - **DON'T:** Display placeholder, undefined, or stale data.
    ```typescript
    // ❌ DON'T
    const netWorth = undefined;
    ```

- **Cohesive, Unified Design**
  - **DO:** Use the same card/grid/container styles, color palette, and formatting for all forms and results.
    ```typescript
    // ✅ DO
    // Use EnhancedResultsDisplay for all results
    display.render(analysisResult);
    ```
  - **DON'T:** Use inconsistent layouts or styles between quick and comprehensive analysis.

- **Detailed Planning**
  - **DO:** Start all major changes with a detailed plan with tasks and subtasks.
    ```markdown
    // ✅ DO
    ## Plan
    - Task 1: ...
      - Subtask 1.1: ...
    ```
  - **DON'T:** Make major changes without a plan.

- **Edge Case Handling**
  - **DO:** Always check for $NaN, undefined, or negative values before displaying financial metrics.
    ```typescript
    // ✅ DO
    if (typeof value !== 'number' || isNaN(value)) return 'N/A';
    if (value === 0) return '$0';
    ```
  - **DON'T:** Display $NaN, undefined, or negative values in the UI.
    ```typescript
    // ❌ DON'T
    return `$${value}`; // if value could be NaN
    ```

- **Detailed Financial Analysis**
  - **DO:** Provide granular breakdowns (net worth, savings rate, debt structure, expenses, investments, insurance, benchmarks, scenarios).
  - **DO:** Add actionable insights and explanations for each area.

- **Mobile-First & Responsive Design**
  - **DO:** Use CSS Grid/Flexbox and media queries for all components.
  - **DO:** Test on various screen sizes and ensure touch targets are large enough.
  - **DON'T:** Use fixed pixel widths for layout-critical elements.
  - **DO:** Use relative units (%, rem, em) for sizing and spacing.
  - **DO:** Ensure touch targets are large enough for mobile users.
  - **DO:** Use semantic HTML and ARIA attributes for accessibility.
  - **DO:** Provide horizontal scrolling for wide tables/charts on mobile.
  - **DO:** Minimize modal/pop-up use on mobile; prefer inline expansion.
  - **DO:** Ensure all forms and buttons are easily usable on small screens.
  - **DO:** Use color contrast and font sizes that meet accessibility standards.

- **Testing & Documentation**
  - **DO:** Add/expand tests for all new logic and edge cases.
  - **DO:** Add/expand JSDoc and inline comments for new/updated logic.

- **Main Points in Bold**
  - Sub-points with details
  - Examples and explanations

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 